<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.WPF.4</name>
  </assembly>
  <members>
    <member name="T:C1.WPF.C1TreeViewItem">
      <summary>
            Implements a selectable item in a C1TreeView control.
            </summary>
    </member>
    <member name="T:C1.WPF.C1HierarchicalPresenter">
      <summary>
            Represents a control that contains multiple items and has a header.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnItemPrepared(C1.WPF.ItemPreparedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1HierarchicalPresenter.ItemPrepared" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnItemCleared(C1.WPF.ItemPreparedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1HierarchicalPresenter.ItemCleared" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.IsAncestorOf(C1.WPF.C1HierarchicalPresenter)">
      <summary>
            Determines whether the <see cref="T:C1.Silverlight.C1HierarchicalPresenter" /> is an ancestor of the descendant element.
            </summary>
      <param name="descendant">The descendant <see cref="T:C1.Silverlight.C1HierarchicalPresenter" />.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.InitializeItem(C1.WPF.C1HierarchicalPresenter)">
      <summary>
            Initializes a <see cref="T:C1.Silverlight.C1HierarchicalPresenter" /> by setting its parent and root elements
            in the hierarchy.
            </summary>
      <remarks>
            This method should be invoked only when we want to force the initialization of an item 
            before it gets visible. Otherwise the item will be initialized automatically before becoming
            visible.
            </remarks>
      <param name="rootPresenter">The <see cref="T:C1.Silverlight.C1HierarchicalPresenter" /> whose this item belongs to.</param>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.ToList``1">
      <summary>
            Creates a list with all the item containers present in the Hierarchical Presenter at
            the moment of invocation.
            </summary>
      <typeparam name="T">The type of the container, e.g. C1TreeViewItem</typeparam>
      <returns>The list of item containers.</returns>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnHeaderChanged(System.Object)">
      <summary>
            Called when the value of the <see cref="P:Header" /> property changes.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1HierarchicalPresenter.HeaderProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HierarchicalPresenter.Header" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HierarchicalPresenter.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HierarchicalPresenter.HeaderTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1HierarchicalPresenter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1HierarchicalPresenter" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1HierarchicalPresenter.ItemPrepared">
      <summary>
            Occurs when a C1HierarchicalPresenter child item is prepared
            (PrepareContainerForItemOverride was invoked).
            </summary>
    </member>
    <member name="E:C1.WPF.C1HierarchicalPresenter.ItemCleared">
      <summary>
            Occurs when a C1HierarchicalPresenter child item is cleared.
            (ClearContainerForItemOverride was invoked).
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.ItemConverter">
      <summary>
            The ItemConverter performs the conversion from a <see cref="T:C1.Silverlight.C1HierarchicalPresenter" /> instance to its String
            representation.
            If not set by the user, the default converter will be used.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.ParentCollection">
      <summary>
            Gets the items collection of this element's parent. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.ParentItemsSource">
      <summary>
            Returns this element's parent ItemsSource Property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.Header">
      <summary>
            Gets or sets the item that labels the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.HeaderTemplate">
      <summary>
            Gets or sets the template used to display the contents of the control's header.
            </summary>
    </member>
    <member name="E:C1.WPF.C1HierarchicalPresenter.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnExpanding(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeViewItem.Expanding" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnExpanded(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeViewItem.Expanded" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnCollapsing(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeViewItem.Collapsing" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnCollapsed(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeViewItem.Collapsed" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnClick(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeViewItem.Click" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnItemCleared(C1.WPF.ItemPreparedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1HierarchicalPresenter.ItemCleared" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnItemPrepared(C1.WPF.ItemPreparedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1HierarchicalPresenter.ItemPrepared" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnHeaderChanged(System.Object)">
      <summary>
            Called when the value of the <see cref="P:Header" /> property changes.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.MeasureOverride(System.Windows.Size)">
      <summary>
            Called to remeasure a control.
            </summary>
      <param name="constraint">The maximum size that the method can return.</param>
      <returns>The size of the control, up to the maximum specified by constraint.</returns>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnExpandButtonClick">
      <summary>
            Called when the user clicks the expand/collapse button.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnTapped(System.Object,C1.WPF.C1TappedEventArgs)">
      <summary>
            Called when the user presses the left mouse button over the item. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
      <summary>
            Called when the user presses a key, performs keyboard auto-search and node navigation.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Called when the Items property changes.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.EnsureVisible">
      <summary>
            Scrolls the <see cref="T:C1.Silverlight.C1TreeViewItem" /> into view.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.Collapse">
      <summary>
            Collapses the <see cref="T:C1.Silverlight.C1TreeViewItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.Expand">
      <summary>
            Expands the <see cref="T:C1.Silverlight.C1TreeViewItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.ChangeVisualStateShowLines(System.Boolean)">
      <summary>
            Updates the current visual state of the ShowLines visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.ChangeVisualStateItemLine(System.Boolean)">
      <summary>
            Updates the current visual state of the ItemLine visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.ChangeVisualStateExpandedStates(System.Boolean)">
      <summary>
            Updates the current visual state of the ExpandedStates visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.ChangeVisualStateSelection(System.Boolean)">
      <summary>
            Updates the current visual state of the Selection visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.TextAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewItem.TextAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.TextDecorationsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewItem.TextDecorations" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.TextWrappingProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewItem.TextWrapping" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewItem.IsSelected" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.IsExpandedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewItem.IsExpanded" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.EditTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewItem.EditTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.LineThicknessProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewItem.LineThickness" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.LineStrokeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewItem.LineStroke" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.LineDashArrayProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewItem.LineDashArray" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewItem.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewItem.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TreeViewItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TreeViewItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.TreeView">
      <summary>
            Identifies the parent <see cref="T:C1.Silverlight.C1TreeView" /> of this item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.ParentItem">
      <summary>
            Gets the <see cref="T:C1.WPF.C1TreeViewItem" /> that is the parent of this item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.Parent">
      <summary>
            Gets the <see cref="T:C1.WPF.C1TreeViewItem" /> that is the parent of this item.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewItem.IsExpandedChanged">
      <summary> 
            Event raised when the <see cref="P:IsExpanded" /> property has changed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewItem.Expanding">
      <summary>
            Occurs before the <see cref="T:C1.WPF.C1TreeViewItem" /> is expanded. 
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewItem.Expanded">
      <summary>
            Occurs after the <see cref="T:C1.WPF.C1TreeViewItem" /> is expanded. 
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewItem.Collapsing">
      <summary>
            Occurs before the <see cref="T:C1.WPF.C1TreeViewItem" /> is collapsed. 
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewItem.Collapsed">
      <summary>
            Occurs after the <see cref="T:C1.WPF.C1TreeViewItem" /> is collapsed. 
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewItem.Click">
      <summary>
            Occurs when the <see cref="T:C1.WPF.C1TreeViewItem" /> is clicked. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.Index">
      <summary>
            Gets the index of this <see cref="T:C1.Silverlight.C1TreeViewItem" /> in its parent items collection
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.NextNode">
      <summary>
            Gets the next node to this one on the <see cref="T:C1.Silverlight.C1TreeView" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.NextVisibleNode">
      <summary>
            Gets the next visible node to this one on the <see cref="T:C1.Silverlight.C1TreeView" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.PrevNode">
      <summary>
            Gets the previous node to this one on the <see cref="T:C1.Silverlight.C1TreeView" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.PrevVisibleNode">
      <summary>
            Gets the previous visible node to this one on the <see cref="T:C1.Silverlight.C1TreeView" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.FirstNode">
      <summary>
            Gets this node's first child.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.LastNode">
      <summary>
            Gets this node's last child.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.TextAlignment">
      <summary>
            Gets or sets a value that indicates the horizontal alignment of text content in the Header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.TextDecorations">
      <summary>
            Gets or sets a TextDecorationCollection that contains the effects to apply to the text of the Header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.TextWrapping">
      <summary>
            Gets or sets a value that indicates how any text should be wrapped in the Header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.IsSelected">
      <summary>
            Gets or sets whether a <see cref="T:C1.WPF.C1TreeViewItem" /> control is selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.IsExpanded">
      <summary>
            Gets or sets a value that indicates whether a <see cref="T:C1.WPF.C1TreeViewItem" /> is expanded.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.EditTemplate">
      <summary>
            Gets or sets the template used to edit  the contents of the items.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.LineThickness">
      <summary>
            Gets or sets the thickness of the connecting lines.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.LineStroke">
      <summary>
            Gets or sets the brush used to paint the connecting lines.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.LineDashArray">
      <summary>
            Gets or sets a Collection of System.Double values that indicates the pattern of dashes and gaps that is used to the connecting lines.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TreeView">
      <summary>
            Represents a control that displays hierarchical data in a tree structure that has items that can expand and collapse.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="F:C1.WPF.C1TreeView.IsVirtualizingProperty">
      <summary>
             Identifies the <see cref="P:C1.WPF.C1TreeView.IsVirtualizing" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnDragStart(System.Object,C1.WPF.DragDropEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.DragStart" /> event.
            </summary>
      <param name="source">Used to set the source of the event.</param>
      <param name="e">
        <see cref="T:C1.Silverlight.DragDropEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnDragOver(System.Object,C1.WPF.DragDropEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.DragOver" /> event.
            </summary>
      <param name="source">Used to set the source of the event.</param>
      <param name="e">
        <see cref="T:C1.Silverlight.DragDropEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnDragDrop(System.Object,C1.WPF.DragDropEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.DragDrop" /> event.
            </summary>
      <param name="source">Used to set the source of the event.</param>
      <param name="e">
        <see cref="T:C1.Silverlight.DragDropEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnItemClick(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.ItemClick" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnItemExpanding(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.ItemExpanding" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnItemExpanded(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.ItemExpanded" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnItemCollapsing(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.ItemCollapsing" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnItemCollapsed(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.ItemCollapsed" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnAutoSearchBufferChanged(C1.WPF.AutoSearchBufferChangedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.AutoSearchBufferChanged" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.StartEditing">
      <summary>
            make the selected item enter into editing status
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeView.StartEditing(C1.WPF.C1TreeViewItem)">
      <summary>
            make the item enter into editing status
            </summary>
      <param name="item">represents the item to be edited</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.FinishEditing">
      <summary>
            make the editing item quit editing status
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeView.FinishEditing(System.Boolean,System.Boolean)">
      <summary>
            make the editing item quit editing status
            </summary>
      <param name="cancel">determines the editing value will be cancelled or not</param>
      <param name="focusElement">determines the editing item will be focused or not after editing</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.FindItem(System.String)">
      <summary>
            Returns the first item that matches exactly with the text used as search parameter
            </summary>
      <param name="text">The text to search for</param>
      <returns>The item that matched the search parameter, null otherwise</returns>
    </member>
    <member name="M:C1.WPF.C1TreeView.GetNode(System.Windows.Point)">
      <summary>
            Gets the nearest C1TreeViewItem to the specified location.
            </summary>
      <param name="position">The location.</param>
      <returns>The nearest C1TreeViewItem.</returns>
    </member>
    <member name="M:C1.WPF.C1TreeView.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.AutoSearchResetDelayProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.AutoSearchResetDelay" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.SelectedItemProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.SelectedItem" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.AllowDragDropProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.AllowDragDrop" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.AutoSearchProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.AutoSearch" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.KeyboardNavigationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.KeyboardNavigation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.SelectionModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.SelectionMode" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.SelectedItemsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.SelectedItems" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.ExpandOnClickProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.ExpandOnClick" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.ExpandModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.ExpandMode" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.ScrollBarStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.ScrollBarStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.AutoScrollModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.AutoScrollMode" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.EditTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.EditTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.LineThicknessProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.LineThickness" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.LineStrokeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.LineStroke" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.ShowLinesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.ShowLines" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.LineDashArrayProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.LineDashArray" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeView.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeView.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TreeView" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TreeView" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1TreeView.DragDropArrowMarker">
      <summary>
            Gets the arrow element used to indicate the drop location.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.DragDropLineMarker">
      <summary>
            Gets the line element used to indicate the drop location.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.Panel">
      <summary>
            Gets the panel associated with this items control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.IsVirtualizing">
      <summary>
             Gets or sets a value indicating whether the node is virtualized.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.DragStart">
      <summary>
            Fires when a drag drop process starts.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.DragOver">
      <summary>
            Fires during a drag drop process, when the cursor moves over a registered drop target.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.DragDrop">
      <summary>
            Fires at the end of a drag drop process, when the user releases the mouse button over a registered drop target.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.SelectionChanged">
      <summary>
            Occurs when the current selection changes.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.SelectionChanging">
      <summary>
             Occurs when the current selection begin to change.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.ItemClick">
      <summary>
            Occurs when a C1TreeViewItem is clicked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.ItemExpanding">
      <summary>
            Occurs when a C1TreeViewItem is expanding.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.ItemExpanded">
      <summary>
            Occurs when a C1TreeViewItem is expanded.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.ItemCollapsing">
      <summary>
            Occurs when a C1TreeViewItem is collapsing.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.ItemCollapsed">
      <summary>
            Occurs when a C1TreeViewItem is collapsed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.AutoSearchBufferChanged">
      <summary>
            Occurs when search text is changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.AutoSearchResetDelay">
      <summary>
            Gets or Sets a value for the delay (in milliseconds) used in the keyboard search.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.SelectedItem">
      <summary>
            Gets the selected item in a <see cref="T:C1.WPF.C1TreeView" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.AllowDragDrop">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.WPF.C1TreeView" /> allows drag-and-drop operations.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.AutoSearch">
      <summary>
            Enables or disables the AutoSearch functionality of the C1TreeView.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.KeyboardNavigation">
      <summary>
            Enables or disables the Keyboard navigation functionality of the C1TreeView.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.SelectionMode">
      <summary>
            Gets or sets the selection behavior for a C1TreeView.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.SelectionModeChanged">
      <summary> 
            Event raised when the <see cref="P:SelectionMode" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.SelectedItems">
      <summary>
            Gets the selected items in a <see cref="T:C1.WPF.C1TreeView" /> (when in Multiple Selection mode).
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.ExpandOnClick">
      <summary>
            Gets or sets a value indicating whether the node is expanded/collapsed when the users clicks in the C1TreeViewItem header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.ExpandMode">
      <summary>
            Gets or sets a value indicating the allowed number of expanded C1TreeViewItems.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.ScrollBarStyle">
      <summary>
            Gets or sets the style used for the inner scrollbar.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.AutoScrollMode">
      <summary>
            Gets or sets a value indicating the auto-scroll mode used by the C1TreeView when navigating to C1treeViewItems that are not (or don´t fit) in the current ViewPort.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.EditTemplate">
      <summary>
            Gets or sets the template used to edit  the contents of the items.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.LineThickness">
      <summary>
            Gets or sets the thickness of the connecting lines.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.LineStroke">
      <summary>
            Gets or sets the brush used to paint the connecting lines.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.ShowLines">
      <summary>
            Gets or sets a value that indicates whether the connecting lines are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.LineDashArray">
      <summary>
            Gets or sets a Collection of System.Double values that indicates the pattern of dashes and gaps that is used to the connecting lines.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.IsFocused">
      <summary>
            Returns true if the control has the focus.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabItem">
      <summary>
            Represents a selectable item in a <see cref="T:C1.WPF.C1TabControl" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnContentChanged(System.Object,System.Object)">
      <summary>
            Called when the value of the <see cref="P:Content" /> property changes.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.HeaderProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.Header" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.HeaderTemplateSelectorProperty">
      <summary>
            Identifies the HeaderTemplateSelector dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.HeaderTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.IsSelectedProperty">
      <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.TabItem.IsSelected" />
            dependency property.
            </summary>
      <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.TabItem.IsSelected" />
            dependency property.
            </value>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnSelected(System.Windows.RoutedEventArgs)">
      <summary>
            Called to indicate that the
            <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> property
            has changed to true.
            </summary>
      <param name="e">
            A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the
            event data.
            </param>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnUnselected(System.Windows.RoutedEventArgs)">
      <summary>
            Called to indicate that the
            <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> property
            has changed to false.
            </summary>
      <param name="e">
            A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the
            event data.
            </param>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
            Provides class handling for the <see cref="E:KeyDown" /> event that occurs when the user presses a key while this control has focus.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Called before the <see cref="E:MouseLeftButtonDown" /> event occurs.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.ChangeVisualStatePinMode(System.Boolean)">
      <summary>
            Updates the current visual state of the PinMode visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.TabShapeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.TabShape" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.CanUserCloseProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.CanUserClose" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.IsSelectableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.IsSelectable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.CanUserPinProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.CanUserPin" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TabItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TabItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1TabItem.Header">
      <summary>
            Gets or sets the item that labels the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.HeaderTemplateSelector">
      <summary>
            Gets or sets a data template selector that provides custom logic for choosing the template used to display the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.HeaderTemplate">
      <summary>
            Gets or sets a data template that is used to display the contents of the control's <see cref="P:C1.WPF.C1TabItem.Header" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.IsSelected">
      <summary>
            Gets or sets a value indicating whether the
            <see cref="T:System.Windows.Controls.TabItem" /> is currently
            selected.
            </summary>
      <value>
            True if the <see cref="T:System.Windows.Controls.TabItem" /> is
            selected; otherwise, false.
            </value>
    </member>
    <member name="P:C1.WPF.C1TabItem.TabShape">
      <summary>
            Gets or sets the visual form of the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.CanUserClose">
      <summary>
            Gets or sets a value indicating whether the user is allowed to dismiss this <see cref="T:C1.WPF.C1TabItem" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.IsSelectable">
      <summary>
            Gets or sets a value indicating whether the user is allowed to select this <see cref="T:C1.WPF.C1TabItem" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.CanUserPin">
      <summary>
            Gets or sets a value indicating whether the user is allowed to pin or unpin this <see cref="T:C1.WPF.C1TabItem" />.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TabItem.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabControl">
      <summary>
            Represents a control that contains multiple items that share the same space on the screen.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="F:C1.WPF.C1TabControl.SelectedItemProperty">
      <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.TabControl.SelectedItem" />
            dependency property.
            </summary>
      <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.TabControl.SelectedItem" />
            dependency property.
            </value>
    </member>
    <member name="F:C1.WPF.C1TabControl.SelectedIndexProperty">
      <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.TabControl.SelectedIndex" />
            dependency property.
            </summary>
      <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.TabControl.SelectedIndex" />
            dependency property.
            </value>
    </member>
    <member name="M:C1.WPF.C1TabControl.ScrollIntoView(System.Object)">
      <summary>
            Causes the object to scroll into view. 
            </summary>
      <param name="item">Object to scroll.</param>
    </member>
    <member name="F:C1.WPF.C1TabControl.SelectedContentProperty">
      <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.TabControl.SelectedContent" />
            dependency property.
            </summary>
      <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.TabControl.SelectedContent" />
            dependency property.
            </value>
    </member>
    <member name="M:C1.WPF.C1TabControl.BeginUpdate">
      <summary>
            Maintains performance while items are added to the TabControl one at a time
            by preventing the control from updating until the <see cref="M:C1.WPF.C1TabControl.EndUpdate" />
            method is called.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.EndUpdate">
      <summary>
            Resumes updating the TabControl after updates are suspended by the
            <see cref="M:C1.WPF.C1TabControl.BeginUpdate" /> method.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Called when the value of the <see cref="P:Items" /> property changes.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.ContentTemplateSelectorProperty">
      <summary>
            Identifies the ContentTemplateSelectorProperty dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.ChangeVisualStateShape(System.Boolean)">
      <summary>
            Updates the current visual state of the Shape visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.ShowSingleTabProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.ShowSingleTab" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripPlacementProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripPlacement" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripOverlapProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripOverlap" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripOverlapDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripOverlapDirection" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabItemShapeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabItemShape" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabItemCloseProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabItemClose" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.ItemContainerStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.ItemContainerStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripMenuVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripMenuVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.CanUserReorderProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.CanUserReorder" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.UpdateSourceCollectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.UpdateSourceCollection" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripHorizontalAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripHorizontalAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripVerticalAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripVerticalAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.ContentTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.ContentTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.UnselectedContentModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.UnselectedContentMode" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TabControl" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TabControl" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1TabControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1TabControl.VisibleItemsChanged">
      <summary>
            Occurs when the the visible items change.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.VisibleItems">
      <summary>
            A read-only collection that contains all visible items in the <see cref="T:C1.WPF.C1TabControl" /></summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.SelectedItem">
      <summary>
            Gets or sets the selected item or returns null if the selection is empty.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.SelectedIndex">
      <summary>
            Gets or sets the index of the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />.
            </summary>
      <value>
            The index of the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />, or -1 if a
            <see cref="T:System.Windows.Controls.TabItem" /> is not selected.
            </value>
    </member>
    <member name="E:C1.WPF.C1TabControl.SelectionChanged">
      <summary>
            Occurs when selection changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.SelectedContent">
      <summary>
            Gets the content of the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />.
            </summary>
      <value>
            The content of the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />. The default is
            null.
            </value>
    </member>
    <member name="E:C1.WPF.C1TabControl.ItemsChanged">
      <summary>
            Called when the value of the System.Windows.Controls.ItemsControl.Items property changes.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TabControl.TabItemClosed">
      <summary>
            Occurs when a <see cref="T:C1.WPF.C1TabItem" /> is closed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TabControl.TabItemClosing">
      <summary>
            Occurs before a <see cref="T:C1.WPF.C1TabItem" /> is closed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.ContentTemplateSelector">
      <summary>
            Gets or sets a custom logic for choosing the template used to display the content of the control
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.ShowSingleTab">
      <summary>
            Gets or sets a value that determines whether the tab strip is shown when the control has only one child.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripPlacement">
      <summary>
            Gets or sets the location of the panel with the tabs relative to the whole control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripOverlap">
      <summary>
            Gets or sets the length of the overlap between <see cref="T:C1.WPF.C1TabItem" />s.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripOverlapDirection">
      <summary>
            Gets or sets the Z-Index arrangement of the <see cref="T:C1.WPF.C1TabItem" />s.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabItemShape">
      <summary>
            Gets or sets the geometric shape of the tabs.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabItemClose">
      <summary>
            Gets or sets the location of the Close button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.ItemContainerStyle">
      <summary>
            Gets or sets the Style applied to all contained <see cref="T:C1.WPF.C1TabItem" />s
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripMenuVisibility">
      <summary>
            Gets or sets the visibility of the menu listing the items.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.CanUserReorder">
      <summary>
            Whether the user is allowed to drag and drop and reorder C1TabItems from this C1TabControl.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.UpdateSourceCollection">
      <summary>
            Gets or sets whether changes in the order of the items are written to Items or ItemsSource.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripHorizontalAlignment">
      <summary>
            Gets or sets the horizontal alignment of the group of <see cref="T:C1.WPF.C1TabItem" />s.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripVerticalAlignment">
      <summary>
            Gets or sets the vertical alignment of the group of <see cref="T:C1.WPF.C1TabItem" />s.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.ContentTemplate">
      <summary>
            Gets or sets the DataTemplate to apply to any TabItem that does not have a ContentTemplate property defined.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.UnselectedContentMode">
      <summary>
            Gets or sets what is done with the content of unselected items.
            </summary>
      <remarks>
            The default is OutsideVisualTree, which removes from the visual tree the content of unselected items. Changing the property to retain the content of unselected items improves performance at the cost of memory.
            </remarks>
    </member>
    <member name="E:C1.WPF.C1TabControl.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Background of the tab strip.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Foreground of the tab strip.
            </summary>
    </member>
    <member name="T:C1.WPF.AutomationPeerFactory">
      <summary>
            This class is for internal use only.
            </summary>
    </member>
    <member name="M:C1.WPF.AutomationPeerFactory.CreateAutomationPeer(System.Object,System.Type)">
      <summary>
            Creates an instance of AutomationPeer class for given C1 control.
            </summary>
      <param name="peerOwner">Owner control.</param>
      <param name="ownerType">Type of the owner control.</param>
      <returns>The automation peer object.</returns>
    </member>
    <member name="M:C1.WPF.AutomationPeerFactory.CreateAutomationPeer(System.Object,System.Type,System.Windows.Controls.Control)">
      <summary>
            Creates an instance of AutomationPeer class for given C1 control.
            </summary>
      <param name="peerOwner">Owner control.</param>
      <param name="ownerType">Type of the owner control.</param>
      <param name="owningSelectorControl">Reference to the owning Selector control. It's required if AutomationPeer is inherited from the SelectorItemAutomationPeer.</param>
      <returns>The automation peer object.</returns>
    </member>
    <member name="T:C1.WPF.C1BrushBuilder">
      <summary>
            Builds a Brush from an Input color a Design brush and a color base extrapolating the design brush.
            </summary>
    </member>
    <member name="M:C1.WPF.C1BrushBuilder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1BrushBuilder" /> class.
            </summary>
    </member>
    <member name="F:C1.WPF.C1BrushBuilder.DesignBrushProperty">
      <summary>
            Original Brush created by a designer, which is typically a degree of colors based in the design color.
            </summary>
    </member>
    <member name="F:C1.WPF.C1BrushBuilder.DesignColorProperty">
      <summary>
            Gets or sets the base color for which the design has been created.
            </summary>
    </member>
    <member name="F:C1.WPF.C1BrushBuilder.InputProperty">
      <summary>
            Gets or sets the input which is the color to what the design brush will be extrapolated.
            </summary>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.DesignBrush">
      <summary>
            Gets or sets the design brush.
            Original Brush created by a designer, which is typically a degree of colors based in the design color.
            </summary>
      <value>The design brush.</value>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.DesignColor">
      <summary>
            Gets or sets the base color for which the design has been created.
            </summary>
      <value>The color of the design.</value>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.Input">
      <summary>
            Gets or sets the input which is the color to what the design brush will be extrapolated.
            </summary>
      <value>The input.</value>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.ExtrapolationMethod">
      <summary>
            Gets or sets the extrapolation method.
            </summary>
      <value>The extrapolation method.</value>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.Output">
      <summary>
            Gets the resulting brush of the extrapolation the design brush to the input color.
            </summary>
      <value>The output.</value>
    </member>
    <member name="E:C1.WPF.C1BrushBuilder.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="T:C1.WPF.BrushBuilderExtrapolationMethod">
      <summary>
            Determines how the extrapolation of colors will be made.
            </summary>
    </member>
    <member name="F:C1.WPF.BrushBuilderExtrapolationMethod.Absolute">
      <summary>
            The extrapolation will be done adding and subtracting the absolute difference of saturation and luminance. 
            </summary>
    </member>
    <member name="T:C1.WPF.C1HslColor">
      <summary>
            Class that allows to increase/decrease lightness
            of the specified color.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HslColor.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1HslColor" /> struct.
            </summary>
      <param name="h">Hue is a value between 0 and 1.</param>
      <param name="s">Saturation is a value between 0 and 1.</param>
      <param name="l">Luminance is a value between 0 and 1.</param>
    </member>
    <member name="M:C1.WPF.C1HslColor.#ctor(System.Byte,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1HslColor" /> struct.
            </summary>
      <param name="a">Alpha channel.</param>
      <param name="h">Hue is a value between 0 and 1.</param>
      <param name="s">Saturation is a value between 0 and 1.</param>
      <param name="l">Luminance is a value between 0 and 1.</param>
    </member>
    <member name="M:C1.WPF.C1HslColor.#ctor(System.Windows.Media.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1HslColor" /> struct.
            </summary>
      <param name="rgbColor">RGB color used to initialize the HSL color.</param>
    </member>
    <member name="P:C1.WPF.C1HslColor.Hue">
      <summary>
            Gets or sets the hue of the color.
            </summary>
      <remarks>
            Hue is a value between 0 and 1.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1HslColor.Saturation">
      <summary>
            Gets or sets the saturation of the color.
            </summary>
      <remarks>
            Saturation is a value between 0 and 1.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1HslColor.Luminance">
      <summary>
            Gets or sets the luminance of the color.
            </summary>
      <remarks>
            Luminance is a value between 0 and 1.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1HslColor.Alpha">
      <summary>
            Gets or sets the alpha channel of the color.
            </summary>
    </member>
    <member name="T:C1.WPF.ClearStyleExtensions">
      <summary>
            Attached properties used to pass brushes to Microsoft controls.
            </summary>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.MouseOverBrushProperty">
      <summary>
            This attached property can modify the mouse over visual style of a clear style control.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetMouseOverBrush(System.Windows.FrameworkElement)">
      <summary>
            Gets the mouse over brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetMouseOverBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>
            Sets the mouse over brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The brush used in the mouse over state.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.PressedBrushProperty">
      <summary>
            This attached property can modify the pressed visual style of a clear style control.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetPressedBrush(System.Windows.FrameworkElement)">
      <summary>
            Gets the pressed brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetPressedBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>
            Sets the pressed brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The brush used in the pressed state.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.FocusBrushProperty">
      <summary>
            This attached property can modify the focus visual style of a clear style control.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetFocusBrush(System.Windows.FrameworkElement)">
      <summary>
            Gets the focus brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetFocusBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>
            Sets the focus brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The brush used in the focus state.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.ButtonBackgroundProperty">
      <summary>
            This attached property can modify background of clear style button.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetButtonBackground(System.Windows.FrameworkElement)">
      <summary>
            Gets the clear style button background brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetButtonBackground(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>
            Sets the clear style button background brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The brush used in the background of clear style button.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.ButtonForegroundProperty">
      <summary>
            This attached property can modify background of clear style button.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetButtonForeground(System.Windows.FrameworkElement)">
      <summary>
            Gets the clear style button foreground brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetButtonForeground(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>
            Sets the clear style button foreground brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The brush used in the foreground of clear style button.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.ButtonCornerRadiusProperty">
      <summary>
            This attached property can modify the corner radius of the buttons of a clear style control.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetButtonCornerRadius(System.Windows.FrameworkElement)">
      <summary>
            Gets the CornerRadius of the buttons.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetButtonCornerRadius(System.Windows.FrameworkElement,System.Windows.CornerRadius)">
      <summary>
            Sets the CornerRadius of the buttons.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The CornerRadius used in borders.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.CaretBrushProperty">
      <summary>
            This attached property can modify the caret visual style of a clear style control.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetCaretBrush(System.Windows.FrameworkElement)">
      <summary>
            Gets the caret brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetCaretBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>
            Sets the caret brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The brush used in the caret state.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.CornerRadiusProperty">
      <summary>
            This attached property can modify the focus visual style of a clear style control.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetCornerRadius(System.Windows.FrameworkElement)">
      <summary>
            Gets the CornerRadius.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetCornerRadius(System.Windows.FrameworkElement,System.Windows.CornerRadius)">
      <summary>
            Sets the CornerRadius.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The CornerRadius used in borders.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.ScrollBarStyleProperty">
      <summary>
            This attached property can modify the style of a scrollbar.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetScrollBarStyle(System.Windows.FrameworkElement)">
      <summary>
            Gets the style of a scrollbar.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetScrollBarStyle(System.Windows.FrameworkElement,System.Windows.Style)">
      <summary>
            Sets the style of a scrollbar.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The style used in scrollbars.</param>
    </member>
    <member name="T:C1.WPF.ColorConverter">
      <summary>
            Converts between Colors and Brushes.
            </summary>
    </member>
    <member name="T:C1.WPF.C1EditableContentControl">
      <summary>
            ContenControl that supports edit mode using a TextBox.
            </summary>
      <summary>
            ContenControl that supports edit mode.
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnContentChanged(System.Object,System.Object)">
      <summary>
            Called when the value of the <see cref="P:Content" /> property changes.
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnIsEditableChanged(System.Boolean)">
      <summary>
            The IsEditable value has changed.
            </summary>
      <param name="oldValue">Old IsEditable value</param>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnIsInEditModeChanged(System.Boolean)">
      <summary>
            The control has changed the mode.
            </summary>
      <param name="oldValue">Old IsInEditMode value</param>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnEditCompleted">
      <summary>
            Fires the <see cref="E:C1.Silverlight.C1EditableContentControl.EditCompleted" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnEditCanceled">
      <summary>
            Fires the <see cref="E:C1.Silverlight.C1EditableContentControl.EditCanceled" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnEditStarted">
      <summary>
            Fires the <see cref="E:C1.Silverlight.C1EditableContentControl.EditStarted" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.ShouldEnterEditModeOnKeyDown(System.Windows.Input.Key)">
      <summary>
            Called to define if the control has to enter edit mode when a particular key is pressed.
            For example: arrow keys might not change to edit mode.
            </summary>
      <param name="key">Key that was pressed.</param>
      <returns>True if the control has enter edit mode.</returns>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.UpdateVisualState">
      <summary>
            Update the visual state of this control
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.IsEditableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1EditableContentControl.IsEditable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.IsInEditModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1EditableContentControl.IsInEditMode" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.EditControlProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1EditableContentControl.EditControl" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.ContentControlProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1EditableContentControl.ContentControl" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.ContentConverterProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1EditableContentControl.ContentConverter" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1EditableContentControl.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1EditableContentControl" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1EditableContentControl" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1EditableContentControl.EditCompleted">
      <summary>
            Fired when the user has completed the edits.
            </summary>
    </member>
    <member name="E:C1.WPF.C1EditableContentControl.EditCanceled">
      <summary>
            Fired when the user exits edit mode without changes.
            </summary>
    </member>
    <member name="E:C1.WPF.C1EditableContentControl.EditStarted">
      <summary>
            Fired when the control enters edit mode.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.IsDirty">
      <summary>
            Get or sets whether the element was edited during edit mode.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.IsEditable">
      <summary>
            Gets/set if the control can be edited.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.IsInEditMode">
      <summary>
            Gets/sets when the control enters in edit mode.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.EditControl">
      <summary>
            Control visible when it is in edit mode.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.ContentControl">
      <summary>
            Control visible when it is not in edit mode.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.ContentConverter">
      <summary>
            Used to create the control content from the edited content.
            </summary>
    </member>
    <member name="E:C1.WPF.C1EditableContentControl.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="T:C1.WPF.C1FilePicker">
      <summary>
            File picker that opens a dialog box control to allows you to select one or more files. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.OnSelectedFilesChanged(System.EventArgs)">
      <summary>
            Raises the SelectedFilesChanged event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.C1FilePicker.OpenRead">
      <summary>
            Opens the selected file for reading.
            </summary>
      <remarks>
            In WPF partial trust it is not possible to access <see cref="P:C1.WPF.C1FilePicker.SelectedFile" />, but
            this method still works.
            </remarks>
      <returns>The stream of the selected file.</returns>
    </member>
    <member name="M:C1.WPF.C1FilePicker.ClearSelection">
      <summary>
            Removes the selected files.
            </summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.RaisePropertyChanged(System.String)">
      <summary>
            Raises the property changed event.
            </summary>
      <param name="propertyName">Name of the property that changed.</param>
    </member>
    <member name="M:C1.WPF.C1FilePicker.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.TextAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.TextAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.WatermarkProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.Watermark" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.BrowseContentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.BrowseContent" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.MultiselectProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.Multiselect" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.FilterProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.Filter" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.FilterIndexProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.FilterIndex" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.SelectedFileProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.SelectedFile" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.SelectedFilesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.SelectedFiles" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.InitialDirectoryProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.InitialDirectory" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.SelectionBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.SelectionBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.SelectionForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.SelectionForeground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.ButtonBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.ButtonBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.ButtonForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.ButtonForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1FilePicker" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1FilePicker" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1FilePicker.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1FilePicker.SelectedFilesChanged">
      <summary>
            Fires when the <see cref="P:C1.WPF.C1FilePicker.SelectedFiles" /> property changes.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.SelectedFileName">
      <summary>
            Gets the name of the selected file.
            </summary>
      <remarks>
            In WPF partial trust it is not possible to access <see cref="P:C1.WPF.C1FilePicker.SelectedFile" />, but
            this property still works.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1FilePicker.HasSelectedFiles">
      <summary>
            True, if files were selected.
            </summary>
    </member>
    <member name="E:C1.WPF.C1FilePicker.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.TextAlignment">
      <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.WPF.C1FilePicker" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.IsFocused">
      <summary>
            Gets true if the control is focused, otherwise false.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.Watermark">
      <summary>
            Gets or sets the watermark content.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.BrowseContent">
      <summary>
            Gets or sets the content of the Browse button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.Multiselect">
      <summary>
            Gets or sets whether it is possible to select more than one file.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.Filter">
      <summary>
            Gets or sets the filter that will be applied to the <see cref="T:System.Windows.Controls.OpenFileDialog" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.FilterIndex">
      <summary>
            Gets or sets the filter index that will be applied to the <see cref="T:System.Windows.Controls.OpenFileDialog" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.SelectedFile">
      <summary>
            Gets or sets the file displayed in this editor.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.SelectedFiles">
      <summary>
            Gets or sets the files displayed in this editor.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.InitialDirectory">
      <summary>
            Gets or sets the initial directory that is displayed by a file dialog.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="E:C1.WPF.C1FilePicker.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.ButtonBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Background of the buttons inside the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.ButtonForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Foreground of the buttons inside the control.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TextEditableContentControl">
      <summary>
            Dual control that provides a <see cref="T:System.Windows.Controls.TextBox" /> on edit mode, and a <see cref="T:System.Windows.Controls.ContentControl" /> on readonly mode.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextEditableContentControl.ChangeVisualStateWatermark(System.Boolean)">
      <summary>
            Updates the current visual state of the Watermark visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.TextAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.TextAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.WatermarkProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.Watermark" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.IsWatermarkedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.IsWatermarked" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.SelectionBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.SelectionBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.SelectionForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.SelectionForeground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.CaretBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.CaretBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextEditableContentControl.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TextEditableContentControl" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextEditableContentControl.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TextEditableContentControl" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.C1TextEditableContentControl.ValidateInput">
      <summary>
            Event fired when the editing is completed.
            Handle this event to validate the new input.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TextEditableContentControl.TextBoxKeyDown">
      <summary>
            Event fired when a key is pressed in the EditableTextBox.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TextEditableContentControl.TextBoxKeyUp">
      <summary>
            Event fired when a key is released in the EditableTextBox.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TextEditableContentControl.TextEdited">
      <summary>
            Event fired to do when the text is edited in the EditableTextBox.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.EditTextBox">
      <summary>
        <see cref="T:C1.Silverlight.C1TextBoxBase" /> used during the edit mode.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.TextAlignment">
      <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.WPF.C1TextEditableContentControl" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.Watermark">
      <summary>
            Gets or sets the watermark content displayed when the control is empty.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.IsWatermarked">
      <summary>
            Get or sets if the watermark is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.CaretBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> of the blinking cursor of an input control.  When .NET Framework is v3.5, 'CaretBrush' takes no effect.
            </summary>
    </member>
    <member name="T:C1.WPF.ValidateInputEventArgs">
      <summary>
            Arguments for the event fired to validate the input.
            </summary>
    </member>
    <member name="P:C1.WPF.ValidateInputEventArgs.Input">
      <summary>
            New text input
            </summary>
    </member>
    <member name="P:C1.WPF.ValidateInputEventArgs.IsValidInput">
      <summary>
            Set this flag to undo the edits if the input is not valid.
            </summary>
    </member>
    <member name="T:C1.WPF.ISpellChecker">
      <summary>
            Provides spell checking services.
            </summary>
      <remarks>
            This interface is implemented by C1SpellChecker in the C1.Silverlight.SpellChecker assembly.
            </remarks>
    </member>
    <member name="M:C1.WPF.ISpellChecker.CheckText(System.String)">
      <summary>
            Checks a string containing text and returns a list of spelling errors.
            </summary>
      <param name="text">Text to be spell-checked.</param>
      <returns>List of <see cref="T:C1.WPF.ICharRange" /> objects that describe the spelling mistakes.</returns>
    </member>
    <member name="M:C1.WPF.ISpellChecker.GetSuggestions(System.String,System.Int32)">
      <summary>
            Gets a list of suggestions for a misspelled word.
            </summary>
      <param name="word">Word to suggest alternatives for.</param>
      <param name="maxSuggestions">Maximum number of suggestions to provide.</param>
      <returns>A list of suggestions for the <paramref name="word" /> parameter.</returns>
    </member>
    <member name="M:C1.WPF.ISpellChecker.ShowSuggestionsMenu(System.Object,System.Windows.Point,System.String,System.Action{System.String})">
      <summary>
            Shows a context menu with suggestions for a misspelled word.
            </summary>
      <param name="editor">The editor control whose content is being spell checked.</param>
      <param name="position">The position in absolute plug-in coordinates where the menu should be open.</param>
      <param name="word">The misspelled word.</param>
      <param name="correctCallback">Callback called when a suggested correction is chosen.</param>
    </member>
    <member name="M:C1.WPF.ISpellChecker.CheckControlAsync(System.Object)">
      <summary>
            Shows a spell-checking dialog for an editor control.
            </summary>
      <param name="editor">Object that contains the text to be spell-checked.</param>
    </member>
    <member name="P:C1.WPF.ISpellChecker.IgnoreList">
      <summary>
            Gets the list of words to ignore during spell-checking.
            </summary>
    </member>
    <member name="P:C1.WPF.ISpellChecker.UserDictionary">
      <summary>
            Gets the user dictionary used for spell-checking.
            </summary>
    </member>
    <member name="P:C1.WPF.ISpellChecker.Enabled">
      <summary>
            Gets a value that indicates whether the main spelling dictionary has been loaded.
            </summary>
    </member>
    <member name="E:C1.WPF.ISpellChecker.DictionaryChanged">
      <summary>
            Event that fires when any of the spell dictionaries changes in any way.
            </summary>
      <remarks>
            This event notifies listeners that the spell dictionaries have changed and
            the text should be re-checked. It fires for example when words are added to the 
            user dictionary or when new dictionaries are loaded. 
            </remarks>
    </member>
    <member name="T:C1.WPF.ICharRange">
      <summary>
            Represents a character range within a string.
            This is used by <see cref="T:C1.WPF.ISpellChecker" /> to represent the
            spelling mistakes found in text.
            </summary>
    </member>
    <member name="P:C1.WPF.ICharRange.Start">
      <summary>
            Gets the index of the start of the range.
            </summary>
    </member>
    <member name="P:C1.WPF.ICharRange.Length">
      <summary>
            Gets the length of the range.
            </summary>
    </member>
    <member name="T:C1.WPF.TextEditedEventArgs">
      <summary>
            AutoComplete event details.
            </summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.LastKey">
      <summary>
            Gets or sets the last key.
            </summary>
      <value>The last key.</value>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.CurrentText">
      <summary>
            Current text.
            </summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.CurrentSelectionStart">
      <summary>
            Current selection start.
            </summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.NewText">
      <summary>
            Text that will be put in the control after the AutoComplete.
            </summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.NewSelectionStart">
      <summary>
            Index where the selection will start after the AutoComplete.
            </summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.Cancel">
      <summary>
            Cancel the input of the new text.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DragHelper">
      <summary>
            Cross-platform helper for listening to drag gestures supporting inertia.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DragHelper.#ctor(System.Windows.UIElement,C1.WPF.C1DragHelperMode,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:C1.WPF.C1DragHelper" />.
            </summary>
      <param name="element">An <see cref="T:System.Windows.UIElement" /> on which the drag gesture will be listened.</param>
      <param name="mode">Indicates the sort of drag to be listened. Combine inertia flag with other flags so that DragDelta events are raised after the manipulation finish. i.e. C1DragHelperMode.FreeDrag | C1DragHelperMode.Inertia</param>
      <param name="initialThreshold">Specifies the number of pixels the gesture will have to pass in order to start. if 0 is set the gesture will start on pointer down, and captureElementOnPointerPressed will be true despite the specified parameter, otherwise the gesture will start on mouse move, default value is 1</param>
      <param name="captureElementOnPointerPressed">Indicates whether the element will be captured in pointer pressed event (MouseLeftButtonDown in SL and WPF and PointerPressed in WinRT) or in the first pointer move event (MouseMove in SL and WPF and PointerMoved in WinRT). If initialThreshold is 0 this parameter will be ignored.<remarks>Capturing the element on mouse down will cause Click, DoubleClick and MouseLeftButtonUp events not to be fired in sub-elements (nested elements in the visual tree), whereas capturing the element on the first mouse move can make it difficult for final users to drag small elements quickly.</remarks></param>
      <param name="handledEventsToo">Indicates whether drag gestures will be listened despite mouse events were already handled. (It only applies to mouse gestures)</param>
      <param name="useManipulationEvents">When set to true it uses Manipulation events to listen to the gesture, otherwise itwill use Pointer events.</param>
      <param name="useRightButton">if set to <c>true</c> it will listen to mouse right button down/up events instead of left button events(In WinRT it only applies if useManipulationEvents is set to false).</param>
    </member>
    <member name="M:C1.WPF.C1DragHelper.FinalizeDrag">
      <summary>
            Detaches all the events handlers and releases captured element.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DragHelper.FinalizeHelper">
      <summary>
            Detaches all the events handlers and releases captured element.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DragHelper.Complete">
      <summary>
            Finalizes drag gesture.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DragHelper.DragStarting">
      <summary>
            Occurs when a drag gesture is about to start.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DragHelper.DragStarted">
      <summary>
            Occurs when a drag gesture started.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DragHelper.DragDelta">
      <summary>
            Occurs while a drag gesture is performed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DragHelper.DragCompleted">
      <summary>
            Occurs after a drag gesture completed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DragHelper.DragInertiaStarted">
      <summary>
            Occurs when the inertia is about to start.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DragEventArgs">
      <summary>
            Contains information of the drag events.
            </summary>
    </member>
    <member name="T:C1.WPF.C1InputEventArgs">
      <summary>
            Contains information of the drag events.
            </summary>
    </member>
    <member name="M:C1.WPF.C1InputEventArgs.GetPosition(System.Windows.UIElement)">
      <summary>
            Gets the position of the pointer performing the drag gesture relatively to the specified element.
            </summary>
      <param name="relativeTo">Any UIElement-derived object that is connected to the same object tree. To specify the object relative to the overall coordinate system, use a relativeTo value of null.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1InputEventArgs.GetPosition(System.Windows.RoutedEventArgs,System.Windows.UIElement)">
      <summary>
            Gets the position of the pointer or finger.
            </summary>
      <param name="args">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the manipulation data.</param>
      <param name="relativeTo">Any UIElement-derived object that is connected to the same object tree. To specify the object relative to the overall coordinate system, use a relativeTo value of null.</param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.C1InputEventArgs.OriginalEventArgs">
      <summary>
            Gets the arguments of the original event which raised this event.
            </summary>
    </member>
    <member name="P:C1.WPF.C1InputEventArgs.Handled">
      <summary>
            Gets or sets a value that marks the routed event as handled. Setting to true
            prevents most handlers along the event route from handling the same event again.
            </summary>
    </member>
    <member name="P:C1.WPF.C1InputEventArgs.OriginalSource">
      <summary>
            Gets a reference to the object that raised the event.
            </summary>
    </member>
    <member name="P:C1.WPF.C1InputEventArgs.PointerDeviceType">
      <summary>
            Gets the type of pointer which performed the action.
            </summary>
      <remarks>
            In Silverlight, 'windowless' plug-in parameter must be set to false in order 
            to receive the correct device type, otherwise 'Mouse' will be returned 
            despite the real device type.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1DragEventArgs.DragHelper">
      <summary>
            Gets a reference to the <see cref="T:C1.WPF.C1DragHelper" /> that originated the event.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DragStartingEventArgs">
      <summary>
            Contains information of the DragStarting event.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragStartingEventArgs.Mode">
      <summary>
            Gets or sets the mode indicating the sort of drag to be listened.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragStartingEventArgs.CaptureElementOnPointerPressed">
      <summary>
            Gets or sets a value indicating whether the element will be captured in pointer pressed event (MouseLeftButtonDown in SL and WPF and PointerPressed in WinRT) or in the first pointer move event (MouseMove in SL and WPF and PointerMoved in WinRT).<remarks>Capturing the element on mouse down will cause Click, DoubleClick and MouseLeftButtonUp events not to be fired in sub-elements (nested elements in the visual tree), whereas capturing the element on the first mouse move can make it difficult for final users to drag small elements quickly.</remarks></summary>
    </member>
    <member name="P:C1.WPF.C1DragStartingEventArgs.InitialThreshold">
      <summary>
            Gets or sets the number of pixels the gesture will have to pass in order to start.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragStartingEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the recognizion of this gesture is canceled.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DragStartedEventArgs">
      <summary>
            Contains information of the DragStarted event.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragStartedEventArgs.Origin">
      <summary>
            Gets the absolute point where the gesture started.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DragDeltaEventArgs">
      <summary>
            Contains information of the DragDelta event.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DragDeltaEventArgs.Complete">
      <summary>
            Completes the manipulation without inertia.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragDeltaEventArgs.DeltaTranslation">
      <summary>
            Gets the delta translation.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragDeltaEventArgs.CumulativeTranslation">
      <summary>
            Gets the accumulated translation.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragDeltaEventArgs.IsInertial">
      <summary>
            Gets a value indicating whether this event is raised because of a direct manipulation or is inertial.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DragInertiaStartedEventArgs">
      <summary>
            Contains information of the DragInertiaStarted event.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragInertiaStartedEventArgs.Velocity">
      <summary>
            Gets the velocity of the gesture before the inertia started.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragInertiaStartedEventArgs.DesiredDeceleration">
      <summary>
            Gets or sets the deceleration of the drag inertia (pixels by millisecond)
            </summary>
    </member>
    <member name="T:C1.WPF.C1DragCompletedEventArgs">
      <summary>
            Contains information of the DragCompleted event.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragCompletedEventArgs.CumulativeTranslation">
      <summary>
            Gets the accumulated translation.
            </summary>
    </member>
    <member name="T:C1.WPF.C1PointerDeviceType">
      <summary>
            Enumerates the different kind of devices which can perform drag operations.
            </summary>
    </member>
    <member name="F:C1.WPF.C1PointerDeviceType.Mouse">
      <summary>
            Mouse device
            </summary>
    </member>
    <member name="F:C1.WPF.C1PointerDeviceType.Touch">
      <summary>
            Touch screen
            </summary>
    </member>
    <member name="F:C1.WPF.C1PointerDeviceType.Pen">
      <summary>
            Pen device
            </summary>
    </member>
    <member name="T:C1.WPF.C1DragHelperMode">
      <summary>
            Determines the kind of drag gesture that will be listened.
            </summary>
    </member>
    <member name="F:C1.WPF.C1DragHelperMode.TranslateX">
      <summary>
            The drag will be performed only considering x coordinates.
            </summary>
    </member>
    <member name="F:C1.WPF.C1DragHelperMode.TranslateY">
      <summary>
            The drag will be performed only considering y coordinates.
            </summary>
    </member>
    <member name="F:C1.WPF.C1DragHelperMode.TranslateXY">
      <summary>
            Both x and y coordinates will be considered in the gesture.
            </summary>
    </member>
    <member name="F:C1.WPF.C1DragHelperMode.Inertia">
      <summary>
            Apply inertia when drag finish.
            </summary>
    </member>
    <member name="F:C1.WPF.C1DragHelperMode.TranslateRailX">
      <summary>
            The drag will be performed in the x coordinates if it starts in this direction.
            </summary>
    </member>
    <member name="F:C1.WPF.C1DragHelperMode.TranslateRailY">
      <summary>
            The drag will be performed in the y coordinates if it starts in this direction.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ScrollHelper">
      <summary>
            Cross-platform helper for listening to scroll gestures using mouse wheel.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollHelper.#ctor(System.Windows.UIElement,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:C1.WPF.C1ScrollHelper" />.
            </summary>
      <param name="element">An <see cref="T:System.Windows.UIElement" /> on which the zoom gesture will be listened.</param>
      <param name="avoidIfCtrlPressed">Sets whether is required to press Ctrl key in order to start the gesture.</param>
      <param name="continuousScroll">If set to true it will raise intermediate events to perform a continuous scroll, otherwise the events will be raised from native mouse wheel events.</param>
      <param name="handleMouseWheel">Sets whether Handled property of mouse wheel events will be set to true.</param>
    </member>
    <member name="M:C1.WPF.C1ScrollHelper.FinalizeScroll">
      <summary>
            Detaches all the events handlers.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollHelper.FinalizeHelper">
      <summary>
            Detaches all the events handlers.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ScrollHelper.ScrollStarted">
      <summary>
            Occurs when a scroll gesture started.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ScrollHelper.ScrollDelta">
      <summary>
            Occurs while a scroll gesture is performed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ScrollHelper.ScrollCompleted">
      <summary>
            Occurs after a scroll gesture completed.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ScrollEventArgs">
      <summary>
            Contains information of the scroll events.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ScrollStartedEventArgs">
      <summary>
            Contains information of the ScrollStarted event.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ScrollDeltaEventArgs">
      <summary>
            Contains information of the ScrollDelta event.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollDeltaEventArgs.Complete">
      <summary>
            Completes the manipulation without inertia.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollDeltaEventArgs.DeltaScroll">
      <summary>
            Gets the delta scroll.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollDeltaEventArgs.CumulativeScroll">
      <summary>
            Gets the accumulated scroll.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ScrollCompletedEventArgs">
      <summary>
            Contains information of the ScrollCompleted event.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollCompletedEventArgs.CumulativeScroll">
      <summary>
            Gets the accumulated scroll.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TapHelper">
      <summary>
            Cross-platform helper for listening to tapped and double-tapped events.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TapHelper.#ctor(System.Windows.UIElement,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1TapHelper" /> class.
            </summary>
      <param name="element">An <see cref="T:System.Windows.UIElement" /> on which the tap gestures will be listened.</param>
      <param name="handledEventsToo">Indicates whether tap gestures will be listened despite mouse events were already handled. (It only applies to mouse gestures)</param>
    </member>
    <member name="M:C1.WPF.C1TapHelper.FinalizeHelper">
      <summary>
            Detaches all the events handlers.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TapHelper.Tapped">
      <summary>
            Occurs when the element is tapped (clicked if performed with the mouse).
            </summary>
    </member>
    <member name="E:C1.WPF.C1TapHelper.DoubleTapped">
      <summary>
            Occurs when the element is double-tapped (double-clicked if performed with the mouse).
            </summary>
    </member>
    <member name="E:C1.WPF.C1TapHelper.RightTapped">
      <summary>
            Occurs when the element is tapped with right mouse button.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TapHelper.Holding">
      <summary>
            Occurs when a Hold gesture is performed over the element.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TappedEventArgs">
      <summary>
            Contains information of the tap events.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TappedEventArgs.#ctor(System.Windows.RoutedEventArgs,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1TappedEventArgs" /> class.
            </summary>
      <param name="originalArgs">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
      <param name="isRightTapped">if set to <c>true</c> the event was performed with the right button of the mouse.</param>
    </member>
    <member name="P:C1.WPF.C1TappedEventArgs.IsRightTapped">
      <summary>
            Gets a value indicating whether the event is performed with the right button of the mouse.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ZoomHelper">
      <summary>
            Cross-platform helper for listening to zoom gestures either using the mouse or fingers.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ZoomHelper.#ctor(System.Windows.UIElement,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:C1.WPF.C1ZoomHelper" />.
            </summary>
      <param name="element">An <see cref="T:System.Windows.UIElement" /> on which the zoom gesture will be listened.</param>
      <param name="ctrlRequired">Sets whether is required to press Ctrl key in order to start the gesture.</param>
      <param name="continuousZoom">If set to true it will raise intermediate events to perform a continuous zoom, otherwise the events will be raised from native mouse wheel events.</param>
      <param name="handleMouseWheel">Sets whether Handled property of mouse wheel events will be set to true.</param>
    </member>
    <member name="M:C1.WPF.C1ZoomHelper.FinalizeZoom">
      <summary>
            Detaches all the events handlers.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ZoomHelper.FinalizeHelper">
      <summary>
            Detaches all the events handlers.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ZoomHelper.ZoomStarted">
      <summary>
            Occurs when a zoom gesture started.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ZoomHelper.ZoomDelta">
      <summary>
            Occurs while a zoom gesture is performed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ZoomHelper.ZoomCompleted">
      <summary>
            Occurs after a zoom gesture completed.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ZoomEventArgs">
      <summary>
            Contains information of the zoom events.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ZoomStartedEventArgs">
      <summary>
            Contains information of the ZoomStarted event.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ZoomDeltaEventArgs">
      <summary>
            Contains information of the ZoomDelta event.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ZoomDeltaEventArgs.Complete">
      <summary>
            Completes the manipulation without inertia.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomDeltaEventArgs.DeltaScale">
      <summary>
            Gets the delta scale.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomDeltaEventArgs.CumulativeScale">
      <summary>
            Gets the accumulated scale.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomDeltaEventArgs.UniformDeltaScale">
      <summary>
            Gets the uniform delta scale.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomDeltaEventArgs.UniformCumulativeScale">
      <summary>
            Gets the uniform cumulative scale.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomDeltaEventArgs.DeltaTranslation">
      <summary>
            Gets the delta translation.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomDeltaEventArgs.CumulativeTranslation">
      <summary>
            Gets the accumulated translation.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ZoomCompletedEventArgs">
      <summary>
            Contains information of the ZoomCompleted event.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomCompletedEventArgs.CumulativeScale">
      <summary>
            Gets the accumulated scale.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomCompletedEventArgs.UniformCumulativeScale">
      <summary>
            Gets the uniform cumulative scale.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomCompletedEventArgs.CumulativeTranslation">
      <summary>
            Gets the accumulated translation.
            </summary>
    </member>
    <member name="T:C1.WPF.IC1ContextMenu">
      <summary>
            Defines the context menu interface.
            </summary>
    </member>
    <member name="M:C1.WPF.IC1ContextMenu.Show(System.Windows.FrameworkElement,System.Windows.Point)">
      <summary>
            Displays the context menu at the specified position. 
            </summary>
      <param name="placementTarget">Specifies the control to which the context menu
            is associated.</param>
      <param name="offset">The offset coordinates where the context menu will be displayed.
            These coordinates are relative to the control specified in the control parameter.</param>
    </member>
    <member name="P:C1.WPF.IC1ContextMenu.PlacementTarget">
      <summary>
            Gets or sets the FrameworkElement relative to which the context menu is positioned when it opens. 
            </summary>
    </member>
    <member name="T:C1.WPF.C1ContextMenuService">
      <summary>
            Represents a service that provides static methods to display a context menu. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ContextMenuService.GetContextMenu(System.Windows.DependencyObject)">
      <summary>
            Gets the context menu for a control.
            </summary>
      <param name="element">The control from which the context menu is retrieved.</param>
      <returns>The control's context menu.</returns>
    </member>
    <member name="M:C1.WPF.C1ContextMenuService.SetContextMenu(System.Windows.DependencyObject,C1.WPF.IC1ContextMenu)">
      <summary>
            Sets the context menu for a control.
            </summary>
      <param name="element">The Control to which the context menu is attached.</param>
      <param name="value">The context menu to set.</param>
    </member>
    <member name="F:C1.WPF.C1ContextMenuService.ContextMenuProperty">
      <summary>
            Identifies the ContextMenu dependency property. 
            </summary>
    </member>
    <member name="T:C1.WPF.ItemPreparedEventArgs">
      <summary>
            Contains event data for the item prepared/cleared event.
            The event is associated to the PrepareContainerForItemOverride and ClearContainerForItemOverride
            methods of classes derived from C1HierarchicalPresenter. PrepareContainerForItemOverride and
            ClearContainerForItemOverride are invoked to prepare/clear a visual element to display the 
            specified data bound item.
            </summary>
    </member>
    <member name="P:C1.WPF.ItemPreparedEventArgs.Element">
      <summary>
            The element used to display the specified item.
            </summary>
    </member>
    <member name="P:C1.WPF.ItemPreparedEventArgs.Item">
      <summary>
            The item to display.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ItemsControl">
      <summary>
            Represents a control that can be used to present a collection of items.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ItemsControl.ItemStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ItemsControl.ItemStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ItemsControl.ItemTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ItemsControl.ItemTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ItemsControl.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ItemsControl" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ItemsControl.ItemStyle">
      <summary>
            Style applied to all the items of this item control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ItemsControl.ItemTemplate">
      <summary>
            Template applied to all the items of the list.
            </summary>
    </member>
    <member name="T:C1.WPF.C1HeaderedItemsControl">
      <summary>
            Represents a control that can be used to present a collection of items which have header and content.
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedItemsControl.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedItemsControl.HeaderTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedItemsControl.HeaderTemplateSelectorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedItemsControl.HeaderTemplateSelector" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1HeaderedItemsControl.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1HeaderedItemsControl" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedItemsControl.HeaderTemplate">
      <summary>
            Template applied to the headers of all the items of the list.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedItemsControl.HeaderTemplateSelector">
      <summary>
            Template selector used to specify different templates applied to the headers of the items.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ListBox">
      <summary>
            List of items which can be used with heavy templates and preview template to scroll quickly.
            </summary>
      <remarks>
            This contol supports selection by cross-slide gesture.
            </remarks>
    </member>
    <member name="T:C1.WPF.C1ListViewer">
      <summary>
            List of items which can be used with heavy templates and preview template to scroll quickly.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewer.InitializeScrollViewerPart">
      <summary>
            Initializes the scroll viewer part.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewer.InitializePanel">
      <summary>
            Initializes the panel the first time it is loaded.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewer.GetIndexAt(System.Windows.Point)">
      <summary>
            Gets the index of the item at the specified position in the screen.
            </summary>
      <param name="screenPoint">The point in the screen relative to this control.</param>
      <returns>The index of the item, otherwise -1</returns>
    </member>
    <member name="M:C1.WPF.C1ListViewer.ScrollToVerticalOffset(System.Double)">
      <summary>
            Scrolls the content to the specified vertical offset position.
            </summary>
      <param name="offset">The target vertical offset position.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.ScrollToHorizontalOffset(System.Double)">
      <summary>
            Scrolls the content to the specified horizontal offset position.
            </summary>
      <param name="offset">The target horizontal offset position.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.IsItemItsOwnContainerOverride(System.Object)">
      <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
      <param name="item">The item to check.</param>
      <returns>
            true if the item is (or is eligible to be) its own container; otherwise, false.
            </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewer.GetContainerForItemOverride">
      <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
      <returns>
            The element that is used to display the given item.
            </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewer.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
            Prepares the specified element to display the specified item.
            </summary>
      <param name="element">The element used to display the specified item.</param>
      <param name="item">The item to display.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
            Undoes the effects of the <see cref="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)" /> method.
            </summary>
      <param name="element">The container element.</param>
      <param name="item">The item.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.OnItemTapped(System.Object,C1.WPF.C1TappedEventArgs)">
      <summary>
            Called when one of the items is tapped.
            </summary>
      <param name="sender">The item that was tapped.</param>
      <param name="e">The <see cref="T:C1.WPF.C1TappedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.OnItemHolding(System.Object,C1.WPF.C1TappedEventArgs)">
      <summary>
            Called when one of the items receive the Hold event.
            </summary>
      <param name="sender">The item that receive the hold event.</param>
      <param name="e">The <see cref="T:C1.WPF.C1TappedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.BringIntoView(System.Windows.Rect,System.Boolean,System.Action)">
      <summary>
            Brings the into view the specified rectangle area.
            </summary>
      <param name="area">The area which will be brought into view.</param>
      <param name="changeZoomIfNecessary">If true, the zoom will be changed so that the whole area is visible.</param>
      <param name="completed">The action to be called after the operation is completed.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.BringIndexIntoView(System.Int32,System.Windows.Rect,System.Boolean,System.Action)">
      <summary>
            Brings the specified index into view.
            </summary>
      <param name="index">The index of the to bring into view.</param>
      <param name="subOffset">A sub area inside the item which can be used to scroll to a more specific point.</param>
      <param name="changeZoomIfNecessary">If true, the zoom will be changed so that the whole area is visible.</param>
      <param name="completed">Action called when the the animation completed.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.ZoomAnimation(System.Double,System.Windows.Point,System.Action)">
      <summary>
            Call a zooms animation.
            </summary>
      <param name="targetZoom">The target zoom.</param>
      <param name="screenPoint">A screen point where the animation is anchored.</param>
      <param name="completed">Action called when the the animation completed.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.RaisePropertyChanged(System.String)">
      <summary>
            Raises the property changed event.
            </summary>
      <param name="propertyName">Name of the property which changed.</param>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ItemWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.ItemWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ItemHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.ItemHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.PreviewItemTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.PreviewItemTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.RefreshWhileScrollingProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.RefreshWhileScrolling" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ViewportGapProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.ViewportGap" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ViewportPreviewGapProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.ViewportPreviewGap" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ZoomProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.Zoom" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.MinZoomProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.MinZoom" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.MaxZoomProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.MaxZoom" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ZoomModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.ZoomMode" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.VerticalScrollBarVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.VerticalScrollBarVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.HorizontalScrollBarVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.HorizontalScrollBarVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ButtonBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.ButtonBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ButtonForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.ButtonForeground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.IsSwipeEnabledProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewer.IsSwipeEnabled" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewer.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ListViewer" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewer.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ListViewer" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ListViewer.Panel">
      <summary>
            Gets the panel associated with this items control.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.VerticalOffsetChanged">
      <summary>
            Occurs when the vertical offset changed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.HorizontalOffsetChanged">
      <summary>
            Occurs when horizontal offset changed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.ZoomChanged">
      <summary>
            Occurs when the zoom changed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.ItemContainerLoaded">
      <summary>
            Occurs afer an item container was loaded.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.ItemContainerUnloading">
      <summary>
            Occurs before an item container was unloaded.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.ItemClick">
      <summary>
            Occurs when an item is clicked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.ItemTapped">
      <summary>
            Occurs when an item is tapped.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.ItemHolding">
      <summary>
            Occurs when an item held.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.IsScrolling">
      <summary>
            Gets a value indicating whether the list is scrolling.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ScrollViewer">
      <summary>
            Gets the scroll viewer template part belonging to this items control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ActualZoom">
      <summary>
            Gets the actual zoom.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ActualMinZoom">
      <summary>
            Gets the actual minimum zoom.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ActualMaxZoom">
      <summary>
            Gets the actual maximum zoom.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.IsZooming">
      <summary>
            Gets a value indicating whether this list is zooming.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ItemWidth">
      <summary>
            Gets or sets the width of each item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ItemHeight">
      <summary>
            Gets or sets the height of each item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.PreviewItemTemplate">
      <summary>
            Gets or sets the template used for previewing an item.
            </summary>
      <remarks>
            The use of preview item is due to performance reasons. 
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ListViewer.Orientation">
      <summary>
            Gets or sets the orientation in which the list is displayed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.RefreshWhileScrolling">
      <summary>
            Gets or sets a value indicating whether the viewport must be refreshed while the scroll is running.
            
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ViewportGap">
      <summary>
            Gets or sets a coeficient which will determine in each layout pass the size of the viewport. If zero is specified the size of the viewport will be equal to the scrollviewer viewport. If 0.5 is specified the size of the viewport will be enlarged to take up half screen more at both sides of the original viewport.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ViewportPreviewGap">
      <summary>
            Gets or sets a coeficient which will determine in each layout pass the size of the viewport to render items in preview mode.
            </summary>
      <remarks>
            This coeficient must be greater to ViewportGap to take effect.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ListViewer.Zoom">
      <summary>
            Gets or set the zoom applied to this list.
            </summary>
      <remarks>
            The zoom will be conditioned to the MinZoom and MaxZoom properties in the following priority order MinZoom&gt;MaxZoom&gt;Zoom
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ListViewer.MinZoom">
      <summary>
            Gets or sets the minimum zoom available.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.MaxZoom">
      <summary>
            Gets or sets the maximum zoom available.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ZoomMode">
      <summary>
            Gets or sets whether the zoom is enabled or disabled.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.VerticalScrollBarVisibility">
      <summary>
            Gets or sets a value that indicates whether a vertical ScrollBar should be displayed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.HorizontalScrollBarVisibility">
      <summary>
            Gets or sets a value that indicates whether a horizontal ScrollBar should be displayed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ButtonBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Background of the buttons inside the control.
            
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ButtonForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Foreground of the buttons inside the control.
            
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.IsSwipeEnabled">
      <summary>
            Gets or sets a value that indicates whether the view supports discrete input processing for a swipe interaction.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListBox.InitializePanel">
      <summary>
            Initializes the panel.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListBox.OnItemTapped(System.Object,C1.WPF.C1TappedEventArgs)">
      <summary>
            Called when one of the items is tapped.
            </summary>
      <param name="sender">The item that was tapped.</param>
      <param name="e">The <see cref="T:C1.WPF.C1TappedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:C1.WPF.C1ListBox.ClearSelection">
      <summary>
            Clears the selection.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListBox.OnSelectionChanged(System.Object,System.EventArgs)">
      <summary>
            Called when the selection changed.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="F:C1.WPF.C1ListBox.SelectionModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListBox.SelectionMode" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListBox.SelectedItemProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListBox.SelectedItem" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListBox.SelectedItemsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListBox.SelectedItems" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListBox.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListBox.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListBox.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListBox.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListBox.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ListBox" />.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ListBox.SelectionChanged">
      <summary>
            Occurs when the selection changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListBox.SelectionMode">
      <summary>
            Gets or sets if selection is disabled, single, multiple, or extended.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListBox.SelectedItem">
      <summary>
            Gets or set the item which is selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListBox.SelectedItems">
      <summary>
            Gets or set the list of items which are selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListBox.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListBox.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ListViewerItem">
      <summary>
            Visual element used inside a <see cref="T:C1.WPF.C1ListViewer" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerItem.ChangeVisualStatePreview(System.Boolean)">
      <summary>
            Updates the current visual state of the Preview visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerItem.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewerItem.StateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewerItem.State" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewerItem.PreviewContentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewerItem.PreviewContent" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewerItem.PreviewContentTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewerItem.PreviewContentTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ListViewerItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ListViewerItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ListViewerItem.State">
      <summary>
            Gets or sets the state of the item, which can be Preview or Full.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerItem.PreviewContent">
      <summary>
            Gets or sets the content of the preview state.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerItem.PreviewContentTemplate">
      <summary>
            Gets or sets the DataTemplate used when in preview state.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListBoxItem.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListBoxItem.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListBoxItem.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListBoxItem.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListBoxItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ListBoxItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListBoxItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ListBoxItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ListBoxItem.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListBoxItem.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ListBoxItemState">
      <summary>
            State of a <see cref="T:C1.WPF.C1ListViewerItem" />.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListBoxItemState.Preview">
      <summary>
            Display the preview template of the <see cref="T:C1.WPF.C1ListViewerItem" />.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListBoxItemState.Full">
      <summary>
            Display the full template of the <see cref="T:C1.WPF.C1ListViewerItem" />.
            </summary>
    </member>
    <member name="T:C1.WPF.ZoomMode">
      <summary>
            Indicates the current mode for zoom behavior in the ScrollViewer content.
            </summary>
    </member>
    <member name="F:C1.WPF.ZoomMode.Disabled">
      <summary>
            Zoom of content is disabled.
            </summary>
    </member>
    <member name="F:C1.WPF.ZoomMode.Enabled">
      <summary>
            Zoom of content is enabled.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ListViewerPanel">
      <summary>
            Virtualizing stack panel which supports preview templates in order to scroll quickly.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1ListViewerPanel" /> class.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewerPanel.ZoomProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ListViewerPanel.Zoom" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.Refresh">
      <summary>
            Refreshes this instance by removing all the children and creating them again.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.MeasureOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
      <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
      <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ArrangeOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.
            </summary>
      <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
      <returns>
            The actual size that is used after the element is arranged in layout.
            </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.OnClearChildren">
      <summary>
            Called when the collection of child elements is cleared by the base <see cref="T:System.Windows.Controls.Panel" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
      <summary>
            Called when the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> for this <see cref="T:System.Windows.Controls.Panel" /> changes.
            </summary>
      <param name="sender">The <see cref="T:System.Object" /> that raised the event.</param>
      <param name="args">Provides data for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" /> event.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.AfterItemPrepared(C1.WPF.C1ListViewerItem)">
      <summary>
            Called after the item was prepared to be shown in the panel.
            </summary>
      <param name="listBoxItem">The item container which was just prepared.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.BeforeItemRecycled(C1.WPF.C1ListViewerItem)">
      <summary>
            Called before the item is recycled.
            </summary>
      <param name="listBoxItem">The item container to be recycled.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.AfterItemMeasure(System.Int32,System.Windows.FrameworkElement)">
      <summary>
            Called after an item is measured in order to update scrolling structures.
            </summary>
      <param name="index">The index of the item which was measured.</param>
      <param name="child">The child that was measured.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.CalculateExtentSize">
      <summary>
            Calculates the extent size which determine the size of the panel.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.NeedsMoreItems">
      <summary>
            Gets true when the viewport is close to the bottom.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.GetItemsCountInViewport">
      <summary>
            Gets the number of items in viewport.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToRenderCoordinates(System.Windows.Size)">
      <summary>
            Converts a size from absolute coordinates to render coordinates.
            </summary>
      <param name="size">The size to be converted.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToRenderCoordinates(System.Windows.Point)">
      <summary>
            Converts a point from absolute coordinates to render coordinates.
            </summary>
      <param name="size">The point to be converted.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToRenderCoordinates(System.Windows.Rect)">
      <summary>
            Converts a rectangle from absolute coordinates to render coordinates.
            </summary>
      <param name="rect">The rectangle to be converted.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToRenderCoordinates(System.Double)">
      <summary>
            Converts a length from absolute coordinates to render coordinates in order to implement zoom panel easily.
            </summary>
      <param name="length">The length to be converted.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToLayoutCoordinates(System.Windows.Size)">
      <summary>
            Converts a size from absolute coordinates to layout coordinates.
            </summary>
      <param name="size">The size to be converted.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToLayoutCoordinates(System.Windows.Point)">
      <summary>
            Converts a point from absolute coordinates to layout coordinates.
            </summary>
      <param name="size">The point to be converted.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToLayoutCoordinates(System.Double)">
      <summary>
            Converts a length from absolute coordinates to layout coordinates.
            </summary>
      <param name="length">The length.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertFromLayoutCoordinates(System.Windows.Size)">
      <summary>
            Converts a length from layout coordinates to absolute coordinates.
            </summary>
      <param name="size">The size.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertFromLayoutCoordinates(System.Double)">
      <summary>
            Converts a length from layout coordinates to absolute coordinates.
            </summary>
      <param name="length">The length.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToAbsoluteCoordinates(System.Windows.Size)">
      <summary>
            Converts a size from render coordinates to absolute coordinates.
            </summary>
      <param name="size">The size to be converted.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToAbsoluteCoordinates(System.Windows.Rect)">
      <summary>
            Converts a rectangle from render coordinates to absolute coordinates.
            </summary>
      <param name="area">The rectangle to be converted.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToAbsoluteCoordinates(System.Windows.Point)">
      <summary>
            Converts a point from render coordinates to absolute coordinates.
            </summary>
      <param name="point">The point to be converted.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToAbsoluteCoordinates(System.Double)">
      <summary>
            Converts a length from render coordinates to absolute coordinates in order to implement zoom panel easily.
            </summary>
      <param name="length">The length to be converted.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.GetIndexAt(System.Windows.Point)">
      <summary>
            Gets the item index at the specified position.
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.GetItemPosition(System.Int32)">
      <summary>
            Gets the estimated position of an item in this panel.
            </summary>
      <param name="index">The index of the item to be queried.</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.RaisePropertyChanged(System.String)">
      <summary>
            Raises the property changed event.
            </summary>
      <param name="propertyName">Name of the property which changed.</param>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.Owner">
      <summary>
            Gets the items control which is parent of this panel.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.GeneratorForPanel">
      <summary>
            Gets the items container generator for this panel.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.Zoom">
      <summary>
            Gets or sets the zoom applied in this panel.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ListViewerPanel.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.ItemWidth">
      <summary>
            Gets or sets the width of each item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.ItemHeight">
      <summary>
            Gets or sets the height of each item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.Padding">
      <summary>
            Gets the padding of the list of items.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.Orientation">
      <summary>
            Gets or sets the orientation in which the list is displayed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.ViewportGap">
      <summary>
            Gets a coeficient which will determine in each layout pass the size of the viewport. 
            If zero is specified the size of the viewport will be equal to the scrollviewer viewport. 
            If 0.5 is specified the size of the viewport will be enlarged to take up half screen more at both sides of the original viewport.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.ViewportPreviewGap">
      <summary>
            Gets a coeficient which will determine in each layout pass the size of the viewport to render items in preview mode.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.ScrollViewer">
      <summary>
            Gets the scroll viewer associated with this panel.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.MeasureSize">
      <summary>
            Gets the size used to measure the items in the MeasureOverride method call.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.ActualZoom">
      <summary>
            Gets the actual zoom.
            </summary>
    </member>
    <member name="T:C1.WPF.C1Menu">
      <summary>
            The C1Menu control enables you hierarchically organize elements associated with event handlers.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemClick(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemClick" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemOpening(C1.WPF.CancelSourceEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemOpening" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemOpened(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemOpened" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemClosing(C1.WPF.CancelSourceEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemClosing" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemClosed(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemClosed" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemChecked(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemChecked" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemUnchecked(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemUnchecked" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.Close">
      <summary>
            Forces closing all opened sub-menus.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Menu.OnAutoCloseChanged(System.Boolean)">
      <summary>
            Called when the property AutoClose changed.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Menu.OnAutoClosing(System.ComponentModel.CancelEventArgs)">
      <summary>
            Raises the AutoClosing event.
            </summary>
      <param name="e">Provides data for CancelEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnAutoClosed(System.EventArgs)">
      <summary>
            Raises the AutoClosed event.
            </summary>
      <param name="e">Provides data for EventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.FirstLevelTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.FirstLevelTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.NonFirstLevelTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.NonFirstLevelTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.MenuOpenDelayProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.MenuOpenDelay" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.AutoCloseProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.AutoClose" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.DetectBoundariesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.DetectBoundaries" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.SubMenuMaxHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.SubMenuMaxHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.SeparatorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.SeparatorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.FirstLevelStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.FirstLevelStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.NonFirstLevelStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.NonFirstLevelStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.HighlightedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.HighlightedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.OpenedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.OpenedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1Menu.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1Menu" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Menu.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1Menu" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemClick">
      <summary>
            Occurs when a C1MenuItem is clicked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemOpening">
      <summary>
            Occurs when a C1MenuItem is opening.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemOpened">
      <summary>
            Occurs when a C1MenuItem is opened.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemClosing">
      <summary>
            Occurs when a C1MenuItem is closing.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemClosed">
      <summary>
            Occurs when a C1MenuItem is closed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemChecked">
      <summary>
            Occurs when a C1MenuItem is checked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemUnchecked">
      <summary>
            Occurs when a C1MenuItem is unchecked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.AutoClosing">
      <summary>
            Occurs when the Menu is AutoClosing.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.AutoClosed">
      <summary>
            Occurs when the Menu is AutoClosed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.FirstLevelTemplate">
      <summary>
            Represents the template to apply to all menu items at the first level.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.NonFirstLevelTemplate">
      <summary>
            Represents the template to apply to all menu items that are not in the first level.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.MenuOpenDelay">
      <summary>
            Gets or Sets a value (in milliseconds) for the delay used when opening a submenu.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.AutoClose">
      <summary>
            Gets or sets a value indicating if the menu will auto close when the user clicks outside of it.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.DetectBoundaries">
      <summary>
            Gets or sets a value indicating if the menu will auto update the position of its sub-menus when they are close to the boundaries of the application.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.Orientation">
      <summary>
            Gets or sets the direction in which to render the Menu control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.SubMenuMaxHeight">
      <summary>
            Gets or sets a value that indicates the MaxHeight of the SubMenu.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.SeparatorStyle">
      <summary>
            Default style applied to the <see cref="T:C1.WPF.C1Separator" /> located inside this <see cref="T:C1.WPF.C1Menu" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.FirstLevelStyle">
      <summary>
            Represents the style to apply to all menu items at the first level.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.NonFirstLevelStyle">
      <summary>
            Represents the style to apply to all menu items that are not in the first level.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.IsFocused">
      <summary>
            Returns true if the control has the focus.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.HighlightedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the menu item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.OpenedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used in a menu item when this item is opened.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MenuItem">
      <summary>
            Represents a selectable item inside a C1Menu control.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnSubmenuOpened(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to an open item action by raising a SubmenuOpened event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnSubmenuClosed(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to a closed item action by raising a SubmenuClosed event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnClick(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to a click action by raising a Click event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnSubmenuClosing(C1.WPF.CancelSourceEventArgs)">
      <summary>
            Responds to a close item action by raising a SubmenuClosing event.
            </summary>
      <param name="e">Provides data for CancelSourceEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnSubmenuOpening(C1.WPF.CancelSourceEventArgs)">
      <summary>
            Responds to an open item action by raising a SubmenuOpening event.
            </summary>
      <param name="e">Provides data for CancelSourceEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnChecked(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to a check item action by raising a Checked event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnUnchecked(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to an uncheck item action by raising a Unchecked event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
      <summary> 
            Called when the mouse pointer enters the bounds of the header element.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
      <summary>
            Called when the mouse pointer leaves the bounds of the header element.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Called before the System.Windows.UIElement.MouseRightButtonDown event occurs.
            </summary>
      <param name="e">
            A System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnMouseClick(System.Object,System.Windows.Input.MouseEventArgs)">
      <summary>
            Called when the user clicks the item. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.ChangeVisualStateOpened(System.Boolean)">
      <summary>
            Updates the current visual state of the Opened visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.ChangeVisualStateHighlighted(System.Boolean)">
      <summary>
            Updates the current visual state of the Highlighted visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.TextAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.TextAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.TextDecorationsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.TextDecorations" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.TextWrappingProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.TextWrapping" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IconProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.Icon" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IsSubmenuOpenProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.IsSubmenuOpen" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IsCheckableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.IsCheckable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IsCheckedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.IsChecked" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IsHighlightedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.IsHighlighted" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.GroupNameProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.GroupName" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.SubMenuMaxHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.SubMenuMaxHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.CommandProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.Command" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.CommandParameterProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.CommandParameter" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.HighlightedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.HighlightedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.OpenedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.OpenedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.HeaderBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.HeaderBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.HeaderForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.HeaderForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1MenuItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1MenuItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsFirstLevel">
      <summary>
            Indicates whether the current item is a FirstLevel submenu.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.ParentItem">
      <summary>
            Gets the <see cref="T:C1.WPF.C1MenuItem" /> that is the parent of this item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Parent">
      <summary>
            Gets the <see cref="T:C1.WPF.C1MenuItem" /> that is the parent of this item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Menu">
      <summary>
            Identifies the parent <see cref="T:C1.Silverlight.C1Menu" /> of this item.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.Click">
      <summary>
            Occurs when the <see cref="T:C1.WPF.C1MenuItem" /> is clicked. 
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.SubmenuOpened">
      <summary>
            Occurs when the state of the IsSubmenuOpen property changes to true.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.SubmenuClosed">
      <summary>
            Occurs when the state of the IsSubmenuOpen property changes to false.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.SubmenuOpening">
      <summary>
            Occurs when a submenu is opening.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.SubmenuClosing">
      <summary>
            Occurs when a submenu is closing.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.Checked">
      <summary>
            Occurs when a C1MenuItem is checked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.Unchecked">
      <summary>
            Occurs when a C1MenuItem is unchecked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Index">
      <summary>
            Gets the index of this <see cref="T:C1.Silverlight.C1MenuItem" /> in its parent items collection.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.TextAlignment">
      <summary>
            Gets or sets a value that indicates the horizontal alignment of text content in the Header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.TextDecorations">
      <summary>
            Gets or sets a TextDecorationCollection that contains the effects to apply to the text of the Header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.TextWrapping">
      <summary>
            Gets or sets a value that indicates how any text should be wrapped in the Header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Icon">
      <summary>
            Gets or sets the icon that appears in a C1MenuItem.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsSubmenuOpen">
      <summary>
            Gets a value that indicates whether the submenu of the C1MenuItem is open.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsCheckable">
      <summary>
            Gets a value that indicates whether a <see cref="T:C1.WPF.C1MenuItem" /> can be checked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsChecked">
      <summary>
            Gets or sets a value that indicates whether the <see cref="T:C1.WPF.C1MenuItem" /> is checked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsHighlighted">
      <summary>
            Gets a value that indicates whether a <see cref="T:C1.WPF.C1MenuItem" /> is highlighted.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.GroupName">
      <summary>
            Gets or sets the name that specifies which MenuItems are mutually exclusive (when checkable).
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.SubMenuMaxHeight">
      <summary>
            Gets or sets a value that indicates the MaxHeight of the SubMenu.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Command">
      <summary>
            Gets or sets the command to invoke when this button is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.CommandParameter">
      <summary>
            Gets or sets the parameter to pass to the Command property.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.HighlightedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the menu item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.OpenedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used in a menu item when this item is opened.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.HeaderBackground">
      <summary>
            Gets or sets the background brush of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.HeaderForeground">
      <summary>
            Gets or sets the foreground brush of the header.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MenuList">
      <summary>
            List of menu items. This list can be set as the content of a dropdown to make a drop down list.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1MenuList" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuList.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
            Prepares the specified element to display the specified item.
            </summary>
      <param name="element">The element used to display the specified item.</param>
      <param name="item">The item to display.</param>
    </member>
    <member name="T:C1.WPF.IOrderedSet`1">
      <summary>
            Defines methods to manipulate ordered sets.
            </summary>
      <typeparam name="T">The type of the elements in the collection.</typeparam>
    </member>
    <member name="M:C1.WPF.IOrderedSet`1.AddRange(`0,`0)">
      <summary>
            Adds a range of elements.
            </summary>
      <param name="from">From element.</param>
      <param name="to">To element.</param>
    </member>
    <member name="M:C1.WPF.IOrderedSet`1.RemoveRange(`0,`0)">
      <summary>
            Removes a range of elements.
            </summary>
      <param name="from">From element.</param>
      <param name="to">To element.</param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.IOrderedSet`1.Item(System.Int32)">
      <summary>
            Gets the item at the specified index.
            </summary>
      <value>The element at the specified index.</value>
    </member>
    <member name="T:C1.WPF.C1OrderedSet">
      <summary>
            Collection of ordered <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1OrderedSet" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.#ctor(C1.WPF.C1OrderedSet)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1OrderedSet" /> class.
            </summary>
      <param name="set">The collection whose elements are copied to the new set.</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Add(System.Int32)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Add(C1.WPF.C1OrderedSet)">
      <summary>
            Joins the specified set.
            </summary>
      <param name="set">The set to join.</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.AddRange(System.Int32,System.Int32)">
      <summary>
            Adds a range of elements.
            </summary>
      <param name="from">From element.</param>
      <param name="to">To element.</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Contains(System.Int32)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.CopyTo(System.Int32[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Remove(System.Int32)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements.
            </summary>
      <param name="from">From element.</param>
      <param name="to">To element.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Remove(C1.WPF.C1OrderedSet)">
      <summary>
            Removes the specified items.
            </summary>
      <param name="removedItems">The removed items.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:C1.WPF.C1OrderedSet.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:System.Int32" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:C1.WPF.C1OrderedSet.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <value>
      </value>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="P:C1.WPF.C1OrderedSet.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
      <value>
      </value>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
    </member>
    <member name="T:C1.WPF.C1SelectionMode">
      <summary>
            Defines the selection behavior for a control which supports the SelectionMode
            property like C1treeView. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1SelectionMode.None">
      <summary>
            The user can not select any item.
            </summary>
    </member>
    <member name="F:C1.WPF.C1SelectionMode.Single">
      <summary>
            The user can select only one item at a time. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1SelectionMode.Multiple">
      <summary>
            The user can select multiple items without holding down a modifier key.
            </summary>
    </member>
    <member name="F:C1.WPF.C1SelectionMode.Extended">
      <summary>
            The user can select multiple consecutive items while holding down the corresponding modifier key.
            </summary>
    </member>
    <member name="T:C1.WPF.C1Separator">
      <summary>
            Control that is used to separate items in menus and toolbar.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Separator.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1Separator.FirstLevelTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Separator.FirstLevelTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Separator.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Separator.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1Separator.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1Separator" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Separator.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1Separator" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1Separator.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1Separator.FirstLevelTemplate">
      <summary>
            Represents the template to apply to all separator items used in the first level of the menu.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Separator.Orientation">
      <summary>
            Gets or sets the direction of the separator.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Separator.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TileListBox">
      <summary>
            List of items displayed in columns determined by the size of the items.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TileListBox.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TileListBox" />.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TileListBoxPanel">
      <summary>
            Virtualizing panel which render the items in columns depending on the size of the items.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TileListBoxPanel.GetIndexAt(System.Windows.Point)">
      <summary>
            Gets the item index at the specified position.
            </summary>
      <param name="point">The point.</param>
    </member>
    <member name="M:C1.WPF.C1TileListBoxPanel.CalculateExtentSize">
      <summary>
            Calculates the extent size which determine the size of the panel.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1TileListBoxPanel.MeasureOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
      <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
      <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
    </member>
    <member name="M:C1.WPF.C1TileListBoxPanel.AfterItemMeasure(System.Int32,System.Windows.FrameworkElement)">
      <summary>
            Called after an item is measured in order to update scrolling structures.
            </summary>
      <param name="index">The index of the item which was measured.</param>
      <param name="child">The child that was measured.</param>
    </member>
    <member name="M:C1.WPF.C1TileListBoxPanel.ArrangeOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.
            </summary>
      <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
      <returns>
            The actual size that is used after the element is arranged in layout.
            </returns>
    </member>
    <member name="P:C1.WPF.C1TileListBoxPanel.VisibleColumnsCount">
      <summary>
            Gets the number of visible columns or rows depending on the <see cref="T:System.Windows.Controls.Orientation" />.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpandMode">
      <summary>
            The ExpandMode enumeration is used in C1TreeView to specify the allowed number of expanded C1TreeViewItems. 
            </summary>
    </member>
    <member name="F:C1.WPF.ExpandMode.Single">
      <summary>
            Only one item can be expanded at a time.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpandMode.Multiple">
      <summary>
            Several items may be expanded simultaneously.
            </summary>
    </member>
    <member name="T:C1.WPF.AutoScrollMode">
      <summary>
            The ExpandMode enumeration is used in C1TreeView to specify the allowed number of expanded C1TreeViewItems. 
            </summary>
    </member>
    <member name="F:C1.WPF.AutoScrollMode.Vertical">
      <summary>
            Auto-scrolls vertically.
            </summary>
    </member>
    <member name="F:C1.WPF.AutoScrollMode.Both">
      <summary>
            Auto-scrolls vertically and horizontally.
            </summary>
    </member>
    <member name="F:C1.WPF.AutoScrollMode.None">
      <summary>
            Does not Auto-scroll.
            </summary>
    </member>
    <member name="T:C1.WPF.AutoSearchBufferChangedEventArgs">
      <summary>
            Provide data for the AutoSearchBufferChanged event.
            </summary>
    </member>
    <member name="P:C1.WPF.AutoSearchBufferChangedEventArgs.Indexes">
      <summary>
            The collection of indexes.
            </summary>
    </member>
    <member name="P:C1.WPF.AutoSearchBufferChangedEventArgs.SearchBuffer">
      <summary>
            Get the value of searching buffer.
            </summary>
    </member>
    <member name="T:C1.WPF.SelectionChangingEventArgs">
      <summary>
            Provide data for the SelectionChanging event.
            </summary>
    </member>
    <member name="P:C1.WPF.SelectionChangingEventArgs.Cancel">
      <summary>
             Cancel the Selection operation.
            </summary>
    </member>
    <member name="T:C1.WPF.DropAction">
      <summary>
            Specifies the action that will be performed when the user drops a drag source into a drop target element.
            </summary>
    </member>
    <member name="F:C1.WPF.DropAction.None">
      <summary>
            No action.
            </summary>
    </member>
    <member name="F:C1.WPF.DropAction.Move">
      <summary>
            Move the source element into the target element.
            </summary>
    </member>
    <member name="F:C1.WPF.DropAction.Copy">
      <summary>
            Copy the source element into the target element.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TreeViewPanel">
      <summary>
            Virtualizing stack panel.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1TreeViewPanel" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
      <summary>
            Called when the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> for this <see cref="T:System.Windows.Controls.Panel" /> changes.
            </summary>
      <param name="sender">The <see cref="T:System.Object" /> that raised the event.</param>
      <param name="args">Provides data for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" /> event.</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.AfterItemPrepared(C1.WPF.C1TreeViewItem)">
      <summary>
            Called after the item was prepared to be shown in the panel.
            </summary>
      <param name="treeViewItem">The item container which was just prepared.</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.BeforeItemRecycled(C1.WPF.C1TreeViewItem)">
      <summary>
            Called before the item is recycled.
            </summary>
      <param name="treeViewItem">The item container to be recycled.</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.BringIndexIntoView(System.Int32)">
      <summary>
            Bring the index into viewport.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.MeasureOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
      <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
      <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.ArrangeOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.
            </summary>
      <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
      <returns>
            The actual size that is used after the element is arranged in layout.
            </returns>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.CalculateExtentSize">
      <summary>
            Calculates the extent size which determine the size of the panel.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.AfterItemMeasure(System.Int32,System.Windows.Size,System.Boolean)">
      <summary>
            Called after an item is measured in order to update scrolling structures.
            </summary>
      <param name="index">The index of the item which was measured.</param>
      <param name="desiredSize">The desired size of the item just measured.</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.OnClearChildren">
      <summary>
            Called when the collection of child elements is cleared by the base <see cref="T:System.Windows.Controls.Panel" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.GetIndexAt(System.Windows.Point)">
      <summary>
            Gets the item index at the specified position.
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.Refresh">
      <summary>
            Refreshes this instance by removing all the children and creating them again.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewPanel.Owner">
      <summary>
            Gets the items control which is parent of this panel.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewPanel.Padding">
      <summary>
            Gets the padding of the list of items.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewPanel.ScrollViewer">
      <summary>
            Gets the scroll viewer associated with this panel.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewPanel.MeasureSize">
      <summary>
            Gets the size used to measure the items in the MeasureOverride method call.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ZoomUnit">
      <summary>
            Represent a zoom which can be expresed like a fixed value, or relative to the viewport.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1ZoomUnit" /> struct.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.#ctor(System.Double,C1.WPF.C1ZoomUnitType)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1ZoomUnit" /> struct.
            </summary>
      <param name="value">The value.</param>
      <param name="type">The type of unit used to express the zoom.</param>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.op_Equality(C1.WPF.C1ZoomUnit,C1.WPF.C1ZoomUnit)">
      <summary>
            Compares two C1ZoomUnit structures for equality.
            </summary>
      <param name="gl1">The first instance of C1ZoomUnit to compare.</param>
      <param name="gl2">The second instance of C1ZoomUnit to compare.</param>
      <returns>true if the two instances of C1ZoomUnit have the same value and C1ZoomUnitType; otherwise, false.</returns>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.op_Inequality(C1.WPF.C1ZoomUnit,C1.WPF.C1ZoomUnit)">
      <summary>
            Compares two C1ZoomUnit structures to determine if they are not equal.
            </summary>
      <param name="gl1">The first instance of C1ZoomUnit to compare.</param>
      <param name="gl2">The second instance of C1ZoomUnit to compare.</param>
      <returns>true if the two instances of C1ZoomUnit do not have the same value and C1ZoomUnitType; otherwise, false.</returns>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.Type">
      <summary>
            Gets the type of unit.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.Value">
      <summary>
            Gets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.IsFixed">
      <summary>
            Gets a value indicating whether the zoom is a fixed value.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.IsFill">
      <summary>
            Gets a value indicating whether the zoom will be adjusted to fill the viewport.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.IsOneItem">
      <summary>
            Gets a value indicating whether the zoom will be adjusted to show one item entirely.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.Fill">
      <summary>
            Gets the zoom which auto-adjust to fill the viewport.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.OneItem">
      <summary>
            Gets the zoom which auto-adjust to show one item entirely in the viewport.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ZoomUnitType">
      <summary>
            Represent the kind of zoom.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ZoomUnitType.Fixed">
      <summary>
            Represent a zoom determined by a fixed value, where 1 means no zoom.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ZoomUnitType.Fill">
      <summary>
            Represent a zoom value which is relative to the viewport, and is adjusted to fill the viewport.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ZoomUnitType.OneItem">
      <summary>
            Represent a zoom value which is relative to the viewport, and is adjusted to show one item entirely.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ZoomUnitTypeConverter">
      <summary>
            Converts a string to a <see cref="T:C1.WPF.C1ZoomUnit" /> and vice versa.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ZoomUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
      <param name="context">An object that provides a format context.</param>
      <param name="sourceType">The type you want to convert from.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
    </member>
    <member name="M:C1.WPF.C1ZoomUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
      <param name="context">An object that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The value to convert to the type of this converter.</param>
      <returns>
            The converted value.
            </returns>
      <exception cref="T:System.NotImplementedException">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> not implemented in base <see cref="T:System.ComponentModel.TypeConverter" />.</exception>
    </member>
    <member name="T:C1.WPF.C1TreeViewLine">
      <summary>
            Vertical connecting line.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLine.StrokeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewLine.Stroke" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLine.StrokeThicknessProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewLine.StrokeThickness" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLine.StrokeDashArrayProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewLine.StrokeDashArray" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewLine.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TreeViewLine" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewLine.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TreeViewLine" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1TreeViewLine.Stroke">
      <summary>
            Gets or sets the brush used to paint the connecting lines.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewLine.StrokeThickness">
      <summary>
            Gets or sets the thickness of the connecting lines.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewLine.StrokeDashArray">
      <summary>
            Gets or sets a Collection of System.Double values that indicates the pattern of dashes and gaps that is used to the connecting lines.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewLine.StrokeDashArrayChanged">
      <summary> 
            Event raised when the <see cref="P:StrokeDashArray" /> property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TreeViewLinePanel">
      <summary>
            A Panel which contains the vertical lines.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLinePanel.LineStrokeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewLinePanel.LineStroke" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLinePanel.LineThicknessProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewLinePanel.LineThickness" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLinePanel.LineDashArrayProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewLinePanel.LineDashArray" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLinePanel.LineStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TreeViewLinePanel.LineStyle" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewLinePanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TreeViewLinePanel" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewLinePanel.LineStroke">
      <summary>
            Gets or sets the brush used to paint the connecting lines.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewLinePanel.LineThickness">
      <summary>
            Gets or sets the thickness of the connecting lines.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewLinePanel.LineDashArray">
      <summary>
            Gets or sets a Collection of System.Double values that indicates the pattern of dashes and gaps that is used to the connecting lines.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewLinePanel.LineStyle">
      <summary>
            Gets or sets a Style of the lines in C1TreeViewLinePanel .
            </summary>
    </member>
    <member name="T:C1.WPF.C1TreeViewExpandButton">
      <summary>
            Expand/Co
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewExpandButton.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TreeViewExpandButton" /> control when a new template is applied.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewExpandButton.ChangeVisualStateShowIcon(System.Boolean)">
      <summary>
            Updates the current visual state of the ShowIcons visual state group to match the object's properties.
            </summary>
    </member>
    <member name="T:C1.WPF.IC1SupportIncrementalLoading">
      <summary>
            When the source of a C1ListBox implement this interface the items can be loaded on demand.
            </summary>
    </member>
    <member name="M:C1.WPF.IC1SupportIncrementalLoading.BeginLoadMoreItems(System.UInt32,System.AsyncCallback,System.Object)">
      <summary>
            Begins the operation to load more items.
            </summary>
      <param name="count">The count of items that will be loaded.</param>
      <param name="callback">The asynchronous callback.</param>
      <param name="state">The state.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.IC1SupportIncrementalLoading.EndLoadMoreItems(System.IAsyncResult,System.Windows.Threading.Dispatcher)">
      <summary>
            Ends the operation to load more items.
            </summary>
      <param name="ar">The asynchronous result returned in BeginLoadMoreItems.</param>
      <param name="dispatcher">The ui thread dispatcher that will be used to raise NotifyCollectionChanged events.</param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.IC1SupportIncrementalLoading.HasMoreItems">
      <summary>
            Gets a value indicating whether there are more items.
            </summary>
    </member>
    <member name="T:C1.WPF.SelectionChangedEventArgs`1">
      <summary>
            Provides data for the SelectionChanged event.
            </summary>
    </member>
    <member name="M:C1.WPF.SelectionChangedEventArgs`1.#ctor(C1.WPF.IOrderedSet{`0},C1.WPF.IOrderedSet{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.SelectionChangedEventArgs`1" /> class.
            </summary>
      <param name="addedItems">The added items.</param>
      <param name="removedItems">The removed items.</param>
    </member>
    <member name="P:C1.WPF.SelectionChangedEventArgs`1.AddedItems">
      <summary>
            Gets a collection which contains the items that were selected.
            </summary>
      <value>The items that were selected in this event.</value>
    </member>
    <member name="P:C1.WPF.SelectionChangedEventArgs`1.RemovedItems">
      <summary>
            Gets a collection which contains the items that were unselected.
            </summary>
      <value>The items that were unselected in this event.</value>
    </member>
    <member name="T:C1.WPF.BreakLine">
      <summary>
            Specifies hard line breaks before and/or after elements in a <see cref="T:C1.WPF.C1WrapPanel" />..
            </summary>
    </member>
    <member name="F:C1.WPF.BreakLine.None">
      <summary>
            No hard breaks. The next element will be positioned in the same line if there is enough room.
            </summary>
    </member>
    <member name="F:C1.WPF.BreakLine.After">
      <summary>
            Add a hard break after this element. The next element will be positioned in the next line.
            </summary>
    </member>
    <member name="F:C1.WPF.BreakLine.Before">
      <summary>
            Add a hard break before this element.
            </summary>
    </member>
    <member name="F:C1.WPF.BreakLine.AfterAndBefore">
      <summary>
            Add hard breaks before and after this element. It will be positioned by itself on a line.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DockPanel">
      <summary>
            Defines an area where you can arrange child elements either horizontally or vertically, relative to each other.
            </summary>
    </member>
    <member name="F:C1.WPF.C1DockPanel.LastChildFillProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DockPanel.LastChildFill" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1DockPanel.GetDock(System.Windows.DependencyObject)">
      <summary> 
            Gets the value of the Dock attached property for the 
            specified element.
            </summary>
      <param name="element">
            The element from which to read the attached property.
            </param>
      <returns>The value of the Dock property.</returns>
    </member>
    <member name="M:C1.WPF.C1DockPanel.SetDock(System.Windows.DependencyObject,C1.WPF.Dock)">
      <summary> 
            Sets the value of the Dock attached property for the 
            specified element.
            </summary>
      <param name="element">
            The element to write the attached property to.
            </param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="F:C1.WPF.C1DockPanel.DockProperty">
      <summary> 
            Identifies the Dock attached property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1DockPanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1DockPanel" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DockPanel.LastChildFill">
      <summary>
            Gets or sets a value indicating whether the last child of the panel fills the remaining space.
            </summary>
      <remarks>
            If this property is set to True, then the Dock property of the last child element will be ignored, and the panel will try to fill the empty space.
            </remarks>
    </member>
    <member name="T:C1.WPF.C1ExpandDirection">
      <summary>
            Specifies the direction in which a <see cref="T:C1.Silverlight.Extended.C1Expander" /> control opens.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ExpandDirection.Down">
      <summary>
            The <see cref="T:C1.Silverlight.Extended.C1Expander" /> control opens down. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ExpandDirection.Up">
      <summary>
            The <see cref="T:C1.Silverlight.Extended.C1Expander" /> control opens up. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ExpandDirection.Left">
      <summary>
            The <see cref="T:C1.Silverlight.Extended.C1Expander" /> control opens left. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ExpandDirection.Right">
      <summary>
            The <see cref="!:C1Expander" /> control opens right.  
            </summary>
    </member>
    <member name="T:C1.WPF.C1HeaderedContentControl">
      <summary>
            Provides the base implementation for all controls that contain single content and have a header.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HeaderedContentControl.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.Header" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontFamilyProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontFamily" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontSizeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontSize" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontStretchProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontStretch" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontWeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontWeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderPaddingProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderPadding" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HorizontalHeaderAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HorizontalHeaderAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.VerticalHeaderAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.VerticalHeaderAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1HeaderedContentControl.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1HeaderedContentControl" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HeaderedContentControl.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1HeaderedContentControl" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1HeaderedContentControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.Header">
      <summary>
            Gets or sets the header of this control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderTemplate">
      <summary>
            Gets or sets the data template used to display the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontFamily">
      <summary>
            Gets or sets the font family of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontSize">
      <summary>
            Gets or sets the font size of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontStretch">
      <summary>
            Gets or sets the font stretch of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontStyle">
      <summary>
            Gets or sets the font style of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontWeight">
      <summary>
            Gets or sets the font weight of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderPadding">
      <summary>
            Gets or sets the padding of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HorizontalHeaderAlignment">
      <summary>
            Gets or sets the HorizontalContentAlignment of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.VerticalHeaderAlignment">
      <summary>
            Gets or sets the VerticalContentAlignment of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderBackground">
      <summary>
            Gets or sets the background brush of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderForeground">
      <summary>
            Gets or sets the foreground brush of the header.
            </summary>
    </member>
    <member name="E:C1.WPF.C1HeaderedContentControl.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.ValidationState">
      <summary>
            Enumerates binding validation states.
            </summary>
    </member>
    <member name="F:C1.WPF.ValidationState.Valid">
      <summary>
            All bindings are valid.
            </summary>
    </member>
    <member name="F:C1.WPF.ValidationState.InvalidFocused">
      <summary>
            A binding is invalid and the control is focused.
            </summary>
    </member>
    <member name="F:C1.WPF.ValidationState.InvalidUnfocused">
      <summary>
            A binding is invalid and the control is unfocused.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ValidationDecorator">
      <summary>
            Displays binding validation errors.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ValidationDecorator.ChangeVisualStateValidationStates(System.Boolean)">
      <summary>
            Updates the current visual state of the ValidationStates visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ValidationDecorator.ValidationStateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ValidationDecorator.ValidationState" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ValidationDecorator.TargetProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ValidationDecorator.Target" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ValidationDecorator.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ValidationDecorator.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ValidationDecorator.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ValidationDecorator.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ValidationDecorator" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ValidationDecorator.ValidationState">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.C1ValidationDecorator.ValidationState" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ValidationDecorator.Target">
      <summary>
            Gets or sets the target of the validation.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ValidationDecorator.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="T:C1.WPF.C1LayoutRounder">
      <summary>
            Wrapper to get layout rounding in WPF 3.5.
            </summary>
    </member>
    <member name="M:C1.WPF.C1LayoutRounder.MeasureOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Measure pass of layout.
            </summary>
    </member>
    <member name="T:C1.WPF.C1LayoutTransformer">
      <summary>
            Represents a control that applies a layout transformation to its Content.
            </summary>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.ApplyLayoutTransform">
      <summary>
            Applies the layout transform on the LayoutTransformer control content.
            </summary>
      <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform). 
            Should be used to notify the LayoutTransformer control that some aspect 
            of its Transform property has changed. 
            </remarks>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.MeasureOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
      <param name="availableSize">The available size that this element can give to child elements.</param>
      <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.ArrangeOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
      <returns>The actual size used.</returns>
      <remarks>
            Using the WPF parameter name finalSize instead of Silverlight's finalSize for clarity
            </remarks>
    </member>
    <member name="F:C1.WPF.C1LayoutTransformer.LayoutTransformProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1LayoutTransformer.LayoutTransform" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1LayoutTransformer" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1LayoutTransformer" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1LayoutTransformer.LayoutTransform">
      <summary>
            Gets or sets the layout transform to apply on the LayoutTransformer control content.
            </summary>
      <remarks>
            Corresponds to UIElement.LayoutTransform.
            </remarks>
    </member>
    <member name="T:C1.WPF.C1ScrollViewer">
      <summary>
            Represents a scrollable area that can contain other visible elements. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveUpCommand">
      <summary>
            Command to scroll up.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveDownCommand">
      <summary>
            Command to scroll down.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveRightCommand">
      <summary>
            Command to scroll right.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveLeftCommand">
      <summary>
            Command to scroll left.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveTopCommand">
      <summary>
            Command to scroll to the top.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveBottomCommand">
      <summary>
            Command to scroll to the bottom.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveRightEndCommand">
      <summary>
            Command to scroll totally to the right.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveLeftEndCommand">
      <summary>
            Command to scroll totally to the left.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToVerticalOffset(System.Double)">
      <summary>
            Scrolls to vertical offset.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToHorizontalOffset(System.Double)">
      <summary>
            Scrolls to horizontal offset.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollUp">
      <summary>
            Scrolls the <see cref="T:C1.WPF.C1ScrollViewer" /> content upward by <see cref="P:C1.WPF.C1ScrollViewer.VerticalSmallChange" /> pixels.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollDown">
      <summary>
            Scrolls the <see cref="T:C1.WPF.C1ScrollViewer" /> content downward by <see cref="P:C1.WPF.C1ScrollViewer.VerticalSmallChange" /> pixels.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollRight">
      <summary>
            Scrolls the <see cref="T:C1.WPF.C1ScrollViewer" /> content to the right by <see cref="P:C1.WPF.C1ScrollViewer.HorizontalSmallChange" /> pixels.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollLeft">
      <summary>
            Scrolls the <see cref="T:C1.WPF.C1ScrollViewer" /> content to the left by <see cref="P:C1.WPF.C1ScrollViewer.HorizontalSmallChange" /> pixels.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToHome">
      <summary>
            Scrolls vertically to the beginning of the <see cref="T:C1.WPF.C1ScrollViewer" /> content.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToEnd">
      <summary>
            Scrolls vertically to the end of the <see cref="T:C1.WPF.C1ScrollViewer" /> content.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToTop">
      <summary>
            Scrolls vertically to the beginning of the <see cref="T:C1.WPF.C1ScrollViewer" /> content.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToBottom">
      <summary>
            Scrolls vertically to the end of the <see cref="T:C1.WPF.C1ScrollViewer" /> content.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToRightEnd">
      <summary>
            Scrolls horizontally to the end of the <see cref="T:C1.WPF.C1ScrollViewer" /> content.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToLeftEnd">
      <summary>
            Scrolls horizontally to the beginning of the <see cref="T:C1.WPF.C1ScrollViewer" /> content.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ExtentHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ExtentHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ExtentWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ExtentWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.HorizontalOffsetProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.HorizontalOffset" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ScrollableHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ScrollableHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ScrollableWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ScrollableWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.VerticalOffsetProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.VerticalOffset" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ViewportHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ViewportHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ViewportWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ViewportWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.CanScrollUpProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.CanScrollUp" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.CanScrollRightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.CanScrollRight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.CanScrollLeftProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.CanScrollLeft" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.CanScrollDownProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.CanScrollDown" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.HorizontalSmallChangeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.HorizontalSmallChange" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.VerticalSmallChangeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.VerticalSmallChange" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.VerticalScrollBarVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.VerticalScrollBarVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.HorizontalScrollBarVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.HorizontalScrollBarVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ScrollModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ScrollMode" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ScrollViewer" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ScrollViewer" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ExtentHeight">
      <summary>
            Gets a value that contains the vertical size of the extent. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ExtentWidth">
      <summary>
            Gets a value that contains the horizontal size of the extent. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.HorizontalOffset">
      <summary>
            Gets a value that contains the horizontal offset of the scrolled content. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ScrollableHeight">
      <summary>
            Gets a value that represents the vertical size of the content element that can be scrolled. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ScrollableWidth">
      <summary>
            Gets a value that represents the horizontal size of the content element that can be scrolled. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.VerticalOffset">
      <summary>
            Gets a value that contains the vertical offset of the scrolled content. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ViewportHeight">
      <summary>
            Gets a value that contains the vertical size of the content's viewport. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ViewportWidth">
      <summary>
            Gets a value that contains the horizontal size of the content's viewport. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.CanScrollUp">
      <summary>
            Gets a value that indicates whether the vertical scroll isn't in the top position. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.CanScrollRight">
      <summary>
            Gets a value that indicates whether the vertical scroll isn't in the right-most position. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.CanScrollLeft">
      <summary>
            Gets a value that indicates whether the vertical scroll isn't in the left-most position. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.CanScrollDown">
      <summary>
            Gets a value that indicates whether the vertical scroll isn't in the bottom position. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.HorizontalSmallChange">
      <summary>
            Gets or sets the value to be added to or subtracted from the horizontal offset value when the scroll is moved.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.VerticalSmallChange">
      <summary>
            Gets or sets the value to be added to or subtracted from the vertical offset value when the scroll is moved.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.VerticalScrollBarVisibility">
      <summary>
            Gets or sets a value that indicates whether a vertical commands should be displayed. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.HorizontalScrollBarVisibility">
      <summary>
            Gets or sets a value that indicates whether a horizontal commands should be displayed. This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ScrollMode">
      <summary>
            Specifies when the scroll event should be raised. 
            </summary>
    </member>
    <member name="T:C1.WPF.OpacityConverter">
      <summary>
            Converter used to convert <see cref="T:System.Boolean" /> values into opacity values.
            true = 1, false = 0.
            </summary>
    </member>
    <member name="M:C1.WPF.OpacityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
      <param name="value">The source data being passed to the target.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
      <param name="parameter">An optional parameter to be used in the converter logic.</param>
      <param name="culture">The culture of the conversion.</param>
      <returns>
            The value to be passed to the target dependency property.
            </returns>
    </member>
    <member name="M:C1.WPF.OpacityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.
            </summary>
      <param name="value">The target data being passed to the source.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
      <param name="parameter">An optional parameter to be used in the converter logic.</param>
      <param name="culture">The culture of the conversion.</param>
      <returns>
            The value to be passed to the source object.
            </returns>
    </member>
    <member name="T:C1.WPF.C1SlideContentControl">
      <summary>
        <see cref="T:System.Windows.Controls.ContentControl" /> which allows specifying a value between 0 and 1 to perform slide animations which affect the layout.
            </summary>
    </member>
    <member name="M:C1.WPF.C1SlideContentControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1SlideContentControl" /> class.
            </summary>
    </member>
    <member name="F:C1.WPF.C1SlideContentControl.SlideDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1SlideContentControl.SlideDirection" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1SlideContentControl.SlideProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1SlideContentControl.Slide" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1SlideContentControl.MeasureOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
      <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
      <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
    </member>
    <member name="M:C1.WPF.C1SlideContentControl.ArrangeOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.
            </summary>
      <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
      <returns>
            The actual size that is used after the element is arranged in layout.
            </returns>
    </member>
    <member name="P:C1.WPF.C1SlideContentControl.SlideDirection">
      <summary>
            Gets or sets the expand direction.
            </summary>
    </member>
    <member name="P:C1.WPF.C1SlideContentControl.Slide">
      <summary>
            Gets or sets a value between 0 and 1 which determine the visible percentage of the control, 
            a value of 0 means the content is not visible wheras 1 is completely visible.
            </summary>
    </member>
    <member name="T:C1.WPF.C1WrapPanel">
      <summary>
            Positions child elements sequentially from top to bottom or from right to left, depending on the value of the <see cref="P:C1.WPF.C1WrapPanel.Orientation" /> property.
            </summary>
    </member>
    <member name="F:C1.WPF.C1WrapPanel.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1WrapPanel.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1WrapPanel.ItemWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1WrapPanel.ItemWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1WrapPanel.ItemHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1WrapPanel.ItemHeight" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1WrapPanel.GetBreakLine(System.Windows.DependencyObject)">
      <summary> 
            Gets the value of the BreakLine attached property for the 
            specified element.
            </summary>
      <param name="element">
            The element from which to read the attached property.
            </param>
      <returns>The value of the BreakLine property.</returns>
    </member>
    <member name="M:C1.WPF.C1WrapPanel.SetBreakLine(System.Windows.DependencyObject,C1.WPF.BreakLine)">
      <summary> 
            Sets the value of the BreakLine attached property for the 
            specified element.
            </summary>
      <param name="element">
            The element to write the attached property to.
            </param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="F:C1.WPF.C1WrapPanel.BreakLineProperty">
      <summary> 
            Identifies the BreakLine attached property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1WrapPanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1WrapPanel" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1WrapPanel.Orientation">
      <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1WrapPanel.ItemWidth">
      <summary>
            Gets or sets a value that specifies the width of all items that are contained within the panel.
            </summary>
    </member>
    <member name="P:C1.WPF.C1WrapPanel.ItemHeight">
      <summary>
            Gets or sets a value that specifies the height of all items that are contained within the panel.
            </summary>
    </member>
    <member name="T:C1.WPF.Dock">
      <summary>
            Specifies how controls are sized and aligned within <see cref="T:C1.Silverlight.C1DockPanel" /> controls.
            </summary>
    </member>
    <member name="F:C1.WPF.Dock.Left">
      <summary>
            The control's left edge is docked to the left edge of its containing control. 
            </summary>
    </member>
    <member name="F:C1.WPF.Dock.Right">
      <summary>
            The control's right edge is docked to the right edge of its containing control. 
            </summary>
    </member>
    <member name="F:C1.WPF.Dock.Top">
      <summary>
            The control's top edge is docked to the top of its containing control. 
            </summary>
    </member>
    <member name="F:C1.WPF.Dock.Bottom">
      <summary>
            The control's bottom edge is docked to the bottom of its containing control. 
            </summary>
    </member>
    <member name="T:C1.WPF.DockExtensions">
      <summary>
            Provides exntesions methods for <see cref="T:C1.WPF.Dock" />.
            </summary>
    </member>
    <member name="M:C1.WPF.DockExtensions.GetOrientation(C1.WPF.Dock)">
      <summary>
            Gets the orientation.
            </summary>
      <param name="dock">The dock.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.DockExtensions.GetOpposite(C1.WPF.Dock)">
      <summary>
            Gets the opposite.
            </summary>
      <param name="dock">The dock.</param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.Anchor">
      <summary>
            Specifies an anchor point in a visual element.
            </summary>
    </member>
    <member name="F:C1.WPF.Anchor.TopLeft">
      <summary>
            The top left corner of the visual element.
            </summary>
    </member>
    <member name="F:C1.WPF.Anchor.TopRight">
      <summary>
            The top right corner of the visual element.
            </summary>
    </member>
    <member name="F:C1.WPF.Anchor.BottomLeft">
      <summary>
            The bottom left corner of the visual element.
            </summary>
    </member>
    <member name="F:C1.WPF.Anchor.BottomRight">
      <summary>
            The bottom right corner of the visual element.
            </summary>
    </member>
    <member name="F:C1.WPF.Anchor.Center">
      <summary>
            The center of the visual element.
            </summary>
    </member>
    <member name="T:C1.WPF.AnchorMatching">
      <summary>
            Specifies an anchor matching between two elements.
            </summary>
    </member>
    <member name="P:C1.WPF.AnchorMatching.FixedElementAnchor">
      <summary>
            Anchor of the fixed element.
            </summary>
    </member>
    <member name="P:C1.WPF.AnchorMatching.MoveableElementAnchor">
      <summary>
            Anchor of the element that will be located.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ComboBox">
      <summary>
            The C1ComboBox control combines an editable text box with an auto-searchable drop-down list. The list can be shown or hidden by clicking the control’s drop-down arrow.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnSelectionCommitted">
      <summary>
            Fires the SelectionCommitted event.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.BeginEdit(System.String)">
      <summary>
            Begins the edit.
            </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Called when the value of the <see cref="P:Items" /> property changes.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Called before the <see cref="E:MouseLeftButtonDown" /> event occurs.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnEditCompleted">
      <summary>
            Fires the EditCompleted event.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.IsOpenKey(System.Windows.Input.Key)">
      <summary>
            Return true if that key should open the combo box.
            Override to handle you own keyboard selection strategy.
            </summary>
      <param name="key">The key that was pressed.</param>
      <returns>True if the key pressed should open the combo box.</returns>
    </member>
    <member name="M:C1.WPF.C1ComboBox.MoveListBox(System.Windows.Input.Key,System.Int32@)">
      <summary>
            Get the next item in the ListBox when a key is pressed.
            You may override this to implement your own keyboard selection strategy.
            </summary>
      <param name="key">Key that was pressed.</param>
      <param name="newIndex">The new selected index.</param>
      <returns>True if it is a handled key.</returns>
    </member>
    <member name="M:C1.WPF.C1ComboBox.ChangeVisualStateDropDownOpen(System.Boolean)">
      <summary>
            Updates the current visual state of the DropDownOpen visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedItemProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectedItem" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedIndexProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectedIndex" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedValuePathProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectedValuePath" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedValueProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectedValue" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.TextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.Text" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ItemConverterProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.ItemConverter" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.AutoCompleteProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.AutoComplete" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MaxDropDownItemsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.MaxDropDownItems" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DefaultItemHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.DefaultItemHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.IsEditableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.IsEditable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.WatermarkProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.Watermark" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ItemContainerStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.ItemContainerStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.TextAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.TextAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.IsDropDownOpenProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.IsDropDownOpen" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DropDownHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.DropDownHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DropDownWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.DropDownWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MaxDropDownHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.MaxDropDownHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MaxDropDownWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.MaxDropDownWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DropDownDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.DropDownDirection" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ScrollBarStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.ScrollBarStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.CaretBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.CaretBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ConditionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.Condition" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectionBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectionBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectionForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectionForeground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ButtonBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.ButtonBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ButtonForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.ButtonForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ComboBox" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ComboBox" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1ComboBox.SelectionCommitted">
      <summary>
            Event fired when the select item is committed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.EditCompleted">
      <summary>
            Handle this event to know when the user has completed the edits.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.ValidateInput">
      <summary>
            Event fired when new text is added to an editable C1ComboBox.
            Catch this event to validate the new input.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.KeyDownInPopup">
      <summary>
            Handle this event to provide your own custom navigation when the popup is opened.
            Receives the key that was pressed and the current index, and returns the new index that should be selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedItem">
      <summary>
            Gets or sets the current selected item or returns null if there is no selection.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.SelectedItemChanged">
      <summary> 
            Event raised when the <see cref="P:SelectedItem" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedIndex">
      <summary>
            Gets or sets the current selected index or returns -1 if there is no selection, or the selection doesn't belong to the Items collection.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.SelectedIndexChanged">
      <summary> 
            Event raised when the <see cref="P:SelectedIndex" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedValuePath">
      <summary>
            Gets or sets the path that is used to get the SelectedValue from the SelectedItem.
            </summary>
      <remarks>
            Returns the path used to get the SelectedValue. The default is an empty string.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedValue">
      <summary>
            Gets or sets the value of the SelectedItem, obtained by using SelectedValuePath.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.SelectedValueChanged">
      <summary> 
            Event raised when the <see cref="P:SelectedValue" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.Text">
      <summary>
            Gets or sets the text in the <see cref="T:C1.WPF.C1ComboBox" />. The behavior depends on the AutoComplete and IsEditable properties.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ItemConverter">
      <summary>
            Item converter used to convert the items to string and vice versa.
            </summary>
      <remarks>
            Use in conjunction with ItemTemplate to support AutoComplete and editing when providing custom item visualization.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ComboBox.AutoComplete">
      <summary>
            Gets or sets whether the control should try to automatically complete entries using the list items as an item source.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MaxDropDownItems">
      <summary>
            Obsolete. Use MaxDropDownHeight.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DefaultItemHeight">
      <summary>
            Obsolete. Use ItemContainerStyle.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.IsEditable">
      <summary>
            Get/Set if the user can select a value not contained in the <see cref="T:C1.WPF.C1ComboBox" />' Items collection.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.Watermark">
      <summary>
            Gets or sets the watermark content displayed when the control is empty.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ItemContainerStyle">
      <summary>
            Gets or sets the style used for the inner <see cref="T:C1.WPF.C1ComboBox" />'s items.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.TextAlignment">
      <summary>
            Gets or sets a value that indicates the horizontal alignment of text content.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.IsDropDownOpen">
      <summary>
            Open or close the <see cref="T:C1.WPF.C1ComboBox" /> popup.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.IsDropDownOpenChanged">
      <summary> 
            Event raised when the <see cref="P:IsDropDownOpen" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DropDownHeight">
      <summary>
            Gets or sets the height of the dropdown (set to Double.NaN to size automatically).
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DropDownWidth">
      <summary>
            Gets or sets the width of the drop-down box (set to Double.NaN to size automatically).
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MaxDropDownHeight">
      <summary>
            Gets or sets maximum height constraint of the drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MaxDropDownWidth">
      <summary>
            Gets or sets maximum width constraint of the drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DropDownDirection">
      <summary>
            Specifies the expand direction of the <see cref="T:C1.WPF.C1ComboBox" /> drop down.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ScrollBarStyle">
      <summary>
            Gets or sets the style used for the inner scrollbar.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.CaretBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> of the blinking cursor of an input control.  When .NET Framework is v3.5, 'CaretBrush' takes no effect.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.Condition">
      <summary>
            Gets or sets the filter condition of item source.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.IsFocused">
      <summary>
            Returns true if the control has the focus.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ButtonBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Background of the buttons inside the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ButtonForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Foreground of the buttons inside the control.
            </summary>
    </member>
    <member name="T:C1.WPF.Condition">
      <summary>
            Defines how to filter the items of combobox.
            </summary>
    </member>
    <member name="F:C1.WPF.Condition.StartWith">
      <summary>
            Select the item which start with the input text.
            </summary>
    </member>
    <member name="F:C1.WPF.Condition.Contains">
      <summary>
            List the items which contains the input text.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ComboBoxItem">
      <summary>
            Implements a selectable item inside a <see cref="T:C1.WPF.C1ComboBox" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.OnContentChanged(System.Object,System.Object)">
      <summary>
            Called when the value of the <see cref="P:Content" /> property changes.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.ChangeVisualStateSelection(System.Boolean)">
      <summary>
            Updates the current visual state of the Selection visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxItem.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBoxItem.IsSelected" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxItem.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBoxItem.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxItem.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBoxItem.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxItem.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBoxItem.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ComboBoxItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ComboBoxItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1ComboBoxItem.IsSelected">
      <summary>
            Gets or sets a Boolean value indicating that this <see cref="T:C1.WPF.C1ComboBoxItem" /> is selected.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBoxItem.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBoxItem.IsFocused">
      <summary>
            Returns true if the control has the focus.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBoxItem.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBoxItem.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DropDown">
      <summary>
            C1DropDown provides a generic drop-down control with a Header property that determines what the user sees when the drop-down part of the control is closed, and a Content property that determines what goes into the drop-down section.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DropDownButton">
      <summary>
            C1DropDown provides a generic drop-down control with a Header property that determines what the user sees when the drop-down part of the control is closed, and a Content property that determines what goes into the drop-down section.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.GetPreferedLocations">
      <summary>
            Get the locations where the dropdown will try to locate the <see cref="T:System.Windows.Controls.Primitives.Popup" /> once it's opened.
            </summary>
      <returns>Ordered list of <see cref="T:C1.WPF.AnchorMatching" /> to try.</returns>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.ChangeVisualStateDropDownOpen(System.Boolean)">
      <summary>
            Updates the current visual state of the DropDownOpen visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.IsDropDownOpenProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.IsDropDownOpen" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.DropDownHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.DropDownHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.DropDownWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.DropDownWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MaxDropDownHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.MaxDropDownHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MaxDropDownWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.MaxDropDownWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MinDropDownHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.MinDropDownHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MinDropDownWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.MinDropDownWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.DropDownDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.DropDownDirection" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.AutoCloseProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.AutoClose" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.AutoSizeModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.AutoSizeMode" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1DropDownButton" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1DropDownButton" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.IsDropDownOpen">
      <summary>
            Open or close the control drop-down box.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DropDownButton.IsDropDownOpenChanged">
      <summary> 
            Event raised when the <see cref="P:IsDropDownOpen" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.DropDownHeight">
      <summary>
            Gets or sets the height of the drop-down box (set to Double.NaN to size automatically).
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.DropDownWidth">
      <summary>
            Gets or sets the width of the drop-down box (set to Double.NaN to size automatically).
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MaxDropDownHeight">
      <summary>
            Gets or sets maximum height constraint of the drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MaxDropDownWidth">
      <summary>
            Gets or sets maximum width constraint of the drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MinDropDownHeight">
      <summary>
            Gets or sets minimum height constraint of the drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MinDropDownWidth">
      <summary>
            Gets or sets minimum width constraint of the drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.DropDownDirection">
      <summary>
            Specifies the expand direction of the control drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.AutoClose">
      <summary>
            Auto closes the dropdown when the user clicks outside it.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.AutoSizeMode">
      <summary>
            Gets or sets how the content of the poup will be resized as the content size changes.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DropDownButton.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.IsFocused">
      <summary>
            Returns true if the control has the focus.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDown.ShowButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDown.ShowButton" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDown.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDown.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDown.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDown.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDown.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1DropDown" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDown.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1DropDown" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1DropDown.ShowButton">
      <summary>
            Gets/sets if the a<see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDown.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDown.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="T:C1.WPF.PrepareDropDownEventArgs">
      <summary>
            Argument of the event fired before the drop-down box is opened.
            </summary>
    </member>
    <member name="P:C1.WPF.PrepareDropDownEventArgs.DropDownWidth">
      <summary>
            Width of the DropDown, modify to set a custom size, set double.NaN to use default.
            </summary>
    </member>
    <member name="P:C1.WPF.PrepareDropDownEventArgs.DropDownHeight">
      <summary>
            Height of the DropDown, modify to set a custom size, set double.NaN to use default.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MessageBox">
      <summary>
            Displays a message box.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxButton,C1.WPF.C1MessageBoxIcon,System.Action{System.Windows.MessageBoxResult})">
      <summary>
            Displays a message box that has a message, title bar caption, button and icon; and calls back with the result.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="button">A <see cref="T:C1.WPF.C1MessageBoxButton" /> value that specifies which buttons to display.</param>
      <param name="icon">A <see cref="T:C1.WPF.C1MessageBoxIcon" /> value that specifies the icon to display.</param>
      <param name="callback">An <see cref="T:System.Action`1" /> which is called with the result of the message box.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.Action{System.Windows.MessageBoxResult})">
      <summary>
            Displays a message box that has a message and calls back with the result.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="callback">An <see cref="T:System.Action`1" /> which is called with the result of the message box.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,System.Action{System.Windows.MessageBoxResult})">
      <summary>
            Displays a message box that has a message and title bar caption; and calls back with the result.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="callback">An <see cref="T:System.Action`1" /> which is called with the result of the message box.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxButton,System.Action{System.Windows.MessageBoxResult})">
      <summary>
            Displays a message box that has a message, title bar caption and button; and calls back with the result.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="button">A <see cref="T:C1.WPF.C1MessageBoxButton" /> value that specifies which buttons to display.</param>
      <param name="callback">An <see cref="T:System.Action`1" /> which is called with the result of the message box.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxIcon,System.Action{System.Windows.MessageBoxResult})">
      <summary>
            Displays a message box that has a message, title bar caption and icon; and calls back with the result.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="icon">A <see cref="T:C1.WPF.C1MessageBoxIcon" /> value that specifies the icon to display.</param>
      <param name="callback">An <see cref="T:System.Action`1" /> which is called with the result of the message box.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String)">
      <summary>
            Displays a message box that has a message.
            </summary>
      <param name="message">The text to display as a message.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String)">
      <summary>
            Displays a message box that has a message and title bar caption.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxButton)">
      <summary>
            Displays a message box that has a message, title bar caption and button.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="button">A <see cref="T:C1.WPF.C1MessageBoxButton" /> value that specifies which buttons to display.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxIcon)">
      <summary>
            Displays a message box that has a message, title bar caption and icon.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="icon">A <see cref="T:C1.WPF.C1MessageBoxIcon" /> value that specifies the icon to display.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxButton,C1.WPF.C1MessageBoxIcon)">
      <summary>
            Displays a message box that has a message, title bar caption and icon.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="button">A <see cref="T:C1.WPF.C1MessageBoxButton" /> value that specifies which buttons to display.</param>
      <param name="icon">A <see cref="T:C1.WPF.C1MessageBoxIcon" /> value that specifies the icon to display.</param>
    </member>
    <member name="P:C1.WPF.C1MessageBox.WindowStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> that defines the appearance of the window.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBox.ContentStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> that defines the appearance of the window's content.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MessageBoxButton">
      <summary>
            Specifies the buttons that are displayed on a message box.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxButton.OK">
      <summary>
            The message box displays an OK button.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxButton.OKCancel">
      <summary>
            The message box displays OK and Cancel buttons.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxButton.YesNoCancel">
      <summary>
            The message box displays OK and Cancel buttons.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxButton.YesNo">
      <summary>
            The message box displays Yes and No buttons.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MessageBoxIcon">
      <summary>
            Specifies the icon that is displayed by a message box.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.None">
      <summary>
            No icon is displayed.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.Error">
      <summary>
            The message box displays an error icon.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.Warning">
      <summary>
            The message box displays a warning icon.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.Information">
      <summary>
            The message box displays an information icon.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.Question">
      <summary>
            The message box displays an information icon.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MessageBoxContent">
      <summary>
            Control that displays the content of a message box. It's meant to be used inside a <see cref="T:C1.Silverlight.C1Window" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.ChangeVisualStateIcon(System.Boolean)">
      <summary>
            Updates the current visual state of the Icon visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.OKTextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.OKText" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.CancelTextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.CancelText" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.YesTextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.YesText" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.NoTextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.NoText" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.MessageProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.Message" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.ButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.ButtonStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.ButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.Button" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.IconProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.Icon" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1MessageBoxContent" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1MessageBoxContent" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1MessageBoxContent.ButtonClick">
      <summary>
            Event fired when a button is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.OKText">
      <summary>
            Gets or sets the text displayed in the OK button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.CancelText">
      <summary>
            Gets or sets the text displayed in the Cancel button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.YesText">
      <summary>
            Gets or sets the text displayed in the Yes button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.NoText">
      <summary>
            Gets or sets the text displayed in the No button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.Message">
      <summary>
            Gets or sets the message text displayed in the message box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.ButtonStyle">
      <summary>
            Gets or sets the style applied to the message box's buttons.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.Button">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.C1MessageBoxButton" /> specifying which buttons are displayed in the message box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.Icon">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.C1MessageBoxIcon" /> specifying which icon is displayed in the message box.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MessageBoxContent.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.AutoSizeMode">
      <summary>
            Determines how the popup will be resized when the content changes its size.
            </summary>
    </member>
    <member name="F:C1.WPF.AutoSizeMode.GrowAndShrink">
      <summary>
            Change its size according to the content size
            </summary>
    </member>
    <member name="F:C1.WPF.AutoSizeMode.GrowOnly">
      <summary>
            Grows its size when the content is bigger but remains unchanged when the content size is smaller. 
            </summary>
    </member>
    <member name="F:C1.WPF.AutoSizeMode.GrowHorizontally">
      <summary>
            Grows its size horizontally, but it shrink its size vertically if needed.
            </summary>
    </member>
    <member name="T:C1.WPF.C1SplitButton">
      <summary>
            Button which contains another button in the right side which opens a popup.
            </summary>
    </member>
    <member name="M:C1.WPF.C1SplitButton.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1SplitButton" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1SplitButton.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1SplitButton" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.C1SplitButton.Click">
      <summary>
            Occurs when a System.Windows.Controls.Button is clicked.
            </summary>
    </member>
    <member name="T:C1.WPF.C1Window">
      <remarks>
            This control should not be added as the child of another control. It can either be opened as a <see cref="T:System.Windows.Controls.Primitives.Popup" /> by calling the <see cref="M:C1.WPF.C1Window.Show" /> method
            or displayed inside a <see cref="P:C1.WPF.C1Window.Canvas" /> by using the <see cref="P:C1.WPF.C1Window.Canvas" /> property.
            </remarks>
      <summary>
            Shows content in a window inside WPF.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.BringToFront">
      <summary>
            Puts the window in front of all windows.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.CenterOnScreen">
      <summary>
            Centers the window in its container.
            </summary>
      <remarks>
            If the window is not yet loaded the positioning is delayed until it's loaded.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1Window.Show">
      <summary>
            Opens the window.
            </summary>
      <remarks>
            Calling Show makes the window visible, active and in front of other windows.
            A window cannot be reopened after it has been closed. It's possible to hide the window without closing it using <see cref="M:C1.Silverlight.C1Window.Hide" /> or the <see cref="T:System.Windows.Visibility" /> property.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1Window.ShowModal">
      <summary>
            Opens the window as modal.
            </summary>
      <remarks>
            Opens the window over a grayed out layer preventing the user from interacting with anything else until the window is closed.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1Window.Hide">
      <summary>
            Hides the window without closing it.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.Close">
      <summary>
            Closes the window.
            </summary>
      <remarks>
            A window cannot be reopened after it has been closed.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1Window.ChangeVisualStateActive(System.Boolean)">
      <summary>
            Updates the current visual state of the Active visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.ChangeVisualStateWindowState(System.Boolean)">
      <summary>
            Updates the current visual state of the WindowState visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.ChangeVisualStateDrag(System.Boolean)">
      <summary>
            Updates the current visual state of the Drag visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.LeftProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.Left" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.TopProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.Top" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.IsActiveProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.IsActive" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.IsResizableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.IsResizable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ModalBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.ModalBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ShowMaximizeButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.ShowMaximizeButton" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ShowCloseButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.ShowCloseButton" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.DialogResultProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.DialogResult" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ShowMinimizeButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.ShowMinimizeButton" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.WindowStateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.WindowState" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.IsDraggableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.IsDraggable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ButtonBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.ButtonBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ButtonForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.ButtonForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1Window" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1Window" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.C1Window.Closed">
      <summary>
            Event fired when the window is closed by the user or the <see cref="M:C1.WPF.C1Window.Close" /> method.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Window.Closing">
      <summary>
            Event fired when the window is about to close, allows the handler to stop the window from being closed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Window.PositionChanged">
      <summary>
            Fires when the window position changes.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.Canvas">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.C1Window.Canvas" /> used to display the window.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ThemeResources">
      <summary>
            ResourceDictionary that is applied to the <see cref="T:C1.WPF.C1Window" />.
            Typically used with a copy of a C1Theme used somewhere in the app 
            because in Silverlight, themes are not propagated automatically 
            through un-parented <see cref="T:System.Windows.Controls.Primitives.Popup" /> .
            </summary>
      <example>
            C1Window.ThemeResources = myTheme.GetNewResourceDictionary();
            </example>
    </member>
    <member name="P:C1.WPF.C1Window.Left">
      <summary>
            Gets or sets the distance from the left side of the window to the left side of its container.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.Top">
      <summary>
            Gets or sets the distance from the top side of the window to the top side of its container.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.IsActive">
      <summary>
            Gets or sets whether the window is the active window.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Window.IsActiveChanged">
      <summary> 
            Event raised when the <see cref="P:IsActive" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.IsResizable">
      <summary>
            Gets or sets whether the window can be resized and maximized.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ModalBackground">
      <summary>
            Gets or sets the brushed used on the background when showing a modal window.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ShowMaximizeButton">
      <summary>
            Gets or sets whether the maximize button of this window is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ShowCloseButton">
      <summary>
            Gets or sets whether the maximize button of this window is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.DialogResult">
      <summary>
            Gets or sets the dialog result for the window.
            </summary>
      <remarks>
            Setting this property to a value other than "None" automatically closes the window. Clicking the "Close" button on the window caption bar sets DialogResult to <see cref="F:System.Windows.MessageBoxResult.Cancel" /> and then closes the window.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1Window.ShowMinimizeButton">
      <summary>
            Gets or sets whether the minimize button of this window is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.WindowState">
      <summary>
            Gets or sets a value that indicates whether a window is restored, minimized, or maximized.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Window.WindowStateChanged">
      <summary> 
            Event raised when the <see cref="P:WindowState" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.IsDraggable">
      <summary>
            Gets or set whether the window can be dragged.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ButtonBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Background of the buttons inside the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ButtonForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Foreground of the buttons inside the control.
            </summary>
    </member>
    <member name="T:C1.WPF.PositionChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.WPF.C1Window.PositionChanged" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.PositionChangedEventArgs.#ctor(System.Windows.Point)">
      <summary>
            Initializes a new <see cref="T:C1.WPF.PositionChangedEventArgs" />.
            </summary>
      <param name="previousPosition">Value for the <see cref="P:C1.WPF.PositionChangedEventArgs.PreviousPosition" /> property.</param>
    </member>
    <member name="P:C1.WPF.PositionChangedEventArgs.PreviousPosition">
      <summary>
            Gets the previous position of the window.
            </summary>
    </member>
    <member name="T:C1.WPF.C1WindowState">
      <summary>
            Specifies whether a window is minimized, maximized, or floating.
            </summary>
    </member>
    <member name="F:C1.WPF.C1WindowState.Floating">
      <summary>
            The window is floating (neither maximized nor minimized).
            </summary>
    </member>
    <member name="F:C1.WPF.C1WindowState.Maximized">
      <summary>
            The window is maximized.
            </summary>
    </member>
    <member name="F:C1.WPF.C1WindowState.Minimized">
      <summary>
            The window is minimized.
            </summary>
    </member>
    <member name="T:C1.WPF.DropDownDirection">
      <summary>
            Provides the supported expand directions for the <see cref="T:C1.WPF.C1ComboBox" />.
            </summary>
    </member>
    <member name="F:C1.WPF.DropDownDirection.BelowOrAbove">
      <summary>
            Tries to open the drop-down <see cref="T:C1.WPF.C1ComboBox" /> below the header.
            If it is not possible tries to open above it.
            </summary>
    </member>
    <member name="F:C1.WPF.DropDownDirection.AboveOrBelow">
      <summary>
            Tries to open the drop-down <see cref="T:C1.WPF.C1ComboBox" /> above the header.
            If it is not possible tries to open below it.
            </summary>
    </member>
    <member name="F:C1.WPF.DropDownDirection.ForceBelow">
      <summary>
            Forces the drop-down <see cref="T:C1.WPF.C1ComboBox" /> to open below the header.
            </summary>
    </member>
    <member name="T:C1.WPF.PopupUtil">
      <summary>
            Utility methods for popups.
            </summary>
    </member>
    <member name="M:C1.WPF.PopupUtil.Position(System.Windows.Controls.Primitives.Popup,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor)">
      <summary>
            Positions a <see cref="T:System.Windows.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
      <param name="popup">The popup to position.</param>
      <param name="popupAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the Popup.</param>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
      <param name="elementAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the FrameworkElement.</param>
    </member>
    <member name="M:C1.WPF.PopupUtil.Position(System.Windows.Controls.Primitives.Popup,System.Windows.Point)">
      <summary>
            Positions a <see cref="T:System.Windows.Controls.Primitives.Popup" /> in a specified absolute point.
            </summary>
      <param name="popup">The popup to position.</param>
      <param name="point">The popup position.</param>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.Point,System.Double,System.Double,System.Windows.FlowDirection)">
      <summary>
            Calculates the position of a <see cref="T:System.Windows.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
      <param name="positionElement">The element to position.</param>
      <param name="positionAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the element to position.</param>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
      <param name="elementAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
      <param name="elementOffset">The offset (absolute position) of the reference element.</param>
      <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
      <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
      <param name="flowDir">The FlowDirection used for the calculations.</param>
      <returns>The absolute point where the FrameworkElement would be located.</returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.GetPosition(System.Windows.UIElement,System.Windows.Point)">
      <summary>
            return a absolute position according to the relative position of element
            </summary>
      <param name="element">the given element</param>
      <param name="point">the given relative position</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.Point,System.Double,System.Double)">
      <summary>
            Calculates the position of a <see cref="T:System.Windows.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
      <param name="positionElement">The element to position.</param>
      <param name="positionAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the element to position.</param>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
      <param name="elementAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
      <param name="elementOffset">The offset (absolute position) of the reference element.</param>
      <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
      <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
      <returns>The absolute point where the FrameworkElement would be located.</returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.Controls.Primitives.Popup,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor,System.Double,System.Double)">
      <summary>
            Calculates the position of a <see cref="T:System.Windows.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
      <param name="popup">The popup to position.</param>
      <param name="popupAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the Popup.</param>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
      <param name="elementAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the FrameworkElement.</param>
      <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
      <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
      <returns>The absolute point where the popup would be located</returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.Controls.Primitives.Popup,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor)">
      <summary>
            Calculates the position of a <see cref="T:System.Windows.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
      <param name="popup">The popup to position.</param>
      <param name="popupAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the Popup.</param>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
      <param name="elementAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the FrameworkElement.</param>
      <returns>The absolute point where the popup would be located</returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor,System.Double,System.Double)">
      <summary>
            Calculates the position of a <see cref="T:System.Windows.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
      <param name="positionElement">The element to position.</param>
      <param name="positionAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the element to position.</param>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
      <param name="elementAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
      <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
      <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
      <returns>The absolute point where the FrameworkElement would be located.</returns>
    </member>
    <member name="T:C1.WPF.C1ProgressBar">
      <summary>
            Visual element which indicates the progress of an operation.
            </summary>
      <summary>
            C1ProgressBar represents a control that indicates indeterminate progress of an operation.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ProgressBar.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressBar.IsIndeterminateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressBar.IsIndeterminate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressBar.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressBar.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressBar.IndeterminateForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressBar.IndeterminateForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ProgressBar.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ProgressBar" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ProgressBar.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ProgressBar" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ProgressBar.TemplateSettings">
      <summary>
            Gets the settings that can be bound in the template of the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBar.IsIndeterminate">
      <summary>
            Gets or sets a value indicating whether the control is in the indeterminate state.
            
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBar.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBar.IndeterminateForeground">
      <summary>
            Gets or sets a brush used to highlight the dots when the bar is in indeterminate state.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ProgressBarTemplateSettings">
      <summary>
            Seetings of <see cref="T:C1.WPF.C1ProgressBar" /> to be used in the control template.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.IndicatorWidth">
      <summary>
            Gets the width of the indicator.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.EllipseDiameter">
      <summary>
            Gets the template-defined diameter of the Ellipse element that is animated in a templated <see cref="T:C1.WPF.C1ProgressBar" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.EllipseOffset">
      <summary>
            Gets the template-defined offset position of the Ellipse element that is animated in a templated <see cref="T:C1.WPF.C1ProgressBar" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.ContainerAnimationStartPosition">
      <summary>
            Gets the From point of the container animation that animates the <see cref="T:C1.WPF.C1ProgressBar" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.ContainerAnimationEndPosition">
      <summary>
            Gets the target To point of the container animation that animates the <see cref="T:C1.WPF.C1ProgressBar" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.EllipseAnimationWellPosition">
      <summary>
            Gets the stopped point of the Ellipse animation that animates the <see cref="T:C1.WPF.C1ProgressBar" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.EllipseAnimationEndPosition">
      <summary>
            Gets the To point of the Ellipse animation that animates the <see cref="T:C1.WPF.C1ProgressBar" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.IndicatorLengthDelta">
      <summary>
            Gets the indicator length delta, which is useful for repositioning transitions.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ProgressBarTemplateSettings.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ProgressIndicator">
      <summary>
            Visual element which indicates application busy state.
            </summary>
      <summary>
            C1ProgressIndicator represents a control that indicates applycation busy state.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.IsActiveProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.IsActive" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.Header" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.HeaderTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderFontFamilyProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.HeaderFontFamily" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderFontSizeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.HeaderFontSize" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderFontStretchProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.HeaderFontStretch" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderFontStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.HeaderFontStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderFontWeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.HeaderFontWeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderPaddingProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.HeaderPadding" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HorizontalHeaderAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.HorizontalHeaderAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.VerticalHeaderAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.VerticalHeaderAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.HeaderBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ProgressIndicator.HeaderForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ProgressIndicator.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ProgressIndicator" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ProgressIndicator.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ProgressIndicator" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.IsActive">
      <summary>
            Gets or sets a value indicating whether the control is in the active state.
            
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.Header">
      <summary>
            Gets or sets the header of this control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderTemplate">
      <summary>
            Gets or sets the data template used to display the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderFontFamily">
      <summary>
            Gets or sets the font family of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderFontSize">
      <summary>
            Gets or sets the font size of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderFontStretch">
      <summary>
            Gets or sets the font stretch of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderFontStyle">
      <summary>
            Gets or sets the font style of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderFontWeight">
      <summary>
            Gets or sets the font weight of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderPadding">
      <summary>
            Gets or sets the padding of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HorizontalHeaderAlignment">
      <summary>
            Gets or sets the HorizontalContentAlignment of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.VerticalHeaderAlignment">
      <summary>
            Gets or sets the VerticalContentAlignment of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderBackground">
      <summary>
            Gets or sets the background brush of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderForeground">
      <summary>
            Gets or sets the foreground brush of the header.
            </summary>
    </member>
    <member name="T:C1.WPF.MaskFormat">
      <summary>
            Defines how to format the value inside of a <see cref="T:C1.WPF.C1MaskedTextBox" />.
            </summary>
    </member>
    <member name="F:C1.WPF.MaskFormat.IncludePrompt">
      <summary>
            Return text input by the user as well as any instances of the prompt character.
            </summary>
    </member>
    <member name="F:C1.WPF.MaskFormat.IncludeLiterals">
      <summary>
            Return text input by the user as well as any literal characters defined in the mask.
            </summary>
    </member>
    <member name="F:C1.WPF.MaskFormat.IncludePromptAndLiterals">
      <summary>
            Return text input by the user as well as any literal characters defined in the mask and any instances of the prompt character.
            </summary>
    </member>
    <member name="F:C1.WPF.MaskFormat.ExcludePromptAndLiterals">
      <summary>
            Return only text input by the user.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MaskedTextBox">
      <summary>
            Represents a control that uses a mask to prevent users from entering invalid data.
            </summary>
      <summary>
            The C1MaskedTextBox is an editor that uses a mask to prevent end-users from entering invalid data.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TextBoxBase">
      <summary> 
            Base class for all ComponentOne text box controls.
            </summary>
      <remarks>
            Adds <see cref="P:C1.Silverlight.C1TextBoxBase.Watermark" /> and <see cref="P:C1.Silverlight.C1TextBoxBase.IsEnabled" /> properties, 
            as well as styles for mouse over and focus.
            </remarks>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.C1TextProperty">
      <summary>
            Identifies the C1Text dependency property.
            </summary>
      <remarks>
            This property is used as a workaround when a binding needs to be updated on each keystroke.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.RaisePropertyChanged(System.String)">
      <summary>
            Raises the property changed event.
            </summary>
      <param name="propertyName">Name of the property that changed.</param>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnIsFocusedChanged(System.Boolean)">
      <summary>
            Callback called when the <see cref="P:IsFocused" /> property changes.
            </summary>
      <param name="oldValue">The previous value of IsFocused.</param>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnTextChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Called immediately after the Text property changes.
            </summary>
      <param name="e">Provides data about the change.</param>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.UpdateIsWatermarked">
      <summary>
            Derived classes can call this method when the <see cref="P:IsWatermarked" /> state is changed from their point of view.
            This method forces the IsWatermarked state to be updated without clearing the Text property.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
            Called when <see cref="E:System.Windows.UIElement.KeyDown" /> event occurs.
            </summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.ChangeVisualStateWatermark(System.Boolean)">
      <summary>
            Updates the current visual state of the Watermark visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.WatermarkProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.Watermark" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.SelectOnFocusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.SelectOnFocus" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TextBoxBase" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TextBoxBase" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.C1TextBoxBase.KeyDown">
      <summary>
            Occurs when a keyboard key is pressed while the <see cref="T:System.Windows.UIElement" /> has focus.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.C1Text">
      <summary>
            Get or set the C1Text property.
            This property is used as a workaround when a binding needs to be updated on each keystroke.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TextBoxBase.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.IsWatermarked">
      <summary>
            Gets a value indicating whether this textbox is watermarked.
            </summary>
      <value>
        <c>true</c> if this textbox is watermarked; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.Watermark">
      <summary>
            Gets or sets the content of the watermark.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.IsFocused">
      <summary>
            Returns true if the control has the focus.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.SelectOnFocus">
      <summary>
            Gets or sets the condition under which all control text is selected when the control receives focus.
            </summary>
      <remarks>
            The default value is OnDefaultSelection.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.CultureProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MaskedTextBox.Culture" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1MaskedTextBox.UpdateValue">
      <summary>
            For Silverlight version of the control, forces <see cref="T:C1.WPF.C1MaskedTextBox" /> to update its 
            <see cref="P:C1.WPF.C1MaskedTextBox.Value" /> and Text properties when the control is not loaded. 
            Does nothing in WPF.
            </summary>
      <remarks>
            In Silverlight, when <see cref="T:C1.WPF.C1MaskedTextBox" /> is not loaded yet or not included in a visual
            tree at all, it doesn't get notifications about the Text property changes and can't update its
            <see cref="P:C1.WPF.C1MaskedTextBox.Value" /> and Text properties at the proper time therefore, this behavior is inherited
            from the base TextBox control. If you need to get correct values of these properties while the control
            is not loaded, call the <see cref="M:C1.WPF.C1MaskedTextBox.UpdateValue" /> method after you changed the properties that affect
            a text formatting, such as <see cref="P:C1.WPF.C1MaskedTextBox.Mask" />, <see cref="P:C1.WPF.C1MaskedTextBox.TextMaskFormat" /> and so on.
            <para>
            This method does nothing when Silverlight version of the control is loaded, as well as in the WPF
            version of the control at any moment independently of its load state.
            </para></remarks>
    </member>
    <member name="M:C1.WPF.C1MaskedTextBox.OnMaskedTextChanged(C1.WPF.MaskedTextChangedEventArgs)">
      <summary>
            Occurs when consistent content that conforms to the <see cref="P:C1.WPF.C1MaskedTextBox.Mask" /> changes in the text box.
            </summary>
      <see cref="E:MaskedTextChanged" />
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.ValueProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MaskedTextBox.Value" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.MaskProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MaskedTextBox.Mask" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.PromptCharProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MaskedTextBox.PromptChar" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.TextMaskFormatProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MaskedTextBox.TextMaskFormat" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.ReplaceModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MaskedTextBox.ReplaceMode" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1MaskedTextBox.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1MaskedTextBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.Culture">
      <summary>
            Sets the culture used to display the value in the <see cref="T:C1.WPF.C1MaskedTextBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.IsValid">
      <summary>
            Gets a value that determines whether the control contains a valid entry.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MaskedTextBox.MaskedTextChanged">
      <summary>
            Occurs when consistent content that conforms to the <see cref="P:C1.WPF.C1MaskedTextBox.Mask" /> changes in the text box.
            </summary>
      <remarks>
            Just after the Text property has beed changed via user input or code, 
            the <see cref="T:C1.WPF.C1MaskedTextBox" /> updates the text again in order to make it consistent with
            the <see cref="P:C1.WPF.C1MaskedTextBox.Mask" />. As a result, the TextChanged event can be triggered twice on each user
            input. In contrast to this, the <see cref="E:C1.WPF.C1MaskedTextBox.MaskedTextChanged" /> is triggered only when Text is
            updated with a value that conforms to the <see cref="P:C1.WPF.C1MaskedTextBox.Mask" />.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.Value">
      <summary>
            Gets or sets the formatted content of the control as specified by the <see cref="P:C1.WPF.C1MaskedTextBox.TextMaskFormat" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.Mask">
      <summary>
            Gets or sets the input mask.
            </summary>
      <remarks>
        <para>The mask consists of a string that determines what class of character is acceptable
            at each input position.</para>
        <para>Valid mask characters are:</para>
        <para>
          <b>0</b>    Digit (0-9)</para>
        <para>
          <b>9</b>    Digit or space</para>
        <para>
          <b>#</b>    Digit, space, or sign (+/-)</para>
        <para>
          <b>L</b>    Letter</para>
        <para>
          <b>?</b>    Letter or space</para>
        <para>
          <b>A</b>    Letter or digit</para>
        <para>
          <b>a</b>    Letter, digit, or space</para>
        <para>
          <b>&amp;</b>    Any character</para>
        <para>
          <b>.</b>    Localized decimal symbol</para>
        <para>
          <b>,</b>    Localized thousand separator</para>
        <para>
          <b>:</b>    Localized time separator</para>
        <para>
          <b>/</b>    Localized date separator</para>
        <para>Other characters are treated as literals. They are displayed in the control but cannot
            be edited.</para>
        <para>For example, the mask "000-0000" causes the control to accept only digits at every
            position except the third, which always contains a dash.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.PromptChar">
      <summary>
            Gets or sets the character used to show spaces where user is supposed to type.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.TextMaskFormat">
      <summary>
            Gets or sets a value that determines whether literals and prompt characters are included in the <see cref="P:C1.WPF.C1MaskedTextBox.Value" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.ReplaceMode">
      <summary>
            Gets or sets a value indicating whether new characters will be inserted or replace existing ones while you are typing.
            </summary>
      <remarks>
            Set this property value to true if typing characters should be inserted at an insertion point position; otherwise, set it to false if typing characters should overwrite existing characters at an insertion point position.
            </remarks>
    </member>
    <member name="T:C1.WPF.MaskedTextChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.WPF.C1MaskedTextBox.MaskedTextChanged" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.MaskedTextChangedEventArgs.#ctor(System.String,System.String)">
      <summary>
            Creates an instance of the <see cref="T:C1.WPF.MaskedTextChangedEventArgs" /> class.
            </summary>
      <param name="newText">
            The new text.
            </param>
      <param name="oldText">
            The old text.
            </param>
    </member>
    <member name="P:C1.WPF.MaskedTextChangedEventArgs.OldText">
      <summary>
            Gets an old text.
            </summary>
    </member>
    <member name="P:C1.WPF.MaskedTextChangedEventArgs.NewText">
      <summary>
            Gets a new text.
            </summary>
    </member>
    <member name="T:C1.WPF.MaskedTextChangedEventHandler">
      <summary>
            Represents the method that handles the <see cref="E:C1.WPF.C1MaskedTextBox.MaskedTextChanged" /> event.
            </summary>
      <param name="sender">
            The event sender.
            </param>
      <param name="e">
            The event data.
            </param>
    </member>
    <member name="T:C1.WPF.C1NumericBox">
      <remarks>
        <list>
          <item>
            <see cref="P:C1.WPF.C1NumericBox.Format" /> property supports standard and custom formats.</item>
          <item>
            <see cref="P:C1.WPF.C1NumericBox.Watermark" /> property shows help text when the control is empty.</item>
          <item>
            <see cref="P:C1.WPF.C1NumericBox.AllowNull" /> property allows binding to and displaying null values.</item>
        </list>
            When the control is empty, or bound to a null value, the <see cref="P:C1.WPF.C1NumericBox.Value" /> property returns <b>double.NaN</b>.
            </remarks>
      <summary>
            The C1NumericBox control is a numeric editor that allows you to display and edit numeric values in many formats.
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.CultureProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Culture" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.OnValueChanged(C1.WPF.PropertyChangedEventArgs{System.Double})">
      <summary>
            Raises the <see cref="E:C1.WPF.C1NumericBox.ValueChanged" /> event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.C1NumericBox.Select(System.Int32,System.Int32)">
      <summary>
            Selects the text specified by start and length.
            </summary>
      <param name="start">Start of the selection.</param>
      <param name="length">Length of the selection.</param>
    </member>
    <member name="M:C1.WPF.C1NumericBox.ChangeVisualStateButtonsVisibility(System.Boolean)">
      <summary>
            Updates the current visual state of the ButtonsVisibility visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.FormatProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Format" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.MaximumProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Maximum" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.MinimumProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Minimum" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.IncrementProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Increment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ValueProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Value" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ShowButtonsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.ShowButtons" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.IsReadOnlyProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.IsReadOnly" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.TextAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.TextAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectionStartProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.SelectionStart" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectionLengthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.SelectionLength" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.AllowNullProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.AllowNull" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.DelayProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Delay" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.IntervalProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Interval" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.WatermarkProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Watermark" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.HandleUpDownKeysProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.HandleUpDownKeys" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.RangeValidationModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.RangeValidationMode" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectOnFocusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.SelectOnFocus" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectionBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.SelectionBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectionForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.SelectionForeground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.CaretBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.CaretBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ButtonBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.ButtonBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ButtonForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.ButtonForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1NumericBox" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1NumericBox.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Culture">
      <summary>
            Sets the culture used to display the value in the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="E:C1.WPF.C1NumericBox.ValueChanged">
      <summary>
            Fires when the <see cref="P:C1.WPF.C1NumericBox.Value" /> property changes.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Format">
      <summary>
            Gets or sets the value for the Format of the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
      <remarks>
            The property accepts any standard or custom numeric format supported by the String.Format method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Maximum">
      <summary>
            Gets or sets the maximum value allowed for the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Minimum">
      <summary>
            Gets or sets the minimum value allowed for the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Increment">
      <summary>
            Gets or sets the increment applied when the user pressed the up/down arrow keys.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Value">
      <summary>
            Gets or sets the numeric value in the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
      <remarks>
            Null values are represented by the <b>Value</b> property as <b>double.NaN</b>. See also the <see cref="P:C1.WPF.C1NumericBox.AllowNull" /> property.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1NumericBox.ShowButtons">
      <summary>
            Shows or hides the buttons for Increment or Decrement.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.IsReadOnly">
      <summary>
            Gets or sets the value that determines if the <see cref="T:C1.WPF.C1NumericBox" /> is read-only.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.TextAlignment">
      <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.SelectionStart">
      <summary>
            Gets or sets the starting position of the text selected in the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.SelectionLength">
      <summary>
            Gets or sets the number of characters in the current selection in the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.AllowNull">
      <summary>
            Gets or sets whether the user can enter nulls values.
            </summary>
      <remarks>
            Null values are encoded in the <b>Value</b> property as <b>double.NaN</b>.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Delay">
      <summary>
            Gets or sets the delay for the Increase and Decrease buttons.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Interval">
      <summary>
            Gets or sets the interval for the Increase and Decrease buttons.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Watermark">
      <summary>
            Gets or sets the watermark content displayed when the control is empty.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.HandleUpDownKeys">
      <summary>
            Gets or sets If the control handles the Up / Down / PageUp / PageDown keys.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.RangeValidationMode">
      <summary>
            Gets or sets the mode used to validate the range between Minimum and Maximum.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.SelectOnFocus">
      <summary>
            Gets or sets the condition under which all control text is selected when the control receives focus.
            </summary>
      <remarks>
            The default value is OnDefaultSelection.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1NumericBox.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="E:C1.WPF.C1NumericBox.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.IsFocused">
      <summary>
            Returns true if the control has the focus.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.CaretBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> of the blinking cursor of an input control.  When .NET Framework is v3.5, 'CaretBrush' takes no effect.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.ButtonBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Background of the buttons inside the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.ButtonForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Foreground of the buttons inside the control.
            </summary>
    </member>
    <member name="T:C1.WPF.RangeValidationMode">
      <summary>
            Mode of validation of the range between Maximum and Minimum of <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="F:C1.WPF.RangeValidationMode.Always">
      <summary>
            This mode doesn't allow entering out of range values.
            </summary>
    </member>
    <member name="F:C1.WPF.RangeValidationMode.AlwaysTruncate">
      <summary>
            This mode doesn't allow entering out of range values.
            The value will be truncated if the limits are exceeded.
            </summary>
    </member>
    <member name="F:C1.WPF.RangeValidationMode.OnLostFocus">
      <summary>
            The value will be truncated on lost focus.
            </summary>
    </member>
    <member name="T:C1.WPF.C1RangeSlider">
      <summary>
            The C1RangeSlider control enables the end-user to select two values from a range by moving two Thumb controls along a track.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnUpperValueChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1RangeSlider.UpperValueChanged" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnLowerValueChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1RangeSlider.LowerValueChanged" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnValueChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1RangeSlider.ValueChanged" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.UpdateTrackLayout">
      <summary> 
            This method will take the current min, max, and value to 
            calculate and layout the current control measurements.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.MaximumProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.Maximum" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.MinimumProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.Minimum" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.LowerValueProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.LowerValue" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.UpperValueProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.UpperValue" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.ValueChangeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.ValueChange" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.DelayProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.Delay" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.IntervalProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.Interval" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.SmallValueChangeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.SmallValueChange" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.RangeSliderBarVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.RangeSliderBarVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.IsFocusedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.IsFocused" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1RangeSlider" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1RangeSlider" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.UpperValueChanged">
      <summary>
            Fires when the <see cref="P:C1.WPF.C1RangeSlider.UpperValue" /> property changes.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.LowerValueChanged">
      <summary>
            Fires when the <see cref="P:C1.WPF.C1RangeSlider.LowerValue" /> property changes.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.ValueChanged">
      <summary>
            Fires when any of the properties: LowerValue or UpperValue changes.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Maximum">
      <summary>
            Gets or sets the maximum possible value of the range element.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Minimum">
      <summary>
            Gets or sets the minimum possible value of the range element.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.LowerValue">
      <summary>
            Gets or sets the current lower magnitude of the range control. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.UpperValue">
      <summary>
            Gets or sets the current upper magnitude of the range control. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.ValueChange">
      <summary>
            Gets or sets a value to be added to or subtracted from the Upper/LowerValue of a RangeBase control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Delay">
      <summary>
            Gets or sets the time, in milliseconds, the RepeatButtons (at the left of the LowerThumb and at the right of the UpperThumb) wait when they are pressed before they start repeating the click action.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Interval">
      <summary>
            Gets or sets the time, in milliseconds, between repetitions of the click action, as soon as repeating starts (for the RepeatButtons at the left of the LowerThumb and at the right of the UpperThumb).
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Orientation">
      <summary>
            The Orientation of the C1RangeSlider.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.OrientationChanged">
      <summary> 
            Event raised when the <see cref="P:Orientation" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.SmallValueChange">
      <summary>
            Gets or sets a value to be added to or subtracted from the Upper/LowerValue of a RangeBase control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.RangeSliderBarVisibility">
      <summary>
            Gets or sets a value that indicates whether C1RangeSlider bar should be displayed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.IsFocused">
      <summary>
            Returns true if the control has the focus.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="T:C1.WPF.SelectOnFocusCondition">
      <summary>
            Defines the possible conditions that cause selection of an entire control text when control receives focus.
            </summary>
    </member>
    <member name="F:C1.WPF.SelectOnFocusCondition.Never">
      <summary>
            Never select a text.
            </summary>
    </member>
    <member name="F:C1.WPF.SelectOnFocusCondition.Always">
      <summary>
            Always select a text.
            </summary>
    </member>
    <member name="F:C1.WPF.SelectOnFocusCondition.OnDefaultSelection">
      <summary>
            Select text only if the both SelectionStart and SelectionLength properties are set to zero.
            </summary>
    </member>
    <member name="T:C1.WPF.C1HyperPanel">
      <summary>
            Arranges child elements in a stack and applies a dynamic zoom effect to the elements near the mouse.
            </summary>
      <remarks>
        <para>The <see cref="T:C1.Silverlight.C1HyperPanel" /> is similar to a <see cref="T:System.Windows.Controls.StackPanel" />, except is applies
            a dynamic zoom effect as the user moves the mouse over the panel. Child elements near the mouse appear
            in their normal size, and elements away from the mouse are scaled down and appear smaller.</para>
        <para>Use the <see cref="P:C1.Silverlight.C1HyperPanel.Distribution" /> and <see cref="P:C1.Silverlight.C1HyperPanel.MinElementScale" /> properties to control the 
            intensity of the zoom effect.</para>
        <para>Use the <see cref="P:C1.Silverlight.C1HyperPanel.ApplyOpacity" /> property to make elements far from the mouse appear faded.</para>
        <para>Use <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> and <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" />
            properties on the child elements to determine how they should be aligned within the <see cref="T:C1.Silverlight.C1HyperPanel" />.</para>
        <para>In order to apply the zooming effect efficiently, the <see cref="T:C1.Silverlight.C1HyperPanel" /> takes over the
            <see cref="P:System.Windows.UIElement.RenderTransform" /> property of its child elements. If you want to apply your own
            transforms to the child elements, place them in another panel before adding them to the 
            <see cref="T:C1.Silverlight.C1HyperPanel" />.</para>
        <para>Note that some native Silverlight elements (such as the <see cref="T:System.Windows.Controls.Button" /> control) do not
            always auto-size correctly. You should set the width and height of these elements explicitly before
            adding them to the <see cref="T:C1.Silverlight.C1HyperPanel" />.</para>
      </remarks>
    </member>
    <member name="M:C1.WPF.C1HyperPanel.MeasureOverride(System.Windows.Size)">
      <summary>
            Measures the size in layout required for child elements and determines a size for the element. 
            </summary>
      <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
      <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
    </member>
    <member name="M:C1.WPF.C1HyperPanel.ArrangeOverride(System.Windows.Size)">
      <summary>
            Positions child elements and determines a size for the element. 
            </summary>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
      <returns>The actual size used.</returns>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.DistributionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.Distribution" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.ApplyOpacityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.ApplyOpacity" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.CenterProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.Center" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.MinElementScaleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.MinElementScale" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.HorizontalContentAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.HorizontalContentAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.VerticalContentAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.VerticalContentAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1HyperPanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1HyperPanel" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.Orientation">
      <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.Distribution">
      <summary>
            Gets or sets a value between 0.1 and 1.0 that controls how much zooming should be applied to elements near the center.
            </summary>
      <remarks>
        <para>Small values increase the zoom effect. Elements far from the mouse appear much smaller than elements near the mouse.</para>
        <para>Large values decrease the zoom effect. Elements far from the mouse appear only slightly smaller than elements near the mouse.</para>
        <para>You can limit the amount by which elements far from the mouse are zoomed out by setting the <see cref="P:C1.WPF.C1HyperPanel.MinElementScale" />.For example, setting <see cref="P:C1.WPF.C1HyperPanel.MinElementScale" /> to 0.5 prevents any child elements from being reduced to less than half their original size.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.ApplyOpacity">
      <summary>
            Gets or sets a value between zero and one that determines the minimum scale to be applied to elements when they are away from the center.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.Center">
      <summary>
            Gets or sets the center of the <see cref="T:C1.WPF.C1HyperPanel" /> as a percentage of the control size.
            </summary>
      <remarks>
        <para>Elements near the center appear larger than the others.</para>
        <para>This value is updated automatically as the mouse moves.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.MinElementScale">
      <summary>
            Gets or sets a value between zero and one that determines the minimum scale to be applied to elements when they are away from the center.
            </summary>
      <remarks>
        <para>This property is useful when the <see cref="P:C1.WPF.C1HyperPanel.Distribution" /> property is set to small values, and you want to prevent child elements from becoming too small when they are away from the mouse.</para>
        <para>For example, setting this property to 0.5 prevents any child elements from being reduced to less than half their original size.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.HorizontalContentAlignment">
      <summary>
            Gets or sets the horizontal alignment of the panel's content.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.VerticalContentAlignment">
      <summary>
            Gets or sets the vertical alignment of the panel's content.
            </summary>
    </member>
    <member name="T:C1.WPF.C1RadialColorItem">
      <summary>
            An item for color selection inside a C1RadialMenu control.
            </summary>
    </member>
    <member name="T:C1.WPF.C1RadialMenuItem">
      <summary>
            Represents a selectable item inside a C1RadialMenu control.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.OnClick(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to a click action by raising a Click event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.OnChecked(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to a check item action by raising a Checked event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.OnUnchecked(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to an uncheck item action by raising a Unchecked event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.OnHeaderChanged(System.Object)">
      <summary>
            Called when the value of the <see cref="P:Header" /> property changes.
            </summary>
      <param name="oldValue">The old value.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.ChangeVisualStateHighlighted(System.Boolean)">
      <summary>
            Updates the current visual state of the Highlighted visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.AngleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.Angle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.ExpandAreaThicknessProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.ExpandAreaThickness" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.CenterPointProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.CenterPoint" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.OuterArcProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.OuterArc" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.ExpandArcProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.ExpandArc" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.CheckArcProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.CheckArc" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.CommandProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.Command" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.CommandParameterProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.CommandParameter" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.GroupNameProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.GroupName" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.HeaderProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.Header" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.HeaderTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.AccentBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.AccentBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IconProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.Icon" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IconStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.IconStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IsCheckableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.IsCheckable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IsCheckedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.IsChecked" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IsHighlightedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.IsHighlighted" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IsPointerOverProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.IsPointerOver" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.TextAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.TextAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.TextDecorationsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.TextDecorations" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.TextWrappingProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.TextWrapping" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.ToolTipProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.ToolTip" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.ShowSelectedItemProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.ShowSelectedItem" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.SelectedItemOptionsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.SelectedItemOptions" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.SelectedIndexProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.SelectedIndex" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.AutoSelectProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.AutoSelect" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IsSelectableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.IsSelectable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.SectorCountProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.SectorCount" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.DisplayIndexProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.DisplayIndex" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.ItemContainerStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.ItemContainerStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.HeaderBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.HeaderBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.HeaderForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenuItem.HeaderForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1RadialMenuItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1RadialMenuItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.C1RadialMenuItem.Click">
      <summary>
            Occurs when the <see cref="T:C1.WPF.C1RadialMenuItem" /> is clicked. 
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenuItem.Checked">
      <summary>
            Occurs when a C1RadialMenuItem is checked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenuItem.Unchecked">
      <summary>
            Occurs when a C1RadialMenuItem is unchecked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.Index">
      <summary>
            Gets the index of this <see cref="T:C1.WPF.C1RadialMenuItem" /> in its parent items collection.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.HasItems">
      <summary>
            Gets a value that indicates whether the ItemsControl contains items.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.HasContent">
      <summary>
            Gets a value that indicates whether the <see cref="T:C1.WPF.C1RadialMenuItem" /> contains sub-items or any other content.
            </summary>
      <remarks>This property returns false for empty items, used as separators.</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.ParentItem">
      <summary>
            Gets the <see cref="T:System.Windows.Controls.ItemsControl" /> that is the parent of this item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.Menu">
      <summary>
            Identifies the parent <see cref="T:C1.WPF.C1RadialMenu" /> of this item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.Angle">
      <summary>
            Gets or sets the item angle.
            </summary>
      <remarks>
            This property is set by the C1RadialPanel panel.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.ExpandAreaThickness">
      <summary>
            Gets or sets the thickness of expand area.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.CenterPoint">
      <summary>
            Gets the coordinates of the circle center, which can be used in xaml to draw circle sector, representing the current C1RadialMenuItem.
            </summary>
      <remarks>
            This property is set by the C1RadialPanel panel.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.OuterArc">
      <summary>
            Gets the definition of outer arc segment which can be used in xaml to draw circle sector, representing the current C1RadialMenuItem.
            </summary>
      <remarks>
            This property is set by the C1RadialPanel panel.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.ExpandArc">
      <summary>
            Gets the definition of expand area arc segment.
            </summary>
      <remarks>
            This property is set by the C1RadialPanel panel.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.CheckArc">
      <summary>
            Gets the definition of check arc segment.
            </summary>
      <remarks>
            This property is set by the C1RadialPanel panel.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.Command">
      <summary>
            Gets or sets the command to invoke when this button is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.CommandParameter">
      <summary>
            Gets or sets the parameter to pass to the Command property.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.GroupName">
      <summary>
            Gets or sets the name that specifies which MenuItems are mutually exclusive (when checkable).
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.Header">
      <summary>
            Gets or sets the header of this control.
            </summary>
      <remarks>
            This property will be displayed in the tooltip as well if ToolTip property is not set.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.HeaderTemplate">
      <summary>
            Gets or sets the data template used to display the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.AccentBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to color small menu parts.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.Icon">
      <summary>
            Gets or sets the icon that appears in a C1RadialMenuItem.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.IconStyle">
      <summary>
            Gets or sets the style used to display the icon.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.IsCheckable">
      <summary>
            Gets a value that indicates whether a C1RadialMenuItem can be checked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.IsChecked">
      <summary>
            Gets or sets a value that indicates whether the C1RadialMenuItem is checked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.IsHighlighted">
      <summary>
            Gets a value that indicates whether a C1RadialMenuItem is highlighted.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.IsPointerOver">
      <summary>
            Gets a value indicating whether the pointer is located over this element.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenuItem.IsPointerOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsPointerOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.TextAlignment">
      <summary>
            Gets or sets a value that indicates the horizontal alignment of text content in the Header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.TextDecorations">
      <summary>
            Gets or sets a TextDecorationCollection that contains the effects to apply to the text of the Header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.TextWrapping">
      <summary>
            Gets or sets a value that indicates how any text should be wrapped in the Header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.ToolTip">
      <summary>
            Gets or sets the tooltip of this control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.ShowSelectedItem">
      <summary>
            Determines whether icon, header and check sign of the selected sub-item should be displayed for the curren item.
            </summary>
      <remarks>
            This property only makes sense for items with sub-items.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.SelectedItemOptions">
      <summary>
            Determines what part of the selected sub-item should be displayed for the curren item.
            </summary>
      <remarks>
            This property only makes sense for items with sub-items when the <see cref="P:C1.WPF.C1RadialMenuItem.ShowSelectedItem" /> property is true.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.SelectedIndex">
      <summary>
            Gets or sets the index of the curerntly selected sub-item.
            </summary>
      <remarks>
            This property only makes sense for items with sub-items.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.AutoSelect">
      <summary>
            Determines whether C1RadialMenuItem should update SelectedIndex property acccording to the end-user selection.
            </summary>
      <remarks>
            This property only makes sense for items with sub-items.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.IsSelectable">
      <summary>
            Determines whether this item should be honored when SelectedIndex property is changed acccording to the end-user selection.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.SectorCount">
      <summary>
            Gets or sets the number of sectors which should be displayed in menu.
            </summary>
      <remarks>
            This property only makes sense if item has subitems. If this property is set to -1, the number of sectors will be defined by the number of menu items.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.DisplayIndex">
      <summary>
            Gets or sets the zero-based index of this item which should be used to layout this item in the parent submenu.
            </summary>
      <remarks>
            The default value is -1 and the actual item index is defined by its place in the parent Items collection.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.ItemContainerStyle">
      <summary>
            Gets or sets the item container style used to display the item container .
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.HeaderBackground">
      <summary>
            Gets or sets the background brush of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.HeaderForeground">
      <summary>
            Gets or sets the foreground brush of the header.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialColorItem.OnClick(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to a click action by raising a Click event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="F:C1.WPF.C1RadialColorItem.BrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialColorItem.Brush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialColorItem.ColorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialColorItem.Color" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialColorItem.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialColorItem.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialColorItem.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialColorItem.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialColorItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1RadialColorItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialColorItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1RadialColorItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialColorItem.HasContent">
      <summary>
            Gets a value that indicates whether the <see cref="T:C1.WPF.C1RadialColorItem" /> contains sub-items or any other content.
            </summary>
      <remarks>This property returns false for empty items, used as separators.</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialColorItem.Index">
      <summary>
            Gets the index of this <see cref="T:C1.WPF.C1RadialColorItem" /> in its parent items collection.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialColorItem.Brush">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.C1RadialColorItem.Brush" /> property.
            </summary>
      <remarks>
            This property will be set automatically if application sets the <see cref="P:C1.WPF.C1RadialColorItem.Color" /> property.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialColorItem.Color">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.C1RadialColorItem.Color" /> property.
            </summary>
      <remarks>
            This property will be set automatically if application sets the <see cref="P:C1.WPF.C1RadialColorItem.Brush" /> property.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialColorItem.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialColorItem.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="T:C1.WPF.C1RadialMenu">
      <summary>
            The C1RadialMenu control represents a touch-friendly alternative to the traditional context menu.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnClosing(System.ComponentModel.CancelEventArgs)">
      <summary>
            Raises the <see cref="E:Closing" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnOpening(System.ComponentModel.CancelEventArgs)">
      <summary>
            Raises the <see cref="E:Opening" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnOpened(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Opened" /> event.
            </summary>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnClosed(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Closed" /> event.
            </summary>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnCollapsing(System.ComponentModel.CancelEventArgs)">
      <summary>
            Raises the Collapsing event.
            </summary>
      <param name="e">Provides data for CancelEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnCollapsed(System.EventArgs)">
      <summary>
            Raises the Collapsed event.
            </summary>
      <param name="e">Provides data for EventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnExpanding(System.ComponentModel.CancelEventArgs)">
      <summary>
            Raises the Expanding event.
            </summary>
      <param name="e">Provides data for CancelEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnExpanded(System.EventArgs)">
      <summary>
            Raises the Expanded event.
            </summary>
      <param name="e">Provides data for EventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemClick(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1RadialMenu.ItemClick" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemOpening(C1.WPF.CancelSourceEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1RadialMenu.ItemOpening" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemOpened(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1RadialMenu.ItemOpened" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemClosing(C1.WPF.CancelSourceEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1RadialMenu.ItemClosing" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemClosed(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1RadialMenu.ItemClosed" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemChecked(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1RadialMenu.ItemChecked" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemUnchecked(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1RadialMenu.ItemUnchecked" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnAutoCollapseChanged(System.Boolean)">
      <summary>
            Called when the property AutoCollapse is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.Show(System.Windows.FrameworkElement,System.Windows.Point)">
      <summary>
            Displays the radial menu at the specified position. 
            </summary>
      <remarks>This method shows menu in the collapsed state.</remarks>
      <param name="placementTarget">Specifies the control to which the context menu
            is associated.</param>
      <param name="offset">The offset coordinates where the context menu will be displayed.
            These coordinates are relative to the control specified in the control parameter.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.Show(System.Windows.FrameworkElement,System.Windows.Point,System.Boolean)">
      <summary>
            Displays the radial menu at the specified position. 
            </summary>
      <param name="placementTarget">Specifies the control to which the context menu
            is associated.</param>
      <param name="offset">The offset coordinates where the context menu will be displayed.
            These coordinates are relative to the control specified in the control parameter.</param>
      <param name="expand">Specifies whhether menu should be expanded at opening.</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.Hide">
      <summary>
            Hides the menu.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.Expand">
      <summary>
            Expands the menu.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.Collapse">
      <summary>
            Collapses the menu.
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.CurrentItemProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.CurrentItem" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.GoBack">
      <summary>
            Navigates the <see cref="T:C1.WPF.C1RadialMenu" /> control one level up as if end-user clicked Back button.
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.AutoCollapseProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.AutoCollapse" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.ExpandAreaThicknessProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.ExpandAreaThickness" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.AccentBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.AccentBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.IconProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.Icon" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.ItemIconStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.ItemIconStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.ColorItemStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.ColorItemStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.RadialSliderStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.RadialSliderStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.NavigationButtonRelativeSizeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.NavigationButtonRelativeSize" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.NavigationButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.NavigationButtonStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.OffsetProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.Offset" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.PlacementTargetProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.PlacementTarget" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.ToolTipPlacementProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.ToolTipPlacement" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.ToolTipTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.ToolTipTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.ShowToolTipProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.ShowToolTip" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.SectorCountProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.SectorCount" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.BackIconProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialMenu.BackIcon" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1RadialMenu" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1RadialMenu" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Closing">
      <summary>
            Occurs when the C1RadialMenu is Closing.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Opening">
      <summary>
            Occurs when the C1RadialMenu is Opening.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Opened">
      <summary>
            Occurs when the C1RadialMenu opens.
             </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Closed">
      <summary>
            Occurs when the C1RadialMenu closes.
             </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Collapsing">
      <summary>
            Occurs when the C1RadialMenu is collapsing.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Collapsed">
      <summary>
            Occurs when the C1RadialMenu is collapsed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Expanding">
      <summary>
            Occurs when the C1RadialMenu is expanding.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Expanded">
      <summary>
            Occurs when the C1RadialMenu is expanded.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemClick">
      <summary>
            Occurs when a C1RadialMenuItem is clicked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemOpening">
      <summary>
            Occurs when a C1RadialMenuItem is opening.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemOpened">
      <summary>
            Occurs when a C1RadialMenuItem is opened.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemClosing">
      <summary>
            Occurs when a C1RadialMenuItem is closing.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemClosed">
      <summary>
            Occurs when a C1RadialMenuItem is closed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemChecked">
      <summary>
            Occurs when a C1RadialMenuItem is checked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemUnchecked">
      <summary>
            Occurs when a C1RadialMenuItem is unchecked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.HasItems">
      <summary>
            Gets a value that indicates whether the ItemsControl contains items.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.IsCollapsed">
      <summary>
            Gets a value that indicates whether the menue is collapsed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.RootElement">
      <summary>
            Gets the root visible element of the <see cref="T:C1.WPF.C1RadialMenu" /> control. 
            </summary>
      <remarks>If you need to show popup relative to the C1RadialMenu control, use RootElement as PlacementTarget.</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.CurrentItem">
      <summary>
            Gets the C1RadialMenu or C1RadialMenuItem control which items are currently visible in the <see cref="T:C1.WPF.C1RadialMenu" /> UI.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.AutoCollapse">
      <summary>
            Gets or sets a value indicating if the menu will auto collapse when the user clicks outside of it.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.ExpandAreaThickness">
      <summary>
            Gets or sets the thickness of expand area.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.AccentBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to color small menu parts.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.Icon">
      <summary>
            Gets or sets the icon that appears in a C1RadialMenu.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.ItemIconStyle">
      <summary>
            Gets or sets the style used to display the icon.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.ColorItemStyle">
      <summary>
            Gets or sets the style used to display the C1RadialColorItem.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.RadialSliderStyle">
      <summary>
            Gets or sets the style used to display the C1RadialSlider.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.NavigationButtonRelativeSize">
      <summary>
            Gets or sets the navigation button size relative to the menu size.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.NavigationButtonStyle">
      <summary>
            Represents the style to apply to navigation button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.Offset">
      <summary>
            Gets or sets the relative offset of the C1RadialMenu relative to the pointer position.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.PlacementTarget">
      <summary>
            Gets or sets the FrameworkElement relative to which the C1RadialMenu is positioned when it opens. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.ToolTipPlacement">
      <summary>
            Gets or sets the tooltip placement.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.ToolTipTemplate">
      <summary>
            Gets or sets the data template used to display the tooltip.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.ShowToolTip">
      <summary>
            Determines whether the control should display tooltips for individual items.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.SectorCount">
      <summary>
            Gets or sets the number of sectors which should be displayed in menu.
            </summary>
      <remarks>
            The default value is -1 and the actual number of sectors is defined by the number of menu items.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.BackIcon">
      <summary>
            Gets or sets the back icon that appears in a C1RadialMenu.
            </summary>
    </member>
    <member name="T:C1.WPF.SelectedItemOptions">
      <summary>
            Determines what part of the selected item should be displayed in the parent C1RadialMenuItem.
            </summary>
      <remarks>Note, the options don't include item check sign. It is always shown for checked items.</remarks>
    </member>
    <member name="F:C1.WPF.SelectedItemOptions.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:C1.WPF.SelectedItemOptions.Header">
      <summary>
            The header.
            </summary>
    </member>
    <member name="F:C1.WPF.SelectedItemOptions.Icon">
      <summary>
            The icon.
            </summary>
    </member>
    <member name="F:C1.WPF.SelectedItemOptions.All">
      <summary>
            All parts.
            </summary>
    </member>
    <member name="T:C1.WPF.C1RadialMenuItemsPresenter">
      <summary>
            Used within the template of the <see cref="T:C1.WPF.C1RadialMenu" /> control to specify where items are placed.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItemsPresenter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1RadialMenuItemsPresenter" /> control.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItemsPresenter.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
            Prepares the specified element to display the specified item.
            </summary>
      <param name="element">The element used to display the specified item.</param>
      <param name="item">The item to display.</param>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItemsPresenter.Menu">
      <summary>
            Identifies the parent <see cref="T:C1.WPF.C1RadialMenu" /> control.
            </summary>
    </member>
    <member name="T:C1.WPF.C1RadialColorItemsPresenter">
      <summary>
            Used within the template of the <see cref="T:C1.WPF.C1RadialMenu" /> control to specify where submenu of the C1RadialColorItem should be placed.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialColorItemsPresenter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1RadialColorItemsPresenter" /> control.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialColorItemsPresenter.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
            Prepares the specified element to display the specified item.
            </summary>
      <param name="element">The element used to display the specified item.</param>
      <param name="item">The item to display.</param>
    </member>
    <member name="P:C1.WPF.C1RadialColorItemsPresenter.Menu">
      <summary>
            Identifies the parent <see cref="T:C1.WPF.C1RadialMenu" /> control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialColorItemsPresenter.CurrentItem">
      <summary>
            Identifies the parent <see cref="T:C1.WPF.C1RadialColorItem" /> item.
            </summary>
      <remarks>The <see cref="T:C1.WPF.C1RadialMenu" /> updates this property value every time before opening the <see cref="T:C1.WPF.C1RadialColorItem" /> submenu.</remarks>
    </member>
    <member name="T:C1.WPF.C1RadialBackgroundPresenter">
      <summary>
            The supplementary control to use in the <see cref="T:C1.WPF.C1RadialMenu" /> control template.
            </summary>
      <remarks>It wraps Items into ContentControls with specified ItemContainerStyle and propagates item background to the wrapper ContentControl.</remarks>
    </member>
    <member name="M:C1.WPF.C1RadialBackgroundPresenter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1RadialBackgroundPresenter" /> control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialBackgroundPresenter.Menu">
      <summary>
            Identifies the parent <see cref="T:C1.WPF.C1RadialMenu" /> control.
            </summary>
    </member>
    <member name="T:C1.WPF.C1RadialNumericItem">
      <summary>
            An item for numeric items selection inside a C1RadialMenu control.
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.ValueProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialNumericItem.Value" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.MinimumProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialNumericItem.Minimum" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.MaximumProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialNumericItem.Maximum" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.IntervalProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialNumericItem.Interval" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.GaugeStartAngleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialNumericItem.GaugeStartAngle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.MarkStartAngleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialNumericItem.MarkStartAngle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.MarkEndAngleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialNumericItem.MarkEndAngle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.SliderMarginProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialNumericItem.SliderMargin" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.PointerStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialNumericItem.PointerStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.MarkStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialNumericItem.MarkStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialNumericItem.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialNumericItem.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialNumericItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1RadialNumericItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialNumericItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1RadialNumericItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.Value">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.C1RadialNumericItem.Value" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.Minimum">
      <summary>
            Minimum value for the <see cref="T:C1.WPF.C1RadialNumericItem" />.
            </summary>
      <remarks>
            If it is not set, control will use the minimum value from the Items collection.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.Maximum">
      <summary>
            Maximum value for the <see cref="T:C1.WPF.C1RadialNumericItem" />.
            </summary>
      <remarks>
            If it is not set, control will use the maximum value from the Items collection will be used.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.Interval">
      <summary>
            Value interval to generate items if Items collection is empty.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.GaugeStartAngle">
      <summary>
            Gets or sets a value that indicates the angle to position the radial gauge beginning.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.MarkStartAngle">
      <summary>
            Gets or sets a value that indicates the angle to position the first mark.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.MarkEndAngle">
      <summary>
            Gets or sets a value that indicates the angle to position the last mark.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.SliderMargin">
      <summary>
            The margin of the radial slider.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.PointerStyle">
      <summary>
            Gets or sets the style used to display the pointer in the radial slider.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.MarkStyle">
      <summary>
            Gets or sets the style used to display the mark in the radial slider.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="T:C1.WPF.C1RadialPanel">
      <summary>
            Positions child elements in a circle, from the StartAngle to the EndAngle in the clockwise direction.
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.ArcRelativeRadiusProperty">
      <summary>
            This attached property specifies the relative radius which should be used to count 
            the ArcSegmentDefinition attached property for the specified element.
            The default value is 1.0. 
            </summary>
      <remarks>
            The actual arc radius will be counted as <see cref="T:C1.WPF.C1RadialPanel" /> radius multiplied by ArcRelativeRadius property value.
            If this property is set on the parent ItemsControl, C1RadialPanel will honor it at counting ArcSegmentDefinition for individual items.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.GetArcRelativeRadius(System.Windows.DependencyObject)">
      <summary>
            Gets the relative arc radius value.
            </summary>
      <param name="obj">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.SetArcRelativeRadius(System.Windows.DependencyObject,System.Double)">
      <summary>
            Sets the relative arc radius value.
            </summary>
      <param name="obj">The element which contains the attached property.</param>
      <param name="value">
      </param>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.ArcThicknessProperty">
      <summary>
            This attached property specifies the arc thickness which can be used in the element control template.
            </summary>
      <remarks>
            If this property is set on the parent ItemsControl, C1RadialPanel will set it on individual items 
            and honor it at counting ArcSegmentDefinition for individual items.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.GetArcThickness(System.Windows.DependencyObject)">
      <summary>
            Gets the arc thickness value.
            </summary>
      <param name="obj">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.SetArcThickness(System.Windows.DependencyObject,System.Double)">
      <summary>
            Sets the arc thickness value.
            </summary>
      <param name="obj">The element which contains the attached property.</param>
      <param name="value">
      </param>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.ArcSegmentDefinitionProperty">
      <summary>
            This attached property holds the <see cref="T:C1.WPF.ArcSegmentDef" /> object which can be used in the element control template.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.GetArcSegmentDefinition(System.Windows.DependencyObject)">
      <summary>
            Gets the <see cref="T:C1.WPF.ArcSegmentDef" /> value.
            </summary>
      <param name="obj">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.SetArcSegmentDefinition(System.Windows.DependencyObject,C1.WPF.ArcSegmentDef)">
      <summary>
            Sets the <see cref="T:C1.WPF.ArcSegmentDef" /> value.
            </summary>
      <param name="obj">The element which contains the attached property.</param>
      <param name="value">
      </param>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.AngleProperty">
      <summary>
            This attached property specifies explicit angle which should be used to arrange element.
            </summary>
      <remarks>The <see cref="T:C1.WPF.C1RadialPanel" /> sets this property automatically on any children which are not derived from the <see cref="T:C1.WPF.C1RadialMenuItem" />.</remarks>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.GetAngle(System.Windows.DependencyObject)">
      <summary>
            Gets the angle value.
            </summary>
      <param name="obj">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.SetAngle(System.Windows.DependencyObject,System.Double)">
      <summary>
            Sets the angle value.
            </summary>
      <param name="obj">The element which contains the attached property.</param>
      <param name="value">
      </param>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.StartAngleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialPanel.StartAngle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.EndAngleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialPanel.EndAngle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.RotateChildrenProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialPanel.RotateChildren" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1RadialPanel" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialPanel.SetExplicitAngles">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether the panel should set Angle attached property on children elements.
            The default value is False.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialPanel.StartAngle">
      <summary>
            Gets or sets a value that indicates the angle to position the first child element.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialPanel.EndAngle">
      <summary>
            Gets or sets a value that indicates the angle to position the last child element.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialPanel.RotateChildren">
      <summary>
            Gets or sets a value that specifies whether the panel should apply RotateTransform to the child elements.
            </summary>
      <remarks>
            Set this property to false if you want to keep children orientation.
            </remarks>
    </member>
    <member name="T:C1.WPF.C1RadialSlider">
      <summary>
            Used within the template of the <see cref="T:C1.WPF.C1RadialMenu" /> control to display radial slider for selecting numeric values.
            </summary>
      <summary>
            control to display radial slider for selecting numeric values.
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialSlider.PointerStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialSlider.PointerStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.C1RadialSlider.CircularBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RadialSlider.CircularBrush" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialSlider.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
            Prepares the specified element to display the specified item.
            </summary>
      <param name="element">The element used to display the specified item.</param>
      <param name="item">The item to display.</param>
    </member>
    <member name="M:C1.WPF.C1RadialSlider.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1RadialSlider" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RadialSlider.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1RadialSlider" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialSlider.PointerStyle">
      <summary>
            Gets or sets the style to draw pointer.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialSlider.CircularBrush">
      <summary>
            Gets the circular brush which can be used in the control template to represent radial gauge.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RadialSlider.Menu">
      <summary>
            Identifies the parent <see cref="T:C1.WPF.C1RadialMenu" /> control.
            </summary>
    </member>
    <member name="T:C1.WPF.AngleConverter">
      <summary>
            Multiplies supplied double value by the parameter value.
            </summary>
    </member>
    <member name="M:C1.WPF.AngleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Multiplies supplied double value by the parameter value.
            </summary>
      <param name="value">
      </param>
      <param name="targetType">
      </param>
      <param name="parameter">
      </param>
      <param name="language">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.AngleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Does nothing.
            </summary>
      <param name="value">
      </param>
      <param name="targetType">
      </param>
      <param name="parameter">
      </param>
      <param name="language">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.DoubleToThicknessConverter">
      <summary>
            Converts double value to the thickness with uniform length on each side.
            </summary>
    </member>
    <member name="M:C1.WPF.DoubleToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts double value to the thickness with uniform length on each side.
            </summary>
      <param name="value">
      </param>
      <param name="targetType">
      </param>
      <param name="parameter">
      </param>
      <param name="language">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.DoubleToThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Does nothing.
            </summary>
      <param name="value">
      </param>
      <param name="targetType">
      </param>
      <param name="parameter">
      </param>
      <param name="language">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.ArcSegmentDef">
      <summary>
            Keeps arc segment definition properties which can be used in xaml to draw the ArcSegment.
            </summary>
    </member>
    <member name="P:C1.WPF.ArcSegmentDef.Size">
      <summary>
            Gets or sets the x-radius and y-radius of the arc as a Size structure.
            </summary>
    </member>
    <member name="P:C1.WPF.ArcSegmentDef.StartPoint">
      <summary>
            Gets or sets the start point of the elliptical arc.
            </summary>
    </member>
    <member name="P:C1.WPF.ArcSegmentDef.EndPoint">
      <summary>
            Gets or sets the endpoint of the elliptical arc.
            </summary>
    </member>
    <member name="E:C1.WPF.ArcSegmentDef.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpandButtonTagConverter">
      <summary>
            When clear style,ExpandButton tag will be null, it can not converter to double
            </summary>
    </member>
    <member name="T:C1.Silverlight.Resources.C1_Silverlight">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="T:C1.Silverlight.Resources.Common`1">
      <summary>
            A helper base for resource strongly-typed resource class
            that reads resources from the application assembly.
            </summary>
      <typeparam name="R">The strongly-typed resource subclass</typeparam>
    </member>
    <member name="P:C1.Silverlight.Resources.Common`1.ResourceManager">
      <summary>
            Loads resource managers for the application and the assembly.
            </summary>
    </member>
    <member name="T:C1.Silverlight.Resources.Common`1.S">
      <summary>
            Dummy class to make GetString work.
            </summary>
    </member>
    <member name="M:C1.Silverlight.Resources.Common`1.S.GetString(System.String,System.Globalization.CultureInfo)">
      <summary>
            Calls resourceManApp.GetString and if that fails, resourceManC1.GetString.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Cancel">
      <summary>
              Looks up a localized string similar to Cancel.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Close">
      <summary>
              Looks up a localized string similar to Close.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.CloseGlobal">
      <summary>
              Looks up a localized string similar to Close Selected Item.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Menu">
      <summary>
              Looks up a localized string similar to Menu.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Next">
      <summary>
              Looks up a localized string similar to Next.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.No">
      <summary>
              Looks up a localized string similar to No.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.OK">
      <summary>
              Looks up a localized string similar to OK.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Pin">
      <summary>
              Looks up a localized string similar to Pin.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Previous">
      <summary>
              Looks up a localized string similar to Previous.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.SelectAFile">
      <summary>
              Looks up a localized string similar to Select a file.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.UnPin">
      <summary>
              Looks up a localized string similar to UnPin.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Yes">
      <summary>
              Looks up a localized string similar to Yes.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DataTemplateSelector">
      <summary>
            Provides a way to apply data templates based on custom logic.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DataTemplateSelector.Resources">
      <summary>
            Gets the locally defined resource dictionary. 
            </summary>
    </member>
    <member name="T:C1.WPF.C1HierarchicalDataTemplate">
      <summary>
            Represents a DataTemplate that supports C1HierarchicalPresenter, such as TreeViewItem.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalDataTemplate.ItemsSource">
      <summary>
            Gets or sets the binding for this data template, which indicates where to find the collection
            that represents the next level in the data hierarchy.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalDataTemplate.ItemTemplate">
      <summary>
            Gets or sets the DataTemplate to apply to the ItemTemplate property on a generated
            C1HierarchicalPresenter (such as a TreeViewItem), to indicate how to display
            items from the next level in the data hierarchy.
            </summary>
    </member>
    <member name="T:C1.WPF.C1StyleSelector">
      <summary>
            Provides a way to apply styles based on custom logic.
            </summary>
    </member>
    <member name="P:C1.WPF.C1StyleSelector.Resources">
      <summary>
            Gets the locally defined resource dictionary. 
            </summary>
    </member>
    <member name="T:C1.WPF.C1LinePanel">
      <summary>
            C1LinePanel arranges a list of items in a single row or column.
            </summary>
    </member>
    <member name="F:C1.WPF.C1LinePanel.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1LinePanel.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1LinePanel.ReverseProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1LinePanel.Reverse" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1LinePanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1LinePanel" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1LinePanel.Orientation">
      <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1LinePanel.Reverse">
      <summary>
            Gets or sets whether the items are arranged top-down/left-right or bottom-up/right-left.
            </summary>
    </member>
    <member name="P:C1.WPF.C1LinePanel.LineDefinitions">
      <summary>
            Gets the collection of specifications of how much space to give to each item.
            </summary>
    </member>
    <member name="T:C1.WPF.LineDefinition">
      <summary>
            Defines row or column specific properties that apply to <see cref="T:C1.WPF.C1LinePanel" /> elements.
            </summary>
    </member>
    <member name="P:C1.WPF.LineDefinition.Length">
      <summary>
            Gets or sets a value that represents the height or width of the <see cref="T:C1.WPF.LineDefinition" />.
            </summary>
    </member>
    <member name="T:C1.WPF.CancelSourceEventArgs">
      <summary>
            Provides data for a cancelable event.
            </summary>
    </member>
    <member name="P:C1.WPF.CancelSourceEventArgs.Source">
      <summary>
            Gets or sets the source of the event.
            </summary>
    </member>
    <member name="T:C1.WPF.UnselectedContentMode">
      <summary>
            Determines how <see cref="T:C1.WPF.C1TabControl" /> retains the content of <see cref="T:C1.WPF.C1TabItem" />s never or no longer selected.
            </summary>
    </member>
    <member name="F:C1.WPF.UnselectedContentMode.OutsideVisualTree">
      <summary>
            The visual tree only contains the content of the selected item.
            The content of unselected items is not in the visual tree.
            </summary>
    </member>
    <member name="F:C1.WPF.UnselectedContentMode.Collapsed">
      <summary>
            The content of an item is grafted into the visual tree when first selected.
            When an item is unselected, the content is kept in visual tree with collapsed visibility.
            </summary>
    </member>
    <member name="T:C1.WPF.PinMode">
      <summary>
            Possible states of pin status for a <see cref="T:C1.WPF.C1TabItem" />.
            </summary>
    </member>
    <member name="F:C1.WPF.PinMode.Unpinned">
      <summary>
            The <see cref="T:C1.WPF.C1TabItem" /> is scrollable <see cref="T:C1.WPF.C1TabItem" />.
            </summary>
    </member>
    <member name="F:C1.WPF.PinMode.Pinned">
      <summary>
            The <see cref="T:C1.WPF.C1TabItem" /> is unscrollable and fixed <see cref="T:C1.WPF.C1TabItem" />.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabItemBorder">
      <summary>
            Control containing the header of a <see cref="T:C1.WPF.C1TabItem" />.
            Supports different appearances, defined by the <see cref="P:C1.WPF.C1TabItemBorder.Shape" /> property.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemBorder.ChangeVisualStateShape(System.Boolean)">
      <summary>
            Updates the current visual state of the Shape visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemBorder.ShapeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemBorder.Shape" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemBorder.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemBorder.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemBorder.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TabItemBorder" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemBorder.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TabItemBorder" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1TabItemBorder.Shape">
      <summary>
            Gets or sets the geometric shape of the tab.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemBorder.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabItemBorderClipConverter">
      <summary>
            Converter used to clip off the bottom part of ribbon borders.
            </summary>
    </member>
    <member name="T:C1.WPF.C1SlopedBorderAdjustConverter">
      <summary>
            Converter used to adjust a path so that it renders its stroke inside and not to both side of its position.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabItemPresenter">
      <summary>
            Internal element used in both <see cref="T:C1.WPF.C1TabItem" /> and C1DockTabItem to avoid repetition.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.ChangeVisualStateSelection(System.Boolean)">
      <summary>
            Updates the current visual state of the Selection visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.ChangeVisualStateTabStripPlacement(System.Boolean)">
      <summary>
            Updates the current visual state of the TabStripPlacement visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.IsSelected" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.TabShapeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.TabShape" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.TabStripPlacementProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.TabStripPlacement" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.ShowSelectedCuesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.ShowSelectedCues" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TabItemPresenter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TabItemPresenter" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.IsSelected">
      <summary>
            Gets or sets a value indicating whether the element is currently selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.TabShape">
      <summary>
            Gets or sets the visual form of the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.TabStripPlacement">
      <summary>
            Gets or sets the location of the panel with the tabs relative to the whole control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.ShowSelectedCues">
      <summary>
            Gets or sets a value indicating whether the selected visuals of the control are visible.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TabItemPresenter.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabPanel">
      <summary>
            Internal element used in the control template of <see cref="T:C1.WPF.C1TabControl" />s.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabPanel.ArrangeOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabPanel.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabPanel.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabPanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TabPanel" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabPanel.Orientation">
      <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabPanelOverlapDirection">
      <summary>
            Z-Index arrangement of the items in the <see cref="T:C1.WPF.C1TabPanel" />.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabPanelOverlapDirection.Right">
      <summary>
            Right-most is in the back.
            Selected is in front.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabPanelOverlapDirection.Left">
      <summary>
            Left-most is in the back.
            Selected is in front.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabPanelOverlapDirection.RightLeftFromSelected">
      <summary>
            Left-most is in the back, right-most is in the back,
            selected is in front.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabItemShape">
      <summary>
            Supported shapes for the <see cref="T:C1.WPF.C1TabItem" /></summary>
    </member>
    <member name="F:C1.WPF.C1TabItemShape.Rectangle">
      <summary>
            Squared tab shape.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemShape.Rounded">
      <summary>
            Rounded tab shape.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemShape.Sloped">
      <summary>
            Sloped tab shape.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemShape.Ribbon">
      <summary>
            S-shaped tab.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabItemCloseOptions">
      <summary>
            Close button options for the <see cref="T:C1.WPF.C1TabControl" /></summary>
    </member>
    <member name="F:C1.WPF.C1TabItemCloseOptions.None">
      <summary>
            Close button is not shown for the <see cref="T:C1.WPF.C1TabItem" />s.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemCloseOptions.InEachTab">
      <summary>
            A close button is shown in each <see cref="T:C1.WPF.C1TabItem" />.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemCloseOptions.GlobalClose">
      <summary>
            A unique close button is shown, and the selected <see cref="T:C1.WPF.C1TabItem" />
            is closed when it's pressed.
            </summary>
    </member>
    <member name="T:C1.WPF.BackgroundGradientSuppressor">
      <summary>
            Hides the BackgroundGradient when the background is transparent or not a solid color.
            </summary>
    </member>
    <member name="M:C1.WPF.BackgroundGradientSuppressor.GetBackground(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the Background attached property.
            </summary>
    </member>
    <member name="M:C1.WPF.BackgroundGradientSuppressor.SetBackground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
      <summary>
            Sets the value of the Background attached property.
            </summary>
    </member>
    <member name="F:C1.WPF.BackgroundGradientSuppressor.BackgroundProperty">
      <summary>
            Identifies the Background dependency property. 
            </summary>
    </member>
    <member name="T:C1.WPF.C1DelegateCommand">
      <summary>
            Utility class that helps creating an <see cref="T:System.Windows.Input.ICommand" /> from the delegates execute and canExecute.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DelegateCommand.#ctor(System.Action{System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1DelegateCommand" /> class.
            </summary>
      <param name="execute">The execute delegate.</param>
    </member>
    <member name="M:C1.WPF.C1DelegateCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1DelegateCommand" /> class.
            </summary>
      <param name="execute">The execute delegate.</param>
      <param name="canExecute">The can execute delegate.</param>
    </member>
    <member name="M:C1.WPF.C1DelegateCommand.CanExecute(System.Object)">
      <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
      <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
      <returns>
            true if this command can be executed; otherwise, false.
            </returns>
    </member>
    <member name="M:C1.WPF.C1DelegateCommand.Execute(System.Object)">
      <summary>
            Defines the method to be called when the command is invoked.
            </summary>
      <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="M:C1.WPF.C1DelegateCommand.RaiseCanExecuteChanged">
      <summary>
            Raises the <see cref="e:CanExecuteChanged" /> event.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DelegateCommand.CanExecuteChanged">
      <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
    </member>
    <member name="T:C1.WPF.C1PropertyPathHelper">
      <summary>
            Provides helper methods to work with <see cref="T:System.Linq.Expressions.Expression" /> and property paths.
            </summary>
    </member>
    <member name="M:C1.WPF.C1PropertyPathHelper.GetPropertyPathValue(System.Object,System.String)">
      <summary>
            Gets the value resulting from applying the property path to the item.
            </summary>
      <param name="item">The item to which the path will be applied.</param>
      <param name="propertyPath">The property path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1PropertyPathHelper.CreateSelector``2(System.String)">
      <summary>
            Creates a Function to evaluate a given property path on a given object.
            <example>
            For the property path: MyProperty1.MyProperty2
            it will return the following function:
            i =&gt; i.MyProperty1.MyProperty2
            </example></summary>
      <typeparam name="T">Type of the element where the property path will be accessed.</typeparam>
      <typeparam name="X">Type of the result after evaluated the full property path.</typeparam>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1PropertyPathHelper.CreateSelector``1(System.Type,System.String)">
      <summary>
            Creates a function that when called execute the path expression over the specified object.
            </summary>
      <remarks>
            The object type passed in the resulting function must be the same as the specified in this method, otherwise an exception will be thrown.
            </remarks>
      <typeparam name="X">
      </typeparam>
      <param name="type">The type of the objects that will be passed to the resulting function.</param>
      <param name="path">The path that will be evaluated.</param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.C1ProjectThicknessConverter">
      <summary>
            Converter used to extract a specific member of a thickness structure.
            </summary>
    </member>
    <member name="T:C1.WPF.C1SideRadiusConverter">
      <summary>
            Converter used to bind specific inner element corner radius to 
            the control CornerRadius.
            </summary>
    </member>
    <member name="T:C1.WPF.C1SideThicknessConverter">
      <summary>
            Converter used to bind specific sides of inner elements thickness to 
            the main control thickness.
            </summary>
    </member>
    <member name="T:C1.WPF.CustomConverter">
      <summary>
            Converter which receive a function to convert the value
            </summary>
    </member>
    <member name="M:C1.WPF.CustomConverter.Create(System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object})">
      <summary>
            Creates the specified converter function.
            </summary>
      <param name="converterFunction">The converter function. (value, type, parameter, culture)</param>
      <example>
        <code>
            var converter = CustomConverter.Create((value, type, parameter, culture)=&gt;
            {
                return; //Put the converter code here
            });
            </code>
      </example>
      <returns>The converted value</returns>
    </member>
    <member name="M:C1.WPF.CustomConverter.Create(System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object},System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object})">
      <summary>
            Creates the specified converter function.
            </summary>
      <param name="converterFunction">The converter function. (value, type, parameter, culture)</param>
      <param name="converterBackFunction">The convert back function. (value, type, parameter, culture)</param>
      <example>
        <code>
            var converter = CustomConverter.Create((value, type, parameter, culture)=&gt;
            {
                return; //Put the converter code here
            });
            </code>
      </example>
      <returns>The converted value</returns>
    </member>
    <member name="M:C1.WPF.CustomConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
      <param name="value">The source data being passed to the target.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
      <param name="parameter">An optional parameter to be used in the converter logic.</param>
      <param name="culture">The culture of the conversion.</param>
      <returns>
            The value to be passed to the target dependency property.
            </returns>
    </member>
    <member name="M:C1.WPF.CustomConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.
            </summary>
      <param name="value">The target data being passed to the source.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
      <param name="parameter">An optional parameter to be used in the converter logic.</param>
      <param name="culture">The culture of the conversion.</param>
      <returns>
            The value to be passed to the source object.
            </returns>
    </member>
    <member name="T:C1.WPF.VisibilityConverter">
      <summary>
            Converter from/to Visibility and Boolean.
            </summary>
      <remarks>
            true = Visible
            false = Collapsed
            </remarks>
    </member>
    <member name="M:C1.WPF.VisibilityConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.VisibilityConverter" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.VisibilityConverter.Opposite">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.WPF.VisibilityConverter" /> is opposite.
            </summary>
      <value>
        <c>true</c> if opposite; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:C1.WPF.ZoomToScaleTransformConverter">
      <summary>
            Converts a double value to a <see cref="T:System.Windows.Media.ScaleTransform" />.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DragDropManager">
      <summary>
            Provides methods for drag-and-drop operations in Silverlight applications.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.ClearTargets">
      <summary>
            Removes all the registered targets
            </summary>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.ClearSources">
      <summary>
            Removes all the registered sources
            </summary>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.RegisterDropTarget(System.Windows.UIElement,System.Boolean)">
      <summary>
            Registers (or unregisters) an element as a drop target.
            </summary>
      <param name="target">
        <see cref="T:System.Windows.UIElement" /> that will act as a drop target.</param>
      <param name="register">
        <b>True</b> to register the element, <b>false</b> to unregister.</param>
      <remarks>
            The <paramref name="target" /> element should not be transparent, or it will
            not receive any mouse events and thus won't be able to act as a drop target.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.RegisterDragSource(System.Windows.UIElement,C1.WPF.DragDropEffect,System.Windows.Input.ModifierKeys,System.Boolean)">
      <remarks>
        <para>When a <see cref="T:System.Windows.UIElement" /> is registered as a drag source, the <see cref="T:C1.WPF.C1DragDropManager" /> 
            monitors the mouse events for that element and starts drag-drop operations automatically when the user
            presses the mouse over the element and moves it for a few pixels.</para>
        <para>This is a convenience method, it is not strictly required; you could handle the mouse events 
            for the objects you want to use as drag sources and call the <see cref="M:C1.WPF.C1DragDropManager.DoDragDrop(System.Windows.UIElement,System.Windows.Input.MouseEventArgs,C1.WPF.DragDropEffect)" /> method 
            explicitly.</para>
        <para>To un-register an element as a drag source, call the <b>RegisterDragSource</b> method passing
            the element and <b>DragDropEffect.None</b>.</para>
        <para>Note that only elements that raise mouse events may be used as automatic drag sources. 
            For example, the <see cref="T:System.Windows.Controls.Button" /> and <see cref="T:System.Windows.Controls.TextBox" /> controls consume mouse events 
            internally, so the <see cref="T:C1.WPF.C1DragDropManager" /> does not receive any mouse events for these controls.
            Therefore, they cannot be used as automatic drag sources.</para>
      </remarks>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.UnregisterDragSource(System.Windows.UIElement)">
      <summary>
            Un-registers a <see cref="T:System.Windows.UIElement" /> as a drag source.
            </summary>
      <param name="source">
        <see cref="T:System.Windows.UIElement" /> that will no longer act as a drag source.</param>
      <remarks>
            Calling this method has the same effect as registering the element as a drag source with 
            no effects (DragDropEffect.None).
            </remarks>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.DoDragDrop(System.Windows.UIElement,System.Windows.Input.MouseEventArgs,C1.WPF.DragDropEffect)">
      <param name="effect">
        <see cref="T:C1.WPF.DragDropEffect" /> supported by the operation.</param>
      <remarks>
        <para>The <paramref name="e" /> is not strictly required, but is usually available since drag drop operations 
            are initiated by mouse actions. If you don't have a <see cref="T:System.Windows.Input.MouseEventArgs" /> to provide, pass <b>null</b> 
            instead.</para>
        <para>The method causes the drag operation to start, then returns immediately. The caller is responsible for 
            monitoring and completing the operation using the <see cref="E:C1.WPF.C1DragDropManager.DragStart" />, <see cref="E:C1.WPF.C1DragDropManager.DragEnter" />, 
            <see cref="E:C1.WPF.C1DragDropManager.DragOver" />, and <see cref="E:C1.WPF.C1DragDropManager.DragDrop" /> events.</para>
      </remarks>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.OnDragStart(System.Windows.RoutedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1DragDropManager.DragStart" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.OnDragEnter(System.Windows.RoutedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1DragDropManager.DragEnter" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.OnDragOver(System.Windows.RoutedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1DragDropManager.DragOver" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.OnDragLeave(System.Windows.RoutedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1DragDropManager.DragLeave" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.OnDragDrop(System.Windows.RoutedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1DragDropManager.DragDrop" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.OnDragAutoScroll(C1.WPF.DragDropEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.C1DragDropManager.DragAutoScroll" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.DragThreshold">
      <summary>
            Gets or sets the distance in pixels that the mouse must move before a drag operation starts.
            </summary>
      <remarks>
            This property affects the drag behavior of objects registered as drag sources using the
            <see cref="M:C1.WPF.C1DragDropManager.RegisterDragSource(System.Windows.UIElement,C1.WPF.DragDropEffect,System.Windows.Input.ModifierKeys,System.Boolean)" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.AutoScroll">
      <summary>
            Gets or sets whether the <see cref="T:C1.WPF.C1DragDropManager" /> should automatically
            scroll the <see cref="T:System.Windows.Controls.ScrollViewer" /> that contains the drop target.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.AutoScrollEdge">
      <summary>
            Gets or sets the distance between the mouse and the edges of a drag target element that 
            triggers the auto scroll process.
            </summary>
      <remarks>
            This property is applicable only when <see cref="P:C1.WPF.C1DragDropManager.AutoScroll" /> is set to true.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.AutoScrollStep">
      <summary>
            Gets or sets the number of pixels to scroll in each auto scroll step.
            </summary>
      <remarks>
            This property is applicable only when <see cref="P:C1.WPF.C1DragDropManager.AutoScroll" /> is set to true.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.AutoScrollDelay">
      <summary>
            Gets or sets the number of milliseconds between auto scroll steps.
            </summary>
      <remarks>
            This property is applicable only when <see cref="P:C1.WPF.C1DragDropManager.AutoScroll" /> is set to true.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.Canvas">
      <summary>
            Gets a reference to the <see cref="P:C1.Silverlight.C1DragDropManager.Canvas" /> being used to show the drag-and-drop process.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.SourceMarker">
      <summary>
            Gets a reference to the <see cref="T:System.Windows.Controls.Border" /> used to highlight the drag source.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.TargetMarker">
      <summary>
            Gets the <see cref="T:System.Windows.Controls.Border" /> used to indicate the drop location.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DragDropManager.DragStart">
      <summary>
            Fires when a drag drop process starts.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DragDropManager.DragEnter">
      <summary>
            Fires during a drag drop process, when the cursor enters a registered drop target.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DragDropManager.DragOver">
      <summary>
            Fires during a drag drop process, when the cursor moves over a registered drop target.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DragDropManager.DragLeave">
      <summary>
            Fires during a drag drop process, when the cursor leaves a registered drop target.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DragDropManager.DragDrop">
      <summary>
            Fires at the end of a drag drop process, when the user releases the mouse button over a registered drop target.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DragDropManager.DragAutoScroll">
      <summary>
            Fires after the <see cref="T:C1.WPF.C1DragDropManager" /> automatically scrolls a <see cref="T:System.Windows.Controls.ScrollViewer" />
            in order to keep the drop location within view.
            </summary>
      <remarks>
            The <see cref="T:System.Windows.Controls.ScrollViewer" /> property of the <see cref="T:C1.WPF.DragDropEventArgs" /> contains a reference
            to the <see cref="T:System.Windows.Controls.ScrollViewer" /> that was updated.
            </remarks>
    </member>
    <member name="T:C1.WPF.DragDropEffect">
      <summary>
            Specifies the action that will be performed when the user drops a drag source into a drop target element.
            </summary>
    </member>
    <member name="F:C1.WPF.DragDropEffect.None">
      <summary>
            No action.
            </summary>
    </member>
    <member name="F:C1.WPF.DragDropEffect.Move">
      <summary>
            Move the source element into the target element.
            </summary>
    </member>
    <member name="F:C1.WPF.DragDropEffect.Copy">
      <summary>
            Copy the source element into the target element.
            </summary>
    </member>
    <member name="T:C1.WPF.DragDropEventHandler">
      <summary>
            Method used to handle drag drop events.
            </summary>
      <param name="source">Object that raised the event.</param>
      <param name="e">
        <see cref="T:C1.WPF.DragDropEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:C1.WPF.DragDropEventArgs">
      <summary>
            Class that contains data for drag-and-drop events.
            </summary>
    </member>
    <member name="M:C1.WPF.DragDropEventArgs.#ctor(System.Windows.RoutedEventArgs,System.Windows.UIElement,System.Windows.UIElement,C1.WPF.DragDropEffect,System.Windows.Controls.ScrollViewer)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.DragDropEventArgs" />.
            </summary>
      <param name="e">
        <see cref="T:System.Windows.RoutedEventArgs" /> that contains mouse state information.</param>
      <param name="source">
        <see cref="T:System.Windows.UIElement" /> acting as a drag source.</param>
      <param name="target">
        <see cref="T:System.Windows.UIElement" /> acting as a drop target.</param>
      <param name="effect">
        <see cref="T:C1.WPF.DragDropEffect" /> that specifies the action to be performed
            when the drag and drop process is completed.</param>
      <param name="scrollViewer">
        <see cref="P:C1.WPF.DragDropEventArgs.ScrollViewer" /> that scrolls to show the target location.</param>
    </member>
    <member name="M:C1.WPF.DragDropEventArgs.GetPosition(System.Windows.UIElement)">
      <summary>
            Gets the mouse coordinates relative to a given <see cref="T:System.Windows.UIElement" />.
            </summary>
      <param name="relativeTo">
        <see cref="T:System.Windows.UIElement" /> that determines the coordinate system of the return value.</param>
      <returns>A <see cref="T:System.Windows.Point" /> that contains the mouse coordinates relative to the <see cref="T:System.Windows.UIElement" />
            specified by the <paramref name="relativeTo" /> parameter.</returns>
    </member>
    <member name="P:C1.WPF.DragDropEventArgs.DragSource">
      <summary>
            Gets the <see cref="T:System.Windows.UIElement" /> that is acting as a drag source.
            </summary>
    </member>
    <member name="P:C1.WPF.DragDropEventArgs.DropTarget">
      <summary>
            Gets the <see cref="T:System.Windows.UIElement" /> that is acting as a drop target.
            </summary>
    </member>
    <member name="P:C1.WPF.DragDropEventArgs.Effect">
      <summary>
            Gets or sets the <see cref="T:C1.WPF.DragDropEffect" /> that will be applied when the user drops the 
            <see cref="P:C1.WPF.DragDropEventArgs.DragSource" /> element into the <see cref="P:C1.WPF.DragDropEventArgs.DropTarget" /> element.
            </summary>
    </member>
    <member name="P:C1.WPF.DragDropEventArgs.ScrollViewer">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.DragDropEventArgs.ScrollViewer" /> that will scroll automatically during the
            drag drop operation when the mouse is near its edge.
            </summary>
      <remarks>
            The <see cref="T:C1.WPF.C1DragDropManager" /> selects the <see cref="P:C1.WPF.DragDropEventArgs.ScrollViewer" /> by default.
            If there are several nested scroll viewers, the innermost is selected by default. If that
            is not the desired behavior, callers may modify this behavior by setting this property to
            a reference to the desired <see cref="P:C1.WPF.DragDropEventArgs.ScrollViewer" />.
            </remarks>
    </member>
    <member name="T:C1.WPF.Extensions">
      <summary>
            Class that provides static extension methods for several other classes.
            </summary>
    </member>
    <member name="M:C1.WPF.Extensions.FindParent``1(System.Windows.FrameworkElement)">
      <summary>
            Finds the first parent of a given type for a particular FrameworkElement
            </summary>
      <returns>
        <returns>The first object whose type is <typeparam name="T" /></returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extensions.GetAllParents(System.Windows.FrameworkElement)">
      <summary>
            Returns all the parents in the visual tree
            </summary>
      <returns>The list of ancestor framework elements in the visual tree hierarchy</returns>
    </member>
    <member name="M:C1.WPF.Extensions.GetVisualStateGroup(System.Windows.FrameworkElement,System.String)">
      <summary>
            Gets the VisualStateGroup with the given name, looking up the visual tree
            </summary>
      <param name="root">Element to start from</param>
      <param name="groupName">Name of the group to look for</param>
      <returns>The group, if found, or null</returns>
    </member>
    <member name="M:C1.WPF.Extensions.SetBinding``1(System.Windows.FrameworkElement,System.Windows.DependencyProperty,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
      <typeparam name="T">Type of the source</typeparam>
      <param name="target">The target.</param>
      <param name="dp">The dependency property which will be set.</param>
      <param name="source">The source.</param>
      <param name="expr">Expression that returns a property of the source object.</param>
    </member>
    <member name="M:C1.WPF.Extensions.SetBinding``1(System.Windows.FrameworkElement,System.Windows.DependencyProperty,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Windows.Data.IValueConverter)">
      <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
      <typeparam name="T">Type of the source</typeparam>
      <param name="target">The target.</param>
      <param name="dp">The dependency property which will be set.</param>
      <param name="source">The source.</param>
      <param name="expr">Expression that returns a property of the source object.</param>
      <param name="converter">The converter that will be applied to the created binding object.</param>
    </member>
    <member name="M:C1.WPF.Extensions.MakeRelative(System.Windows.Controls.Primitives.Popup,System.Windows.FrameworkElement,System.Func{System.Collections.Generic.List{C1.WPF.AnchorMatching}})">
      <summary>
            Makes the popup relative to another <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
      <param name="popup">
        <see cref="T:System.Windows.Controls.Primitives.Popup" /> to handle.</param>
      <param name="relativeElement">Element used to locate the popup.</param>
      <param name="getLocations">Function that provides the ordered list of <see cref="T:C1.WPF.AnchorMatching" /> defining the corners to bound of both elements.</param>
    </member>
    <member name="M:C1.WPF.Extensions.MakeRelative(System.Windows.Controls.Primitives.Popup,System.Windows.FrameworkElement,System.Func{System.Collections.Generic.List{C1.WPF.AnchorMatching}},System.Func{System.Windows.Point},System.Func{System.Windows.Point})">
      <summary>
            Makes the popup relative to another <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
      <param name="popup">
        <see cref="T:System.Windows.Controls.Primitives.Popup" /> to handle.</param>
      <param name="relativeElement">Element used to locate the popup.</param>
      <param name="getLocations">Function that provides the ordered list of <see cref="T:C1.WPF.AnchorMatching" /> defining the corners to bound of both elements.</param>
      <param name="getPosition">Function that retrieves the current position of the Popup.</param>
      <param name="getReferencePosition">Function that retrieves the current position of the reference element.</param>
    </member>
    <member name="M:C1.WPF.Extensions.GetAbsoluteUri(System.String)">
      <summary>
            Returns the absolute <see cref="T:System.Uri" /> from a string that may represent relative or absolute Uri.
            </summary>
      <param name="uriString">A relative or absolute Uri in string form.</param>
      <returns>The absolute <see cref="T:System.Uri" /> from the parameter string.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.C1TransformToVisual(System.Windows.UIElement,System.Windows.UIElement)">
      <summary>
            Returns a transform object that can be used to transform coordinates from the <see cref="T:System.Windows.UIElement" /> to the specified object.
            </summary>
      <remarks>
            This is an improved version of <see cref="T:System.Windows.UIElement" />.TransformToVisual. It works in cases that TransformToVisual doesn't, like with UIElements inside <see cref="T:System.Windows.Controls.Primitives.Popup" />s.
            </remarks>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> that defines the source coordinates.</param>
      <param name="visual">The <see cref="T:System.Windows.UIElement" /> that defines the target coordinates.</param>
      <returns>A transform object that can be used to transform coordinates from the <see cref="T:System.Windows.UIElement" /> to the specified object.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.Distance(System.Windows.Point,System.Windows.Point)">
      <summary>
            Returns the distance between the two points
            </summary>
      <param name="p1">One point.</param>
      <param name="p2">Another point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extensions.Deflate(System.Windows.Rect@,System.Windows.Thickness)">
      <summary>
            Deflates a <see cref="T:System.Windows.Rect" /> structure by specified amount.
            </summary>
      <param name="r">
        <see cref="T:System.Windows.Rect" /> structure.</param>
      <param name="th">
        <see cref="T:System.Windows.Thickness" /> structure defining amount to inflate this <see cref="T:System.Windows.Rect" />.</param>
    </member>
    <member name="M:C1.WPF.Extensions.Inflate(System.Windows.Rect@,System.Double,System.Double)">
      <summary>
            Enlarges a <see cref="T:System.Windows.Rect" /> structure by the specified amount.
            </summary>
      <param name="r">
        <see cref="T:System.Windows.Rect" /> structure.</param>
      <param name="dx">The amount to inflate this <see cref="T:System.Windows.Rect" /> horizontally.</param>
      <param name="dy">The amount to inflate this <see cref="T:System.Windows.Rect" /> vertically.</param>
    </member>
    <member name="M:C1.WPF.Extensions.IntersectsWith(System.Windows.Rect,System.Windows.Rect)">
      <summary>
            Determines if this rectangle intersects with rect.
            </summary>
      <param name="r">One rectangle to test.</param>
      <param name="rect">Another rectangle to test.</param>
      <returns>This method returns true if there is any intersection, otherwise false.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.Contains(System.Windows.Rect,System.Windows.Rect)">
      <summary>
            Determines if the one rectangular region is entirely contained within another structure.
            </summary>
      <param name="r">One rectangle to test.</param>
      <param name="rect">Another rectangle.</param>
      <returns>This method returns true if the rectangular region represented by <paramref name="rect" /> is entirely contained within <paramref name="r" /> structure; otherwise false.</returns>
    </member>
    <member name="T:C1.WPF.TypeEx">
      <summary>
            The <see cref="T:C1.WPF.TypeEx" /> class provides useful extension methods for the <see cref="T:System.Type" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.TypeEx.GetDefaultProperty(System.Type,System.Type)">
      <summary>
            Gets default property of the specified type.
            </summary>
      <param name="targetType">The type.</param>
      <param name="memberType">The member type to search for.</param>
      <returns>The <see cref="T:System.Reflection.PropertyInfo" /> instance if property has been found; Null otherwise.</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.GetIndexedProperty(System.Type,System.String,System.Type)">
      <summary>
            Gets indexed property of the specified type.
            </summary>
      <param name="type">The type.</param>
      <param name="name">The property name to search for.</param>
      <param name="indexedType">The property type to search for.</param>
      <returns>The <see cref="T:System.Reflection.PropertyInfo" /> instance if property has been found; Null otherwise.</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.New``1(System.Type)">
      <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="type">The type.</param>
      <returns>A new instance of type T.</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.New(System.Type)">
      <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
      <param name="type">The type.</param>
      <returns>A new instance of type T.</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.GetDefaultPublicCtor(System.Type)">
      <summary>
            Returns default public instance parameter-less constructor for the specified type.
            </summary>
      <param name="type">The type.</param>
      <returns>The default constructor for the specified type if it exists; Null otherwise.</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.New``1(System.Type,System.Action{``0})">
      <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="type">The type.</param>
      <param name="initializers">The initializers.</param>
      <returns>A new instance of type T</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.GetNonNullableType(System.Type)">
      <summary>
            Returns the underlying type of a nullable type:
            e.g. if Type = double?, then returns double.
            </summary>
      <param name="type">Type.</param>
      <returns>The underlying type.</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.IsNullableType(System.Type)">
      <summary>
            Returns true if the type is a nullable type.
            </summary>
      <param name="type">Type.</param>
      <returns>True if the type is nullable.</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.IsNumeric(System.Type)">
      <summary>
            Returns true if the type is any of the numeric data types:
            double, float, int, uint, long, ulong, short, ushort, sbyte, byte and decimal.
            </summary>
      <param name="type">Type.</param>
      <returns>True if the type is numeric.</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.IsNumericIntegral(System.Type)">
      <summary>
            Returns true if the type is any of the integral numeric data types:
            int, uint, long, ulong, short, ushort, sbyte and byte.
            </summary>
      <param name="type">Type.</param>
      <returns>True if the type is an integral numeric.</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.IsNumericIntegralSigned(System.Type)">
      <summary>
            Returns true if the type is any of the integral signed numeric data types:
            int, long, short and sbyte.
            </summary>
      <param name="type">Type.</param>
      <returns>True if the type is a signed integral numeric.</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.IsNumericIntegralUnsigned(System.Type)">
      <summary>
            Returns true if the type is any of the integral unsigned numeric data types:
            uint, ulong, ushort and byte.
            </summary>
      <param name="type">Type.</param>
      <returns>True if the type is an unsigned integral numeric.</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.IsNumericNonIntegral(System.Type)">
      <summary>
            Returns true if the type is any of the numeric non-integral data types:
            double, float and decimal.
            </summary>
      <param name="type">Type.</param>
      <returns>True if the type is a non-integral numeric.</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.GetEnumValues``1(System.Type)">
      <summary>
            Returns the values of an Enum type (Type.IsEnum == true).
            </summary>
      <typeparam name="T">Enum type.</typeparam>
      <param name="enumType">Enum type.</param>
      <returns>The list of values for that enum type.</returns>
    </member>
    <member name="T:C1.WPF.KeyboardUtil">
      <summary>
            Keyboard utilities.
            </summary>
    </member>
    <member name="P:C1.WPF.KeyboardUtil.Shift">
      <summary>
            Gets a value indicating whether shift key is pressed.
            </summary>
      <value>
        <c>true</c> if shift key is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:C1.WPF.KeyboardUtil.Ctrl">
      <summary>
            Gets a value indicating whether ctrl key is pressed.
            </summary>
      <value>
        <c>true</c> if ctrl key is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:C1.WPF.KeyboardUtil.Alt">
      <summary>
            Gets a value indicating whether alt key is pressed.
            </summary>
      <value>
        <c>true</c> if ctrl key is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:C1.WPF.PropertyChangedEventArgs`1">
      <summary>
            Provides event data for OnPropertyChanged events.
            </summary>
    </member>
    <member name="P:C1.WPF.PropertyChangedEventArgs`1.NewValue">
      <summary>
            The value of the property after the change.
            </summary>
    </member>
    <member name="P:C1.WPF.PropertyChangedEventArgs`1.OldValue">
      <summary>
            The value of the property before the change.
            </summary>
    </member>
    <member name="T:C1.WPF.PropertyChangingEventArgs`1">
      <summary>
            Provides event data for OnPropertyChanging events.
            </summary>
    </member>
    <member name="P:C1.WPF.PropertyChangingEventArgs`1.Cancel">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.WPF.PropertyChangingEventArgs`1" /> is cancel.
            </summary>
      <value>
        <c>true</c> if cancel; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:C1.WPF.ScrollBarCornerRadiusBuilder">
      <summary>
            Element used inside ScrollBar template in order to provide the appropriate CornerRadius for the scrollbar buttons.
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollBarCornerRadiusBuilder.TopLeftProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.TopLeft" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollBarCornerRadiusBuilder.TopRightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.TopRight" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollBarCornerRadiusBuilder.BottomLeftProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.BottomLeft" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollBarCornerRadiusBuilder.BottomRightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.BottomRight" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollBarCornerRadiusBuilder.ButtonCornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.ButtonCornerRadius" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.ScrollBarCornerRadiusBuilder.RaisePropertyChanged(System.String)">
      <summary>
            Raises the property changed event.
            </summary>
      <param name="propertyName">Name of the property that changed.</param>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.TopLeft">
      <summary>
            Gets or sets a value indicating whether top-left corner value will be taken from <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius" />.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.TopRight">
      <summary>
            Gets or sets a value indicating whether top-right corner value will be taken from <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius" />.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.BottomLeft">
      <summary>
            Gets or sets a value indicating whether bottom-left corner value will be taken from <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius" />.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.BottomRight">
      <summary>
            Gets or sets a value indicating whether bottom-right corner value will be taken from <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius" />.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius">
      <summary>
            Gets or sets the corner radius of the scrollbar itself.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.ButtonCornerRadius">
      <summary>
            Gets or sets the corner radius of the buttons.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.Output">
      <summary>
            Gets the corner radius that will be applied to the buttons.
            </summary>
    </member>
    <member name="E:C1.WPF.ScrollBarCornerRadiusBuilder.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="T:C1.WPF.ScrollViewerCornerRadiusBase">
      <summary>
            Element used inside ScrollViewer template in order to provide the appropriate CornerRadius for the scrollbars and scroll content presenter.
            </summary>
    </member>
    <member name="M:C1.WPF.ScrollViewerCornerRadiusBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ScrollViewerCornerRadiusBase" /> class.
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerCornerRadiusBase.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollViewerCornerRadiusBase.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerCornerRadiusBase.VerticalScrollBarVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollViewerCornerRadiusBase.VerticalScrollBarVisibility" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerCornerRadiusBase.HorizontalScrollBarVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollViewerCornerRadiusBase.HorizontalScrollBarVisibility" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.ScrollViewerCornerRadiusBase.UpdateOutput">
      <summary>
            Updates the output when one of the dependant values changed.
            </summary>
    </member>
    <member name="M:C1.WPF.ScrollViewerCornerRadiusBase.RaisePropertyChanged(System.String)">
      <summary>
            Raises the property changed event.
            </summary>
      <param name="propertyName">Name of the property that changed.</param>
    </member>
    <member name="P:C1.WPF.ScrollViewerCornerRadiusBase.CornerRadius">
      <summary>
            Gets or sets the CornerRadius used in the ScrollViewer.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerCornerRadiusBase.VerticalScrollBarVisibility">
      <summary>
            Gets or sets the vertical scroll bar visibility.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerCornerRadiusBase.HorizontalScrollBarVisibility">
      <summary>
            Gets or sets the horizontal scroll bar visibility.
            </summary>
    </member>
    <member name="E:C1.WPF.ScrollViewerCornerRadiusBase.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="T:C1.WPF.ScrollViewerCornerRadiusBuilder">
      <summary>
            Element used inside ScrollViewer template in order to provide the appropriate CornerRadius for the scrollbars.
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerCornerRadiusBuilder.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollViewerCornerRadiusBuilder.Orientation" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.ScrollViewerCornerRadiusBuilder.UpdateOutput">
      <summary>
            Updates the output when one of the dependant values changed.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerCornerRadiusBuilder.Orientation">
      <summary>
            Gets or sets the orientation of the scrollbar for which this builder will be used.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerCornerRadiusBuilder.Output">
      <summary>
            Gets the resulting CornerRadius that will be used in the scrollbar.
            </summary>
    </member>
    <member name="T:C1.WPF.ScrollViewerContentPresenterClip">
      <summary>
            Element used inside ScrollViewer template in order to provide the appropriate Clip for ScrollContentPresenter.
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerContentPresenterClip.ScrollContentPresenterProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollViewerContentPresenterClip.ScrollContentPresenter" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.ScrollViewerContentPresenterClip.UpdateOutput">
      <summary>
            Updates the output when one of the dependant values changed.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerContentPresenterClip.ScrollContentPresenter">
      <summary>
            Gets or sets the scroll content presenter which will be clipped.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerContentPresenterClip.Output">
      <summary>
            Gets the resulting Clip geometry that will be used in the scroll content presenter.
            </summary>
    </member>
    <member name="T:C1.WPF.ScrollViewerTouchBehavior">
      <summary>
            Adds touch support to MS ScrollViewer to scroll with the finger over the scrolling area.
            </summary>
    </member>
    <member name="M:C1.WPF.ScrollViewerTouchBehavior.GetTouchBehavior(System.Windows.Controls.ScrollViewer)">
      <summary>
            Gets the touch behavior associated with the specified ScrollViewer.
            </summary>
      <param name="scrollViewer">The scroll viewer which has the touch behavior attached.</param>
    </member>
    <member name="M:C1.WPF.ScrollViewerTouchBehavior.SetTouchBehavior(System.Windows.Controls.ScrollViewer,C1.WPF.ScrollViewerTouchBehavior)">
      <summary>
            Sets a touch behavior to a ScrollViewer.
            </summary>
      <param name="scrollViewer">The scroll viewer that will be able to be scrolled with the finger.</param>
      <param name="value">The touch behavior instance.</param>
    </member>
    <member name="F:C1.WPF.ScrollViewerTouchBehavior.TouchBehaviorProperty">
      <summary>
            Identifies the TouchBehavior attached property. 
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerTouchBehavior.HasInertiaProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollViewerTouchBehavior.HasInertia" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerTouchBehavior.PanningDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollViewerTouchBehavior.PanningDirection" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerTouchBehavior.IgnoreSwipeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ScrollViewerTouchBehavior.IgnoreSwipe" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerTouchBehavior.HasInertia">
      <summary>
            Gets or sets a value indicating whether the touch scrolling will have inertia.
            </summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerTouchBehavior.PanningDirection">
      <summary>
            Gets or sets the panning direction.
            </summary>
      <remarks>
            It only applies if IgnoreSwipe is set to true.
            </remarks>
    </member>
    <member name="P:C1.WPF.ScrollViewerTouchBehavior.IgnoreSwipe">
      <summary>
            Gets or sets a value indicating whether the swipe gesture is ignored.
            </summary>
    </member>
    <member name="T:C1.WPF.SmallShapePresenter">
      <summary>
            Internal class.
            Wrap a Shape object, such as a Path, with a SmallShapePresenter to prevent
            the shape from taking all available space when MaxHeight/MaxWidth is less than infinity.
            </summary>
    </member>
    <member name="M:C1.WPF.SmallShapePresenter.MeasureOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Measure pass of layout.
            </summary>
    </member>
    <member name="T:C1.WPF.SourcedEventArgs">
      <summary>
            Contains data for events with a source different from the object firing the event.
            </summary>
    </member>
    <member name="P:C1.WPF.SourcedEventArgs.Source">
      <summary>
            Gets or sets the source of the event.
            </summary>
    </member>
    <member name="T:C1.WPF.VTreeHelper">
      <summary>
            The <see cref="T:C1.WPF.VTreeHelper" /> class provides utility methods that perform common tasks involving nodes in a visual tree.
            </summary>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetChildOfType(System.Windows.DependencyObject,System.Type)">
      <summary>
            Returns the first child visual object of the specified type within a specified parent.
            </summary>
      <param name="reference">The parent visual, referenced as a <see cref="T:System.Windows.DependencyObject" />.</param>
      <param name="type">The <see cref="T:System.Type" /> of the children element to search for.</param>
      <returns>The visual object of the specified type.</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetChildrenOfType(System.Windows.DependencyObject,System.Type,System.Collections.Generic.IList{System.Windows.DependencyObject}@)">
      <summary>
            Returns all children visual objects of the specified type within a specified parent.
            </summary>
      <param name="reference">The parent visual, referenced as a <see cref="T:System.Windows.DependencyObject" />.</param>
      <param name="type">The <see cref="T:System.Type" /> of the children element to search for.</param>
      <param name="list">The <see cref="T:System.Collections.Generic.IList`1" /> object to fill with found objects.</param>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type)">
      <summary>
            Returns a <see cref="T:System.Windows.DependencyObject" /> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is null.
            </summary>
      <param name="reference">The visual whose parent is returned.</param>
      <param name="type">The <see cref="T:System.Type" /> of the parent element to search for.</param>
      <returns>The parent of the visual.</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Windows.DependencyObject)">
      <summary>
            Returns a <see cref="T:System.Windows.DependencyObject" /> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
      <param name="reference">The visual whose parent is returned.</param>
      <param name="type">The <see cref="T:System.Type" /> of the parent element to search for.</param>
      <param name="endObject">The visual representing the end point of search.</param>
      <returns>The parent of the visual.</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Boolean)">
      <summary>
            Returns a <see cref="T:System.Windows.DependencyObject" /> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is null.
            </summary>
      <param name="reference">The visual whose parent is returned.</param>
      <param name="type">The <see cref="T:System.Type" /> of the parent element to search for.</param>
      <param name="lookOutsideVisualTree">Specifies whether the search should go on outside the VisualTree.</param>
      <returns>The parent of the visual.</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Windows.DependencyObject,System.Boolean)">
      <summary>
            Returns a <see cref="T:System.Windows.DependencyObject" /> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
      <param name="reference">The visual whose parent is returned.</param>
      <param name="type">The <see cref="T:System.Type" /> of the parent element to search for.</param>
      <param name="endObject">The visual representing the end point of search.</param>
      <param name="lookOutsideVisualTree">Specifies whether the search should go on outside the VisualTree.</param>
      <returns>The parent of the visual.</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetFirstParent(System.Windows.DependencyObject,System.Collections.Generic.IList{System.Type},System.Windows.DependencyObject)">
      <summary>
            Returns a <see cref="T:System.Windows.DependencyObject" /> value that represents the first parent 
            of the visual object which type is one of the specified tyles. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
      <param name="reference">The visual whose parent is returned.</param>
      <param name="types">The <see cref="T:System.Collections.Generic.IList`1" /> list of types to search for.</param>
      <param name="endObject">The visual representing the end point of search.</param>
      <returns>The parent of the visual.</returns>
    </member>
    <member name="T:C1.WPF.C1HyperlinkButton">
      <summary>
            Represents a button control that displays a hyperlink.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HyperlinkButton.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1HyperlinkButton" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HyperlinkButton.OnApplyTemplate">
      <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperlinkButton.NavigateUriProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperlinkButton.NavigateUri" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperlinkButton.TargetNameProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperlinkButton.TargetName" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1HyperlinkButton.NavigateUri">
      <summary>
            Gets or sets a URI to navigate to when the <see cref="T:C1.WPF.C1HyperlinkButton" /> is activated.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HyperlinkButton.TargetName">
      <summary>
            Gets or sets the name of a target window or frame for the <see cref="T:C1.WPF.C1HyperlinkButton" />.
            </summary>
    </member>
  </members>
</doc>